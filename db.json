{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"source/images/blog/logger_02.png","path":"images/blog/logger_02.png","modified":1,"renderable":0},{"_id":"source/images/blog/logger_01.png","path":"images/blog/logger_01.png","modified":1,"renderable":0},{"_id":"source/images/blog/logger_04.png","path":"images/blog/logger_04.png","modified":1,"renderable":0},{"_id":"source/images/blog/net_baotou_02.png","path":"images/blog/net_baotou_02.png","modified":1,"renderable":0},{"_id":"source/images/blog/net_dns_01.png","path":"images/blog/net_dns_01.png","modified":1,"renderable":0},{"_id":"source/images/blog/net_ziwang_01.png","path":"images/blog/net_ziwang_01.png","modified":1,"renderable":0},{"_id":"source/images/blog/net_ziwang_02.png","path":"images/blog/net_ziwang_02.png","modified":1,"renderable":0},{"_id":"source/images/blog/net_ziwang_03.png","path":"images/blog/net_ziwang_03.png","modified":1,"renderable":0},{"_id":"source/images/blog/webwxgetmsgimg (1).jpg","path":"images/blog/webwxgetmsgimg (1).jpg","modified":1,"renderable":0},{"_id":"source/images/blog/webwxgetmsgimg (3).jpg","path":"images/blog/webwxgetmsgimg (3).jpg","modified":1,"renderable":0},{"_id":"source/images/blog/webwxgetmsgimg (4).jpg","path":"images/blog/webwxgetmsgimg (4).jpg","modified":1,"renderable":0},{"_id":"source/images/blog/webwxgetmsgimg (5).jpg","path":"images/blog/webwxgetmsgimg (5).jpg","modified":1,"renderable":0},{"_id":"source/images/blog/webwxgetmsgimg (6).jpg","path":"images/blog/webwxgetmsgimg (6).jpg","modified":1,"renderable":0},{"_id":"source/images/blog/webwxgetmsgimg.jpg","path":"images/blog/webwxgetmsgimg.jpg","modified":1,"renderable":0},{"_id":"source/images/favicons/android-chrome-144x144.png","path":"images/favicons/android-chrome-144x144.png","modified":1,"renderable":0},{"_id":"source/images/favicons/android-chrome-72x72.png","path":"images/favicons/android-chrome-72x72.png","modified":1,"renderable":0},{"_id":"source/images/favicons/android-chrome-192x192.png","path":"images/favicons/android-chrome-192x192.png","modified":1,"renderable":0},{"_id":"source/images/favicons/android-chrome-48x48.png","path":"images/favicons/android-chrome-48x48.png","modified":1,"renderable":0},{"_id":"source/images/favicons/android-chrome-36x36.png","path":"images/favicons/android-chrome-36x36.png","modified":1,"renderable":0},{"_id":"source/images/favicons/android-chrome-96x96.png","path":"images/favicons/android-chrome-96x96.png","modified":1,"renderable":0},{"_id":"source/images/favicons/apple-touch-icon-114x114.png","path":"images/favicons/apple-touch-icon-114x114.png","modified":1,"renderable":0},{"_id":"source/images/favicons/apple-touch-icon-120x120.png","path":"images/favicons/apple-touch-icon-120x120.png","modified":1,"renderable":0},{"_id":"source/images/favicons/apple-touch-icon-152x152.png","path":"images/favicons/apple-touch-icon-152x152.png","modified":1,"renderable":0},{"_id":"source/images/favicons/apple-touch-icon-144x144.png","path":"images/favicons/apple-touch-icon-144x144.png","modified":1,"renderable":0},{"_id":"source/images/favicons/apple-touch-icon-180x180.png","path":"images/favicons/apple-touch-icon-180x180.png","modified":1,"renderable":0},{"_id":"source/images/favicons/apple-touch-icon-57x57.png","path":"images/favicons/apple-touch-icon-57x57.png","modified":1,"renderable":0},{"_id":"source/images/favicons/apple-touch-icon-72x72.png","path":"images/favicons/apple-touch-icon-72x72.png","modified":1,"renderable":0},{"_id":"source/images/favicons/apple-touch-icon-60x60.png","path":"images/favicons/apple-touch-icon-60x60.png","modified":1,"renderable":0},{"_id":"source/images/favicons/apple-touch-icon-76x76.png","path":"images/favicons/apple-touch-icon-76x76.png","modified":1,"renderable":0},{"_id":"source/images/favicons/apple-touch-icon-precomposed.png","path":"images/favicons/apple-touch-icon-precomposed.png","modified":1,"renderable":0},{"_id":"source/images/favicons/browserconfig.xml","path":"images/favicons/browserconfig.xml","modified":1,"renderable":0},{"_id":"source/images/favicons/apple-touch-icon.png","path":"images/favicons/apple-touch-icon.png","modified":1,"renderable":0},{"_id":"source/images/favicons/favicon-16x16.png","path":"images/favicons/favicon-16x16.png","modified":1,"renderable":0},{"_id":"source/images/favicons/favicon-194x194.png","path":"images/favicons/favicon-194x194.png","modified":1,"renderable":0},{"_id":"source/images/favicons/favicon-32x32.png","path":"images/favicons/favicon-32x32.png","modified":1,"renderable":0},{"_id":"source/images/favicons/favicon-96x96.png","path":"images/favicons/favicon-96x96.png","modified":1,"renderable":0},{"_id":"source/images/favicons/favicon.ico","path":"images/favicons/favicon.ico","modified":1,"renderable":0},{"_id":"source/images/favicons/mstile-144x144.png","path":"images/favicons/mstile-144x144.png","modified":1,"renderable":0},{"_id":"source/images/favicons/mstile-150x150.png","path":"images/favicons/mstile-150x150.png","modified":1,"renderable":0},{"_id":"source/images/favicons/mstile-310x150.png","path":"images/favicons/mstile-310x150.png","modified":1,"renderable":0},{"_id":"source/images/favicons/mstile-310x310.png","path":"images/favicons/mstile-310x310.png","modified":1,"renderable":0},{"_id":"source/images/favicons/mstile-70x70.png","path":"images/favicons/mstile-70x70.png","modified":1,"renderable":0},{"_id":"source/images/favicons/safari-pinned-tab.svg","path":"images/favicons/safari-pinned-tab.svg","modified":1,"renderable":0},{"_id":"source/images/background-cover.jpg","path":"images/background-cover.jpg","modified":1,"renderable":0},{"_id":"source/images/blog/logger_03.png","path":"images/blog/logger_03.png","modified":1,"renderable":0},{"_id":"source/images/blog/net.png","path":"images/blog/net.png","modified":1,"renderable":0},{"_id":"source/images/blog/net01.png","path":"images/blog/net01.png","modified":1,"renderable":0},{"_id":"source/images/blog/net03.png","path":"images/blog/net03.png","modified":1,"renderable":0},{"_id":"source/images/blog/net_baotou_01.png","path":"images/blog/net_baotou_01.png","modified":1,"renderable":0},{"_id":"source/images/blog/net_ip_01.png","path":"images/blog/net_ip_01.png","modified":1,"renderable":0},{"_id":"source/images/blog/net_ip_02.png","path":"images/blog/net_ip_02.png","modified":1,"renderable":0},{"_id":"source/images/blog/net_dns_02.png","path":"images/blog/net_dns_02.png","modified":1,"renderable":0},{"_id":"source/images/blog/net_wangguan_01.png","path":"images/blog/net_wangguan_01.png","modified":1,"renderable":0},{"_id":"source/images/blog/net_ziwang_04.png","path":"images/blog/net_ziwang_04.png","modified":1,"renderable":0},{"_id":"source/images/blog/xuezhong.png","path":"images/blog/xuezhong.png","modified":1,"renderable":0},{"_id":"source/images/blog/gududemao.png","path":"images/blog/gududemao.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/Android IPC基础概念.md","hash":"e591c3fe6ce44f6a5eb8e23d7b26aeb91b34e2d7","modified":1514265265480},{"_id":"source/_posts/Android IPC机制简介.md","hash":"b398b1f898ee6a94bab429db90b0670756a78867","modified":1514265265481},{"_id":"source/_posts/Android中屏幕适配的方式.md","hash":"77c918be67dea0d89904bb5842696da4900050ed","modified":1514265265484},{"_id":"source/_posts/Android 关于 so 所需要了解的.md","hash":"051cdac800590e1c676bbc8c3fb0f3943e53b3fb","modified":1514265265482},{"_id":"source/_posts/Android中的多进程的模式.md","hash":"4885eb8c5977d18632e8a69616be97f9f9f09dd9","modified":1514265265497},{"_id":"source/_posts/Android6.0新的权限机制.md","hash":"a3c0d2ef3a95cde27dccefdb477eace9ddce51d0","modified":1514265265483},{"_id":"source/_posts/Android头部视差效果的实现.md","hash":"a22e485dbd0ce2569d8260f69510aeef2cdb2295","modified":1514265265498},{"_id":"source/_posts/Android热修复技术之Java代理模式（持续更新）.md","hash":"9aa1e8a6dd4016dd903964106cf21845190031fd","modified":1514265265499},{"_id":"source/_posts/Android自定义View之事件分发机制.md","hash":"9e9095fa3fb73ed061022f43a00265abbdce7c15","modified":1514265265500},{"_id":"source/_posts/JavaSpcript常用互动方法.md","hash":"7a16a57de123dac343dfc544ff7533d092c1fadf","modified":1514265265504},{"_id":"source/_posts/IP地址，子网掩码，端口，DNS，网关.md","hash":"ad025f12e81ce7d3084664aad69621940cff7c3c","modified":1514265265503},{"_id":"source/_posts/MarkDown编写流程图的语法问题.md","hash":"0517efddce859af7bbb10c23b7a4a672a9384c72","modified":1514265265505},{"_id":"source/_posts/Android调起照相机、相册获取图片，并压缩图片.md","hash":"3dae325fad9e1dfe4e63c07de223cb8515aae771","modified":1514265265502},{"_id":"source/_posts/OkHttp接口拦截打印log的设置.md","hash":"8238e9a06328499e05a4a0133d9ee03407130a24","modified":1514265265507},{"_id":"source/_posts/流程图示例.md","hash":"32e757ed596af9b52069d02ae935a3fb17b7368d","modified":1514265265509},{"_id":"source/_posts/考研之后的话.md","hash":"1e2e6d039f426afb7620c07c794765a9e9b1247e","modified":1514372248587},{"_id":"source/_posts/实现WebView中网页与App的Activity跳转.md","hash":"60acb1f1948cc10db6c2a766471b93244c4820ad","modified":1514265265508},{"_id":"source/_posts/网络基础之网络模型.md","hash":"8257b3a84615a4bf0c463eab59db802b0932f120","modified":1514265265510},{"_id":"source/_posts/远程登录服务器.md","hash":"eaf49159e4e370dd43630c132d4b0dffc5e89067","modified":1514265265512},{"_id":"source/about/index.md","hash":"aa96de3a831c876d63b5e0b8dc6b7b9c96dc12a9","modified":1514265265514},{"_id":"source/categories/index.md","hash":"f1aaca66a845651db603b17e22b44e4ee9bcad76","modified":1514265265515},{"_id":"source/tags/index.md","hash":"f050f14e4924f476a717737a7218b7bf72403b54","modified":1514265265817},{"_id":"source/images/avatar.jpg","hash":"9c5aba86f6f051deff1c314973da2bf2645af22f","modified":1514265265519},{"_id":"source/images/blog/logger_02.png","hash":"ee5606df4aa0471cae3fb11cb84196ffbff389ba","modified":1514265265532},{"_id":"source/images/blog/logger_01.png","hash":"f073df69c64fbc2fa7bc7dc1a0359cb4c0c6aae9","modified":1514265265530},{"_id":"source/images/blog/logger_04.png","hash":"fd9969d621c95c3a02be5538729c32c192d85893","modified":1514265265536},{"_id":"source/images/blog/net_baotou_02.png","hash":"e6b72c01f162d868f0bf61e497f927aaa678e49e","modified":1514265265719},{"_id":"source/images/blog/net_dns_01.png","hash":"c6252a727690157ded5c297c4b1f0d0b57d5ca13","modified":1514265265722},{"_id":"source/images/blog/net_ziwang_01.png","hash":"46e657a722b14da8dbb0f987012b4c1e411936d8","modified":1514265265748},{"_id":"source/images/blog/net_ziwang_02.png","hash":"ac7b2ea34ebec8995d8655ff699b74f99a3e9df7","modified":1514265265752},{"_id":"source/images/blog/net_ziwang_03.png","hash":"7d12a050c512063b2ba126b02bac0d16d6798790","modified":1514265265756},{"_id":"source/images/blog/webwxgetmsgimg (1).jpg","hash":"fa21240fa9796d6587ea2ded263895ff7c420865","modified":1514265265767},{"_id":"source/images/blog/webwxgetmsgimg (3).jpg","hash":"9c527f77e7d02fa791035db88581ca5b0514ed45","modified":1514265265771},{"_id":"source/images/blog/webwxgetmsgimg (4).jpg","hash":"643f02ed85893781e41cc82c96dd660aabb9e4f9","modified":1514265265775},{"_id":"source/images/blog/webwxgetmsgimg (5).jpg","hash":"b2b7daf146dca28b7c3c0c6288790c393340fa1d","modified":1514265265777},{"_id":"source/images/blog/webwxgetmsgimg (6).jpg","hash":"bd624351fe643dab6b07a655a07642b754303605","modified":1514265265779},{"_id":"source/images/blog/webwxgetmsgimg.jpg","hash":"7e3b034566c505052956193b7da38acc028b9cb3","modified":1514265265782},{"_id":"source/images/favicons/android-chrome-144x144.png","hash":"d35152cb865234eda0c5b707bc224e20eb972bc0","modified":1514265265787},{"_id":"source/images/favicons/android-chrome-72x72.png","hash":"341679694550e010ff249beb6bbe93379e0df0e9","modified":1514265265792},{"_id":"source/images/favicons/android-chrome-192x192.png","hash":"a4c9cacc59061ba9ce8ff4db655cdc4eeabf1d79","modified":1514265265788},{"_id":"source/images/favicons/android-chrome-48x48.png","hash":"d2824999f8450eae48ce08d8e6b2d35df3ebc758","modified":1514265265790},{"_id":"source/images/favicons/android-chrome-36x36.png","hash":"0004675ab1d877a2b357ce1912b0c350000cc66a","modified":1514265265789},{"_id":"source/images/favicons/android-chrome-96x96.png","hash":"7d6f96cdd9d96dd775070beb8cbd9fe6d5709420","modified":1514265265793},{"_id":"source/images/favicons/apple-touch-icon-114x114.png","hash":"1f122c15b2c71e263b6d94666f77ad25acdf1a20","modified":1514265265794},{"_id":"source/images/favicons/apple-touch-icon-120x120.png","hash":"c5a77db0f79e176efa97562448115c640aaa21c7","modified":1514265265796},{"_id":"source/images/favicons/apple-touch-icon-152x152.png","hash":"b793b8b04757d3fa8d7b634bdd16de2fb95dc8e9","modified":1514265265798},{"_id":"source/images/favicons/apple-touch-icon-144x144.png","hash":"d4e58bf859845496733df9265f79b328068a4af5","modified":1514265265797},{"_id":"source/images/favicons/apple-touch-icon-180x180.png","hash":"6fd2684fd86b35ab3a30ba473b9fb2961e439035","modified":1514265265799},{"_id":"source/images/favicons/apple-touch-icon-57x57.png","hash":"e57c181a9cdbc96e18734be1c8f5f329227c51ee","modified":1514265265801},{"_id":"source/images/favicons/apple-touch-icon-72x72.png","hash":"cba0976cdbc6369138facded898ddbd18dddcc8e","modified":1514265265803},{"_id":"source/images/favicons/apple-touch-icon-60x60.png","hash":"9eb001dce66059061e584da8d5ff69ee0353fa08","modified":1514265265802},{"_id":"source/images/favicons/apple-touch-icon-76x76.png","hash":"8c370d255771181cce745b9b6ec294d78d096406","modified":1514265265804},{"_id":"source/images/favicons/apple-touch-icon-precomposed.png","hash":"63f67a422c8f2f15150bd72f9153c7a637055872","modified":1514265265805},{"_id":"source/images/favicons/browserconfig.xml","hash":"80bd8ed057f1e4428ac2cf3925f1cbfb8bc95932","modified":1514265265807},{"_id":"source/images/favicons/apple-touch-icon.png","hash":"6fd2684fd86b35ab3a30ba473b9fb2961e439035","modified":1514265265806},{"_id":"source/images/favicons/favicon-16x16.png","hash":"c6bff992d13694db65570eb714c9418e892f7ce7","modified":1514265265808},{"_id":"source/images/favicons/favicon-194x194.png","hash":"42c75fca42d414e55c246de2bc053321e4b6c1d1","modified":1514265265809},{"_id":"source/images/favicons/favicon-32x32.png","hash":"5e1fef4809aa5eaa266e3eb8daa94da3c2e913a4","modified":1514265265809},{"_id":"source/images/favicons/favicon-96x96.png","hash":"97ffb6c183ef97b02b529422d7bcea28d253fc3b","modified":1514265265810},{"_id":"source/images/favicons/manifest.json","hash":"1af954e90fe3dff58ebcabfe69053b5ae10ae16a","modified":1514265265812},{"_id":"source/images/favicons/favicon.ico","hash":"7dd580df198eb607fba7a5a5fa70e2e231c0e9f4","modified":1514265265811},{"_id":"source/images/favicons/mstile-144x144.png","hash":"d1e6f7ce87084ee5a00b7af9c88fe19ff05d5e6c","modified":1514265265812},{"_id":"source/images/favicons/mstile-150x150.png","hash":"d08d598b6cd96f3937786d94aacf0b3370074e32","modified":1514265265813},{"_id":"source/images/favicons/mstile-310x150.png","hash":"9202332d978c123fd0a55e670e2172dfe876bfbf","modified":1514265265814},{"_id":"source/images/favicons/mstile-310x310.png","hash":"22acbf20ab16f42c1fe3a40d9cc455c0c39518fd","modified":1514265265815},{"_id":"source/images/favicons/mstile-70x70.png","hash":"231ae0cb571a0f9782445d940091f9b0c4c66943","modified":1514265265815},{"_id":"source/images/favicons/safari-pinned-tab.svg","hash":"288c8ede94b82fe8bc745bdaf4423c4f4111fabf","modified":1514265265816},{"_id":"source/images/background-cover.jpg","hash":"6593b5a2fb840ad654dc9b82008fd9202f3f4430","modified":1514265265522},{"_id":"source/images/blog/logger_03.png","hash":"78a974fdd9b1b7c79c29a7e66ee9d6820e253145","modified":1514265265534},{"_id":"source/images/blog/net.png","hash":"96bccad20d4167fab33ee1774bcd1f725e30c96b","modified":1514265265538},{"_id":"source/images/blog/net01.png","hash":"7289dcfaf0a556b37293f9cb18a6b55d5dc12ee1","modified":1514265265705},{"_id":"source/images/blog/net03.png","hash":"242322f577d18bada7cdb2ccd447f875180e69fe","modified":1514265265710},{"_id":"source/images/blog/net_baotou_01.png","hash":"fa6a2203fd90bb58b5813489d40b115508f75866","modified":1514265265715},{"_id":"source/images/blog/net_ip_01.png","hash":"22a035ba68c222a8fb87ae183bb67b2d0cb5aff5","modified":1514265265733},{"_id":"source/images/blog/net_ip_02.png","hash":"9e4268c212d96c6837827e116b996852b19c2696","modified":1514265265738},{"_id":"source/images/blog/net_dns_02.png","hash":"a551c42c71c3d2da499a8c221d6fd3388f53dd7c","modified":1514265265728},{"_id":"source/images/blog/net_wangguan_01.png","hash":"5904c92e2f4dc8a323ad8fd45d5d9b2605a4108c","modified":1514265265745},{"_id":"source/images/blog/net_ziwang_04.png","hash":"9349a56d86e010365cc6252294d1ab8ba206d7b8","modified":1514265265762},{"_id":"source/images/blog/xuezhong.png","hash":"a9e3101b1e868cc9fe885bf8ab952e3e5b5f4142","modified":1514265265785},{"_id":"source/images/blog/gududemao.png","hash":"80fa659eb3d1bbbd12152ce7067b2b775aa74cb4","modified":1514265265529}],"Category":[{"name":"Android","_id":"cjboyl4wo00021ctmqxqcpvh3"},{"name":"NDK开发","parent":"cjboyl4wo00021ctmqxqcpvh3","_id":"cjboyl4xc000j1ctmkl5jr6la"},{"name":"IPC","parent":"cjboyl4wo00021ctmqxqcpvh3","_id":"cjboyl4xf000p1ctm6z7tyirt"},{"name":"适配","parent":"cjboyl4wo00021ctmqxqcpvh3","_id":"cjboyl4xi000w1ctmu61huhu6"},{"name":"UI","parent":"cjboyl4wo00021ctmqxqcpvh3","_id":"cjboyl4xu00151ctmpplaxhop"},{"name":"设计模式","parent":"cjboyl4wo00021ctmqxqcpvh3","_id":"cjboyl4y3001q1ctm4aen7crc"},{"name":"JS","_id":"cjboyl4y600221ctmsw53i8ou"},{"name":"计算机网络","_id":"cjboyl4y600251ctmcm4eshih"},{"name":"Markdown","_id":"cjboyl4y700271ctmek0ygawd"},{"name":"网络","parent":"cjboyl4wo00021ctmqxqcpvh3","_id":"cjboyl4y700291ctmnsotw9t9"},{"name":"交互","parent":"cjboyl4wo00021ctmqxqcpvh3","_id":"cjboyl4y8002b1ctm24hj0bhr"},{"name":"生活","_id":"cjboyl4y8002e1ctmourn8j3i"},{"name":"WebView","parent":"cjboyl4wo00021ctmqxqcpvh3","_id":"cjboyl4y9002h1ctmc93pvc30"},{"name":"基础","parent":"cjboyl4y600221ctmsw53i8ou","_id":"cjboyl4ya002o1ctmdyu4xt6g"},{"name":"基础","parent":"cjboyl4y600251ctmcm4eshih","_id":"cjboyl4yb002p1ctmvgdrcwrd"},{"name":"流程图","parent":"cjboyl4y700271ctmek0ygawd","_id":"cjboyl4yb002r1ctmtyonec32"},{"name":"ssh","parent":"cjboyl4y600251ctmcm4eshih","_id":"cjboyl4yd002x1ctmdyjivzz3"}],"Data":[],"Page":[{"date":"2017-06-29T09:55:11.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ndate: 2017-06-29 17:55:11\ntype: about\n---\n","updated":"2017-12-26T05:14:25.514Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cjboyl4yh00331ctmuzottmf5","content":"","site":{"data":{}},"excerpt":"","more":""},{"date":"2017-06-29T09:54:03.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ndate: 2017-06-29 17:54:03\ntype: categories\n---\n","updated":"2017-12-26T05:14:25.515Z","path":"categories/index.html","title":"","comments":1,"layout":"page","_id":"cjboyl4yj00341ctmlnn1knyh","content":"","site":{"data":{}},"excerpt":"","more":""},{"date":"2014-12-22T04:39:04.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ndate: 2014-12-22 12:39:04\ntype: \"tags\"\n---\n","updated":"2017-12-26T05:14:25.817Z","path":"tags/index.html","title":"","comments":1,"layout":"page","_id":"cjboyl4yj00351ctmbq1v9x2r","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"{\n\t\"name\": \"Jekyll-Uno\",\n\t\"icons\": [\n\t\t{\n\t\t\t\"src\": \"\\/images\\/favicons\\/android-chrome-36x36.png\",\n\t\t\t\"sizes\": \"36x36\",\n\t\t\t\"type\": \"image\\/png\",\n\t\t\t\"density\": 0.75\n\t\t},\n\t\t{\n\t\t\t\"src\": \"\\/images\\/favicons\\/android-chrome-48x48.png\",\n\t\t\t\"sizes\": \"48x48\",\n\t\t\t\"type\": \"image\\/png\",\n\t\t\t\"density\": 1\n\t\t},\n\t\t{\n\t\t\t\"src\": \"\\/images\\/favicons\\/android-chrome-72x72.png\",\n\t\t\t\"sizes\": \"72x72\",\n\t\t\t\"type\": \"image\\/png\",\n\t\t\t\"density\": 1.5\n\t\t},\n\t\t{\n\t\t\t\"src\": \"\\/images\\/favicons\\/android-chrome-96x96.png\",\n\t\t\t\"sizes\": \"96x96\",\n\t\t\t\"type\": \"image\\/png\",\n\t\t\t\"density\": 2\n\t\t},\n\t\t{\n\t\t\t\"src\": \"\\/images\\/favicons\\/android-chrome-144x144.png\",\n\t\t\t\"sizes\": \"144x144\",\n\t\t\t\"type\": \"image\\/png\",\n\t\t\t\"density\": 3\n\t\t},\n\t\t{\n\t\t\t\"src\": \"\\/images\\/favicons\\/android-chrome-192x192.png\",\n\t\t\t\"sizes\": \"192x192\",\n\t\t\t\"type\": \"image\\/png\",\n\t\t\t\"density\": 4\n\t\t}\n\t]\n}\n","source":"images/favicons/manifest.json","raw":"{\n\t\"name\": \"Jekyll-Uno\",\n\t\"icons\": [\n\t\t{\n\t\t\t\"src\": \"\\/images\\/favicons\\/android-chrome-36x36.png\",\n\t\t\t\"sizes\": \"36x36\",\n\t\t\t\"type\": \"image\\/png\",\n\t\t\t\"density\": 0.75\n\t\t},\n\t\t{\n\t\t\t\"src\": \"\\/images\\/favicons\\/android-chrome-48x48.png\",\n\t\t\t\"sizes\": \"48x48\",\n\t\t\t\"type\": \"image\\/png\",\n\t\t\t\"density\": 1\n\t\t},\n\t\t{\n\t\t\t\"src\": \"\\/images\\/favicons\\/android-chrome-72x72.png\",\n\t\t\t\"sizes\": \"72x72\",\n\t\t\t\"type\": \"image\\/png\",\n\t\t\t\"density\": 1.5\n\t\t},\n\t\t{\n\t\t\t\"src\": \"\\/images\\/favicons\\/android-chrome-96x96.png\",\n\t\t\t\"sizes\": \"96x96\",\n\t\t\t\"type\": \"image\\/png\",\n\t\t\t\"density\": 2\n\t\t},\n\t\t{\n\t\t\t\"src\": \"\\/images\\/favicons\\/android-chrome-144x144.png\",\n\t\t\t\"sizes\": \"144x144\",\n\t\t\t\"type\": \"image\\/png\",\n\t\t\t\"density\": 3\n\t\t},\n\t\t{\n\t\t\t\"src\": \"\\/images\\/favicons\\/android-chrome-192x192.png\",\n\t\t\t\"sizes\": \"192x192\",\n\t\t\t\"type\": \"image\\/png\",\n\t\t\t\"density\": 4\n\t\t}\n\t]\n}\n","date":"2017-12-26T05:14:25.812Z","updated":"2017-12-26T05:14:25.812Z","path":"images/favicons/manifest.json","layout":"false","title":"","comments":1,"_id":"cjboyl4yn00361ctm78euf1uk","content":"{\"name\":\"Jekyll-Uno\",\"icons\":[{\"src\":\"/images/favicons/android-chrome-36x36.png\",\"sizes\":\"36x36\",\"type\":\"image/png\",\"density\":0.75},{\"src\":\"/images/favicons/android-chrome-48x48.png\",\"sizes\":\"48x48\",\"type\":\"image/png\",\"density\":1},{\"src\":\"/images/favicons/android-chrome-72x72.png\",\"sizes\":\"72x72\",\"type\":\"image/png\",\"density\":1.5},{\"src\":\"/images/favicons/android-chrome-96x96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\",\"density\":2},{\"src\":\"/images/favicons/android-chrome-144x144.png\",\"sizes\":\"144x144\",\"type\":\"image/png\",\"density\":3},{\"src\":\"/images/favicons/android-chrome-192x192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\",\"density\":4}]}","site":{"data":{}},"excerpt":"","more":"{\"name\":\"Jekyll-Uno\",\"icons\":[{\"src\":\"/images/favicons/android-chrome-36x36.png\",\"sizes\":\"36x36\",\"type\":\"image/png\",\"density\":0.75},{\"src\":\"/images/favicons/android-chrome-48x48.png\",\"sizes\":\"48x48\",\"type\":\"image/png\",\"density\":1},{\"src\":\"/images/favicons/android-chrome-72x72.png\",\"sizes\":\"72x72\",\"type\":\"image/png\",\"density\":1.5},{\"src\":\"/images/favicons/android-chrome-96x96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\",\"density\":2},{\"src\":\"/images/favicons/android-chrome-144x144.png\",\"sizes\":\"144x144\",\"type\":\"image/png\",\"density\":3},{\"src\":\"/images/favicons/android-chrome-192x192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\",\"density\":4}]}"}],"Post":[{"title":"Android IPC机制简介","date":"2017-07-26T06:47:01.000Z","_content":"\n![](http://ot0nm27pk.bkt.clouddn.com/android_ipc_01.jpg) \n\n#### IPC是什么\n\nIPC是Inter-Process Communication缩写,含义为进程间通信. 按照操作系统中的描述,线程是cpu调度的最小单元,而进程一般指一个执行单元. 进程中可以有一个或者多个线程.\n\n不同的操作系统有着不同的IPC机制:\n\n- Windows: 通过剪切板, 管道, 信号量来进行进程间通信\n- Linux: 通过命名管道, 共享内存, 信号量等来进行进行进程间通信\n- android: 虽然基于Linux内核,但是使用了独有的Binder机制, 也可以Socket进行通信\n\n\n#### 这里解释一下定义（来自百度百科）\n\n- 剪切板：\n剪切板是指windows 操作系统提供的一个暂存数据，并且提供共享的一个模块。也称为数据中转站，剪切板在后台起作用，在内存里.，是操作系统设置的一段存储区域，你是在硬盘里找不到的.你只要有文本输入的地方按CTRL+V或右键粘贴就出现了，.新的内容送到剪切板后，将覆盖旧内容。\n- 管道：\n管道是两个头的东西，每个头各连接一个进程或者同一个进程的不同代码，按照管道的类别分有两种管道，匿名的和命名的；按照管道的传输方向分也可以分成两种，单向的双向的。根据管道的特点，命名管道通常用在网络环境下不同计算机上运行的进程之间的通信（当然也可以用在同一台机的不同进程中）它可以是单向或双向的；而匿名管道只能用在同一台计算机中，它只能是单向的。匿名管道其实是通过用给了一个指定名字的有名管道来实现的。\n使用管道的好处在于：读写它使用的是对文件操作的 api，结果操作管道就和操作文件一样。即使你在不同的计算机之间用命名管道来通信，你也不必了解和自己去实现网络间通信的具体细节。\n- 信号量\n信号量(Semaphore)，有时被称为信号灯，是在多线程环境下使用的一种设施，是可以用来保证两个或多个关键代码段不被并发调用。在进入一个关键代码段之前，线程必须获取一个信号量；一旦该关键代码段完成了，那么该线程必须释放信号量。其它想进入该关键代码段的线程必须等待直到第一个线程释放信号量。为了完成这个过程，需要创建一个信号量VI，然后将Acquire Semaphore VI以及Release Semaphore VI分别放置在每个关键代码段的首末端。确认这些信号量VI引用的是初始创建的信号量。\n- 共享内存\n共享内存是进程间通信中最简单的方式之一。共享内存允许两个或更多进程访问同一块内存，就如同 malloc() 函数向不同进程返回了指向同一个物理内存区域的指针。当一个进程改变了这块地址中的内容的时候，其它进程都会察觉到这个更改。因为所有进程共享同一块内存，共享内存在各种进程间通信方式中具有最高的效率。\n\n\n使用场景: \n可能有些模块因为特殊原因需要运行在单独的进程中; 或者为了加大一个应用可使用的内存; 又或者我们需要去另外一个进程去获取数据,必然需要跨进程.","source":"_posts/Android IPC机制简介.md","raw":"---\ntitle:  \"Android IPC机制简介\"\ndate: 2017-07-26 14:47:01\ncategories: [Android,IPC]\ntags: [Android]\n---\n\n![](http://ot0nm27pk.bkt.clouddn.com/android_ipc_01.jpg) \n\n#### IPC是什么\n\nIPC是Inter-Process Communication缩写,含义为进程间通信. 按照操作系统中的描述,线程是cpu调度的最小单元,而进程一般指一个执行单元. 进程中可以有一个或者多个线程.\n\n不同的操作系统有着不同的IPC机制:\n\n- Windows: 通过剪切板, 管道, 信号量来进行进程间通信\n- Linux: 通过命名管道, 共享内存, 信号量等来进行进行进程间通信\n- android: 虽然基于Linux内核,但是使用了独有的Binder机制, 也可以Socket进行通信\n\n\n#### 这里解释一下定义（来自百度百科）\n\n- 剪切板：\n剪切板是指windows 操作系统提供的一个暂存数据，并且提供共享的一个模块。也称为数据中转站，剪切板在后台起作用，在内存里.，是操作系统设置的一段存储区域，你是在硬盘里找不到的.你只要有文本输入的地方按CTRL+V或右键粘贴就出现了，.新的内容送到剪切板后，将覆盖旧内容。\n- 管道：\n管道是两个头的东西，每个头各连接一个进程或者同一个进程的不同代码，按照管道的类别分有两种管道，匿名的和命名的；按照管道的传输方向分也可以分成两种，单向的双向的。根据管道的特点，命名管道通常用在网络环境下不同计算机上运行的进程之间的通信（当然也可以用在同一台机的不同进程中）它可以是单向或双向的；而匿名管道只能用在同一台计算机中，它只能是单向的。匿名管道其实是通过用给了一个指定名字的有名管道来实现的。\n使用管道的好处在于：读写它使用的是对文件操作的 api，结果操作管道就和操作文件一样。即使你在不同的计算机之间用命名管道来通信，你也不必了解和自己去实现网络间通信的具体细节。\n- 信号量\n信号量(Semaphore)，有时被称为信号灯，是在多线程环境下使用的一种设施，是可以用来保证两个或多个关键代码段不被并发调用。在进入一个关键代码段之前，线程必须获取一个信号量；一旦该关键代码段完成了，那么该线程必须释放信号量。其它想进入该关键代码段的线程必须等待直到第一个线程释放信号量。为了完成这个过程，需要创建一个信号量VI，然后将Acquire Semaphore VI以及Release Semaphore VI分别放置在每个关键代码段的首末端。确认这些信号量VI引用的是初始创建的信号量。\n- 共享内存\n共享内存是进程间通信中最简单的方式之一。共享内存允许两个或更多进程访问同一块内存，就如同 malloc() 函数向不同进程返回了指向同一个物理内存区域的指针。当一个进程改变了这块地址中的内容的时候，其它进程都会察觉到这个更改。因为所有进程共享同一块内存，共享内存在各种进程间通信方式中具有最高的效率。\n\n\n使用场景: \n可能有些模块因为特殊原因需要运行在单独的进程中; 或者为了加大一个应用可使用的内存; 又或者我们需要去另外一个进程去获取数据,必然需要跨进程.","slug":"Android IPC机制简介","published":1,"updated":"2017-12-26T05:14:25.481Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjboyl4wi00001ctmbh6ftswx","content":"<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/android_ipc_01.jpg\" alt=\"\"> </p>\n<h4 id=\"IPC是什么\"><a href=\"#IPC是什么\" class=\"headerlink\" title=\"IPC是什么\"></a>IPC是什么</h4><p>IPC是Inter-Process Communication缩写,含义为进程间通信. 按照操作系统中的描述,线程是cpu调度的最小单元,而进程一般指一个执行单元. 进程中可以有一个或者多个线程.</p>\n<p>不同的操作系统有着不同的IPC机制:</p>\n<ul>\n<li>Windows: 通过剪切板, 管道, 信号量来进行进程间通信</li>\n<li>Linux: 通过命名管道, 共享内存, 信号量等来进行进行进程间通信</li>\n<li>android: 虽然基于Linux内核,但是使用了独有的Binder机制, 也可以Socket进行通信</li>\n</ul>\n<h4 id=\"这里解释一下定义（来自百度百科）\"><a href=\"#这里解释一下定义（来自百度百科）\" class=\"headerlink\" title=\"这里解释一下定义（来自百度百科）\"></a>这里解释一下定义（来自百度百科）</h4><ul>\n<li>剪切板：<br>剪切板是指windows 操作系统提供的一个暂存数据，并且提供共享的一个模块。也称为数据中转站，剪切板在后台起作用，在内存里.，是操作系统设置的一段存储区域，你是在硬盘里找不到的.你只要有文本输入的地方按CTRL+V或右键粘贴就出现了，.新的内容送到剪切板后，将覆盖旧内容。</li>\n<li>管道：<br>管道是两个头的东西，每个头各连接一个进程或者同一个进程的不同代码，按照管道的类别分有两种管道，匿名的和命名的；按照管道的传输方向分也可以分成两种，单向的双向的。根据管道的特点，命名管道通常用在网络环境下不同计算机上运行的进程之间的通信（当然也可以用在同一台机的不同进程中）它可以是单向或双向的；而匿名管道只能用在同一台计算机中，它只能是单向的。匿名管道其实是通过用给了一个指定名字的有名管道来实现的。<br>使用管道的好处在于：读写它使用的是对文件操作的 api，结果操作管道就和操作文件一样。即使你在不同的计算机之间用命名管道来通信，你也不必了解和自己去实现网络间通信的具体细节。</li>\n<li>信号量<br>信号量(Semaphore)，有时被称为信号灯，是在多线程环境下使用的一种设施，是可以用来保证两个或多个关键代码段不被并发调用。在进入一个关键代码段之前，线程必须获取一个信号量；一旦该关键代码段完成了，那么该线程必须释放信号量。其它想进入该关键代码段的线程必须等待直到第一个线程释放信号量。为了完成这个过程，需要创建一个信号量VI，然后将Acquire Semaphore VI以及Release Semaphore VI分别放置在每个关键代码段的首末端。确认这些信号量VI引用的是初始创建的信号量。</li>\n<li>共享内存<br>共享内存是进程间通信中最简单的方式之一。共享内存允许两个或更多进程访问同一块内存，就如同 malloc() 函数向不同进程返回了指向同一个物理内存区域的指针。当一个进程改变了这块地址中的内容的时候，其它进程都会察觉到这个更改。因为所有进程共享同一块内存，共享内存在各种进程间通信方式中具有最高的效率。</li>\n</ul>\n<p>使用场景:<br>可能有些模块因为特殊原因需要运行在单独的进程中; 或者为了加大一个应用可使用的内存; 又或者我们需要去另外一个进程去获取数据,必然需要跨进程.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/android_ipc_01.jpg\" alt=\"\"> </p>\n<h4 id=\"IPC是什么\"><a href=\"#IPC是什么\" class=\"headerlink\" title=\"IPC是什么\"></a>IPC是什么</h4><p>IPC是Inter-Process Communication缩写,含义为进程间通信. 按照操作系统中的描述,线程是cpu调度的最小单元,而进程一般指一个执行单元. 进程中可以有一个或者多个线程.</p>\n<p>不同的操作系统有着不同的IPC机制:</p>\n<ul>\n<li>Windows: 通过剪切板, 管道, 信号量来进行进程间通信</li>\n<li>Linux: 通过命名管道, 共享内存, 信号量等来进行进行进程间通信</li>\n<li>android: 虽然基于Linux内核,但是使用了独有的Binder机制, 也可以Socket进行通信</li>\n</ul>\n<h4 id=\"这里解释一下定义（来自百度百科）\"><a href=\"#这里解释一下定义（来自百度百科）\" class=\"headerlink\" title=\"这里解释一下定义（来自百度百科）\"></a>这里解释一下定义（来自百度百科）</h4><ul>\n<li>剪切板：<br>剪切板是指windows 操作系统提供的一个暂存数据，并且提供共享的一个模块。也称为数据中转站，剪切板在后台起作用，在内存里.，是操作系统设置的一段存储区域，你是在硬盘里找不到的.你只要有文本输入的地方按CTRL+V或右键粘贴就出现了，.新的内容送到剪切板后，将覆盖旧内容。</li>\n<li>管道：<br>管道是两个头的东西，每个头各连接一个进程或者同一个进程的不同代码，按照管道的类别分有两种管道，匿名的和命名的；按照管道的传输方向分也可以分成两种，单向的双向的。根据管道的特点，命名管道通常用在网络环境下不同计算机上运行的进程之间的通信（当然也可以用在同一台机的不同进程中）它可以是单向或双向的；而匿名管道只能用在同一台计算机中，它只能是单向的。匿名管道其实是通过用给了一个指定名字的有名管道来实现的。<br>使用管道的好处在于：读写它使用的是对文件操作的 api，结果操作管道就和操作文件一样。即使你在不同的计算机之间用命名管道来通信，你也不必了解和自己去实现网络间通信的具体细节。</li>\n<li>信号量<br>信号量(Semaphore)，有时被称为信号灯，是在多线程环境下使用的一种设施，是可以用来保证两个或多个关键代码段不被并发调用。在进入一个关键代码段之前，线程必须获取一个信号量；一旦该关键代码段完成了，那么该线程必须释放信号量。其它想进入该关键代码段的线程必须等待直到第一个线程释放信号量。为了完成这个过程，需要创建一个信号量VI，然后将Acquire Semaphore VI以及Release Semaphore VI分别放置在每个关键代码段的首末端。确认这些信号量VI引用的是初始创建的信号量。</li>\n<li>共享内存<br>共享内存是进程间通信中最简单的方式之一。共享内存允许两个或更多进程访问同一块内存，就如同 malloc() 函数向不同进程返回了指向同一个物理内存区域的指针。当一个进程改变了这块地址中的内容的时候，其它进程都会察觉到这个更改。因为所有进程共享同一块内存，共享内存在各种进程间通信方式中具有最高的效率。</li>\n</ul>\n<p>使用场景:<br>可能有些模块因为特殊原因需要运行在单独的进程中; 或者为了加大一个应用可使用的内存; 又或者我们需要去另外一个进程去获取数据,必然需要跨进程.</p>\n"},{"title":"Android IPC基础概念","date":"2017-07-26T06:47:01.000Z","_content":"\n![](http://ot0nm27pk.bkt.clouddn.com/android_ipc_01.jpg) \n\n>关于IPC主要包含三方面的内容: Serializable接口, Parcelable接口, 以及Binder\n\n#### Serializable接口\n","source":"_posts/Android IPC基础概念.md","raw":"---\ntitle:  \"Android IPC基础概念\"\ndate: 2017-07-26 14:47:01\ncategories: [Android,IPC]\ntags: [Android]\n---\n\n![](http://ot0nm27pk.bkt.clouddn.com/android_ipc_01.jpg) \n\n>关于IPC主要包含三方面的内容: Serializable接口, Parcelable接口, 以及Binder\n\n#### Serializable接口\n","slug":"Android IPC基础概念","published":1,"updated":"2017-12-26T05:14:25.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjboyl4wn00011ctm02is2f4g","content":"<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/android_ipc_01.jpg\" alt=\"\"> </p>\n<blockquote>\n<p>关于IPC主要包含三方面的内容: Serializable接口, Parcelable接口, 以及Binder</p>\n</blockquote>\n<h4 id=\"Serializable接口\"><a href=\"#Serializable接口\" class=\"headerlink\" title=\"Serializable接口\"></a>Serializable接口</h4>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/android_ipc_01.jpg\" alt=\"\"> </p>\n<blockquote>\n<p>关于IPC主要包含三方面的内容: Serializable接口, Parcelable接口, 以及Binder</p>\n</blockquote>\n<h4 id=\"Serializable接口\"><a href=\"#Serializable接口\" class=\"headerlink\" title=\"Serializable接口\"></a>Serializable接口</h4>"},{"layout":"post","title":"Android中屏幕适配的方式","date":"2016-05-26T16:00:00.000Z","_content":"android中屏幕适配的方式：\n\n1. 图片适配 \n\n\t根据不同手机屏幕的分辨率，加载不同文件夹下的图片\n\t跟手机屏幕的像素密度有关系\n\t像素密度又是什么呢？就是假如说，手机的屏幕是5英寸的，那么分辨率就是1280*720- 的，利用勾股定理，计算出斜边的值，再除以5，\n\t计算出来的就是像素密度。根据这个像素密度，再确定加载哪个文件夹下的图片。\t\n\n2. dimens.xml适配\n\n\t这个主要是适配控件的宽高，就是在dimens.xml文件中设定空间的宽高，再在xml布局中引用dimens.xml问价中的值，假如想想要对固定手机屏幕分辨率进行设定，可以在res目录下，创建 values-1280 * 720 的目录，把dimens.xml文件复制过来更改里面的属性值，就可以了，这样的话，其他手机引用的就是普通的值，假如是 1280 * 720 的手机，就直接引用values-1280 * 720问价中的属性值了，但是要注意，1280 * 720的顺序不能写反了，大数一定写在前边\n3. layout布局适配\n\n\t就是在res下创建layout-1280*720的目录，再这里写布局文件，这样就大大增加了应用的体积，给用户的体验不好，不到万不得已的时候不用。\n4. java代码适配，这个用的比较多，他可以设定空间的控件的宽高，也可以设定之间的距离 \n\n\t怎么样做到适配呢？首先要获取手机屏幕的宽高，再通过设定比例值，选择一个适配的手机，计算出宽高的比例值，（控件的宽/手机屏幕的宽），然后再在下需要设定值的地方，拿着求出来的手机的宽*这个我们算出来的比例值，就是适配的值了。再有就是pd–>px px–>pd就是在需要适配的地方，用dp–>px的方式去设定值，因为在手机上展示都是px单位，\n5. 权重适配 \n\t\n\t权重适配就是用到了weight这个属性，他是设定显示比例的，一般不能达到我们的需求，所以在使用权重适配的时候，一般会结合其他的\n\n适配方法一起使用\n","source":"_posts/Android中屏幕适配的方式.md","raw":"---\nlayout: post\ntitle:  \"Android中屏幕适配的方式\"\ndate:   2016-05-27 \ncategories: [Android,适配]\ntags: [Android]\n---\nandroid中屏幕适配的方式：\n\n1. 图片适配 \n\n\t根据不同手机屏幕的分辨率，加载不同文件夹下的图片\n\t跟手机屏幕的像素密度有关系\n\t像素密度又是什么呢？就是假如说，手机的屏幕是5英寸的，那么分辨率就是1280*720- 的，利用勾股定理，计算出斜边的值，再除以5，\n\t计算出来的就是像素密度。根据这个像素密度，再确定加载哪个文件夹下的图片。\t\n\n2. dimens.xml适配\n\n\t这个主要是适配控件的宽高，就是在dimens.xml文件中设定空间的宽高，再在xml布局中引用dimens.xml问价中的值，假如想想要对固定手机屏幕分辨率进行设定，可以在res目录下，创建 values-1280 * 720 的目录，把dimens.xml文件复制过来更改里面的属性值，就可以了，这样的话，其他手机引用的就是普通的值，假如是 1280 * 720 的手机，就直接引用values-1280 * 720问价中的属性值了，但是要注意，1280 * 720的顺序不能写反了，大数一定写在前边\n3. layout布局适配\n\n\t就是在res下创建layout-1280*720的目录，再这里写布局文件，这样就大大增加了应用的体积，给用户的体验不好，不到万不得已的时候不用。\n4. java代码适配，这个用的比较多，他可以设定空间的控件的宽高，也可以设定之间的距离 \n\n\t怎么样做到适配呢？首先要获取手机屏幕的宽高，再通过设定比例值，选择一个适配的手机，计算出宽高的比例值，（控件的宽/手机屏幕的宽），然后再在下需要设定值的地方，拿着求出来的手机的宽*这个我们算出来的比例值，就是适配的值了。再有就是pd–>px px–>pd就是在需要适配的地方，用dp–>px的方式去设定值，因为在手机上展示都是px单位，\n5. 权重适配 \n\t\n\t权重适配就是用到了weight这个属性，他是设定显示比例的，一般不能达到我们的需求，所以在使用权重适配的时候，一般会结合其他的\n\n适配方法一起使用\n","slug":"Android中屏幕适配的方式","published":1,"updated":"2017-12-26T05:14:25.484Z","comments":1,"photos":[],"link":"","_id":"cjboyl4wr00041ctm6uptc3al","content":"<p>android中屏幕适配的方式：</p>\n<ol>\n<li><p>图片适配 </p>\n<p> 根据不同手机屏幕的分辨率，加载不同文件夹下的图片<br> 跟手机屏幕的像素密度有关系<br> 像素密度又是什么呢？就是假如说，手机的屏幕是5英寸的，那么分辨率就是1280*720- 的，利用勾股定理，计算出斜边的值，再除以5，<br> 计算出来的就是像素密度。根据这个像素密度，再确定加载哪个文件夹下的图片。    </p>\n</li>\n<li><p>dimens.xml适配</p>\n<p> 这个主要是适配控件的宽高，就是在dimens.xml文件中设定空间的宽高，再在xml布局中引用dimens.xml问价中的值，假如想想要对固定手机屏幕分辨率进行设定，可以在res目录下，创建 values-1280 <em> 720 的目录，把dimens.xml文件复制过来更改里面的属性值，就可以了，这样的话，其他手机引用的就是普通的值，假如是 1280 </em> 720 的手机，就直接引用values-1280 <em> 720问价中的属性值了，但是要注意，1280 </em> 720的顺序不能写反了，大数一定写在前边</p>\n</li>\n<li><p>layout布局适配</p>\n<p> 就是在res下创建layout-1280*720的目录，再这里写布局文件，这样就大大增加了应用的体积，给用户的体验不好，不到万不得已的时候不用。</p>\n</li>\n<li><p>java代码适配，这个用的比较多，他可以设定空间的控件的宽高，也可以设定之间的距离 </p>\n<p> 怎么样做到适配呢？首先要获取手机屏幕的宽高，再通过设定比例值，选择一个适配的手机，计算出宽高的比例值，（控件的宽/手机屏幕的宽），然后再在下需要设定值的地方，拿着求出来的手机的宽*这个我们算出来的比例值，就是适配的值了。再有就是pd–&gt;px px–&gt;pd就是在需要适配的地方，用dp–&gt;px的方式去设定值，因为在手机上展示都是px单位，</p>\n</li>\n<li><p>权重适配 </p>\n<p> 权重适配就是用到了weight这个属性，他是设定显示比例的，一般不能达到我们的需求，所以在使用权重适配的时候，一般会结合其他的</p>\n</li>\n</ol>\n<p>适配方法一起使用</p>\n","site":{"data":{}},"excerpt":"","more":"<p>android中屏幕适配的方式：</p>\n<ol>\n<li><p>图片适配 </p>\n<p> 根据不同手机屏幕的分辨率，加载不同文件夹下的图片<br> 跟手机屏幕的像素密度有关系<br> 像素密度又是什么呢？就是假如说，手机的屏幕是5英寸的，那么分辨率就是1280*720- 的，利用勾股定理，计算出斜边的值，再除以5，<br> 计算出来的就是像素密度。根据这个像素密度，再确定加载哪个文件夹下的图片。    </p>\n</li>\n<li><p>dimens.xml适配</p>\n<p> 这个主要是适配控件的宽高，就是在dimens.xml文件中设定空间的宽高，再在xml布局中引用dimens.xml问价中的值，假如想想要对固定手机屏幕分辨率进行设定，可以在res目录下，创建 values-1280 <em> 720 的目录，把dimens.xml文件复制过来更改里面的属性值，就可以了，这样的话，其他手机引用的就是普通的值，假如是 1280 </em> 720 的手机，就直接引用values-1280 <em> 720问价中的属性值了，但是要注意，1280 </em> 720的顺序不能写反了，大数一定写在前边</p>\n</li>\n<li><p>layout布局适配</p>\n<p> 就是在res下创建layout-1280*720的目录，再这里写布局文件，这样就大大增加了应用的体积，给用户的体验不好，不到万不得已的时候不用。</p>\n</li>\n<li><p>java代码适配，这个用的比较多，他可以设定空间的控件的宽高，也可以设定之间的距离 </p>\n<p> 怎么样做到适配呢？首先要获取手机屏幕的宽高，再通过设定比例值，选择一个适配的手机，计算出宽高的比例值，（控件的宽/手机屏幕的宽），然后再在下需要设定值的地方，拿着求出来的手机的宽*这个我们算出来的比例值，就是适配的值了。再有就是pd–&gt;px px–&gt;pd就是在需要适配的地方，用dp–&gt;px的方式去设定值，因为在手机上展示都是px单位，</p>\n</li>\n<li><p>权重适配 </p>\n<p> 权重适配就是用到了weight这个属性，他是设定显示比例的，一般不能达到我们的需求，所以在使用权重适配的时候，一般会结合其他的</p>\n</li>\n</ol>\n<p>适配方法一起使用</p>\n"},{"layout":"post","title":"Android 关于 so 所需要了解的","date":"2017-04-13T16:00:00.000Z","_content":"- 什么是so文件：\n           \n        so是Shared Object的缩写，即共享的对象，机器可以直接运行的二进制码，\n        从操作系统到专用软件，都离不开so。\n        so文件主要用于Unix和Linux系统中。\n        \n\n- .a和.so对比\n\t- .a:archive\n\n\t\t\t存档的含义，是unix系统中对于静态库的文件后缀，在软件打包时和主程序表态链接在一起，表现形式是在链接成同一个文件。\n\t\t\tgo lang即广泛采用这一形式，对于软件分发只有一个文件。对于打包好的软件来讲，这是专属库，所有都在出厂前打包在一起了，好处是不受外界影响，坏处是任何改动要全部分发。\n\t\t\t对于安装应用的系统来讲，当然是共享的越多越好，既省内存又省硬盘。\n\n\t- .so:shared object\n\n\t\t\t共享库，用过Windows的同学应该都或多或少碰到过找不到DLL或DLL错误之类的问题，其中最为著名的问题就是DLL Hell（某个著名的库，软件a使用1.0，新装的软件b使用1.0.1，导致软件a运行异常），DLL即Dynamic Link Library的缩写，和shared object表示同样的事物，只是名字不同而已。\n\t\t\t运行时按需加载，不论是系统提供的共享库还是自带的共享库，最大化利用软件分治的原理，修Bug也是更新所在so文件，不需全部更新。\n\n\n- Android中的so\n\n\t\tso是与平台相关的二进制机器码，与ABI（Application Binary Interface）相对应，\n\t\t一个ABI表示相应的CPU的指令集与内存页管理，也对应于不同的C运行环境，所以so是有不同的系统版本的。\n\t\t\n\t\t随着Android系统的快速发展，搭载Android的硬件平台也早已多样化了（对比WinTel联盟，直到2012年才新发展了Windows RT来适配ARM平台，2015年的Win10才进入 Raspberry Pi 2这类基于ARM的新型设备中），\n\t\t现在已经运行在7个ABI：armeabi，armeabi-v7a (armeabi-v7a-hard)，arm64-v8a，x86，x86_64，mips 和 mips64。\n\t\t\n- Android为什么选择使用so\n\n\t\tAndroid 是基于 Linux Kernl，同样也继承了所有so的相关设计。\n\t\t除了系统原因，还有一下几点：\n\t\t\t1. so机制能够让开发者最大化利用己有的C 和 C++代码\n\t\t\t2.so比java执行速度快\n\t\t\t3.内存分配不受Dalivik/ART的单个应用限制，减少OOM\n\t\t\t\n- 如何使用\n\t- Android Studio中。将得到的ABI放到jniLibs/API\n\t\n\t\t\t├── AndroidManifest.xml\n\t\t\t└── jniLibs\n\t\t\t    ├── armeabi\n\t\t\t    │   └── libsnappydb-native.so\n\t\t\t    ├── armeabi-v7a\n\t\t\t    │   └── libsnappydb-native.so\n\t\t\t    ├── mips\n\t\t\t    │   └── libsnappydb-native.so\n\t\t\t    └── x86\n\t\t\t\t└── libsnappydb-native.so\n\n\n\t- 或者使用jniLibs.srcDir属性指定：\n\t\t\t\n\t\t\tandroid {\n\t\t\t    sourceSets {\n\t\t\t\tmain {\n\t\t\t\t    jni.srcDirs = [] //disable automatic ndk-build call\n\t\t\t\t    jniLibs.srcDir 'main/libs'\n\t\t\t\t}\n\t\t\t    }\n\t\t\t}\n\n\t- eclipse中直接放到libs/ABI目录。\n\t\n\t- 在aar文件中，so处于jni/ABI目录中，对于库开发者和应用开发者都不必关注，全部自动处理。\n\t\n\t- 在生成的APK中，所有so文件对应于lib/ABI中。\n\t\n\t- 当APK安装到Android系统中时，so文件位置:\n\t\n\t\t\tAndroid<5.0，/data/data/PACKAGE_NAME/lib\n\t\t\tAndroid>=5.0，/data/app/PACKAGE_NAME/lib/CPU_ARCH/和/data/data/PACKAGE_NAME/lib\n\n- 可能出现的问题\n\n    UnsatisfiedLinkError\n\n    dlopen：falied\n","source":"_posts/Android 关于 so 所需要了解的.md","raw":"---\nlayout: post\ntitle:  \"Android 关于 so 所需要了解的\"\ndate:   2017-04-14\ncategories: [Android,NDK开发]\ntag: [Android]\n---\n- 什么是so文件：\n           \n        so是Shared Object的缩写，即共享的对象，机器可以直接运行的二进制码，\n        从操作系统到专用软件，都离不开so。\n        so文件主要用于Unix和Linux系统中。\n        \n\n- .a和.so对比\n\t- .a:archive\n\n\t\t\t存档的含义，是unix系统中对于静态库的文件后缀，在软件打包时和主程序表态链接在一起，表现形式是在链接成同一个文件。\n\t\t\tgo lang即广泛采用这一形式，对于软件分发只有一个文件。对于打包好的软件来讲，这是专属库，所有都在出厂前打包在一起了，好处是不受外界影响，坏处是任何改动要全部分发。\n\t\t\t对于安装应用的系统来讲，当然是共享的越多越好，既省内存又省硬盘。\n\n\t- .so:shared object\n\n\t\t\t共享库，用过Windows的同学应该都或多或少碰到过找不到DLL或DLL错误之类的问题，其中最为著名的问题就是DLL Hell（某个著名的库，软件a使用1.0，新装的软件b使用1.0.1，导致软件a运行异常），DLL即Dynamic Link Library的缩写，和shared object表示同样的事物，只是名字不同而已。\n\t\t\t运行时按需加载，不论是系统提供的共享库还是自带的共享库，最大化利用软件分治的原理，修Bug也是更新所在so文件，不需全部更新。\n\n\n- Android中的so\n\n\t\tso是与平台相关的二进制机器码，与ABI（Application Binary Interface）相对应，\n\t\t一个ABI表示相应的CPU的指令集与内存页管理，也对应于不同的C运行环境，所以so是有不同的系统版本的。\n\t\t\n\t\t随着Android系统的快速发展，搭载Android的硬件平台也早已多样化了（对比WinTel联盟，直到2012年才新发展了Windows RT来适配ARM平台，2015年的Win10才进入 Raspberry Pi 2这类基于ARM的新型设备中），\n\t\t现在已经运行在7个ABI：armeabi，armeabi-v7a (armeabi-v7a-hard)，arm64-v8a，x86，x86_64，mips 和 mips64。\n\t\t\n- Android为什么选择使用so\n\n\t\tAndroid 是基于 Linux Kernl，同样也继承了所有so的相关设计。\n\t\t除了系统原因，还有一下几点：\n\t\t\t1. so机制能够让开发者最大化利用己有的C 和 C++代码\n\t\t\t2.so比java执行速度快\n\t\t\t3.内存分配不受Dalivik/ART的单个应用限制，减少OOM\n\t\t\t\n- 如何使用\n\t- Android Studio中。将得到的ABI放到jniLibs/API\n\t\n\t\t\t├── AndroidManifest.xml\n\t\t\t└── jniLibs\n\t\t\t    ├── armeabi\n\t\t\t    │   └── libsnappydb-native.so\n\t\t\t    ├── armeabi-v7a\n\t\t\t    │   └── libsnappydb-native.so\n\t\t\t    ├── mips\n\t\t\t    │   └── libsnappydb-native.so\n\t\t\t    └── x86\n\t\t\t\t└── libsnappydb-native.so\n\n\n\t- 或者使用jniLibs.srcDir属性指定：\n\t\t\t\n\t\t\tandroid {\n\t\t\t    sourceSets {\n\t\t\t\tmain {\n\t\t\t\t    jni.srcDirs = [] //disable automatic ndk-build call\n\t\t\t\t    jniLibs.srcDir 'main/libs'\n\t\t\t\t}\n\t\t\t    }\n\t\t\t}\n\n\t- eclipse中直接放到libs/ABI目录。\n\t\n\t- 在aar文件中，so处于jni/ABI目录中，对于库开发者和应用开发者都不必关注，全部自动处理。\n\t\n\t- 在生成的APK中，所有so文件对应于lib/ABI中。\n\t\n\t- 当APK安装到Android系统中时，so文件位置:\n\t\n\t\t\tAndroid<5.0，/data/data/PACKAGE_NAME/lib\n\t\t\tAndroid>=5.0，/data/app/PACKAGE_NAME/lib/CPU_ARCH/和/data/data/PACKAGE_NAME/lib\n\n- 可能出现的问题\n\n    UnsatisfiedLinkError\n\n    dlopen：falied\n","slug":"Android 关于 so 所需要了解的","published":1,"updated":"2017-12-26T05:14:25.482Z","comments":1,"photos":[],"link":"","_id":"cjboyl4ws00051ctm5rg4klbs","content":"<ul>\n<li><p>什么是so文件：</p>\n<pre><code>so是Shared Object的缩写，即共享的对象，机器可以直接运行的二进制码，\n从操作系统到专用软件，都离不开so。\nso文件主要用于Unix和Linux系统中。\n</code></pre></li>\n</ul>\n<ul>\n<li><p>.a和.so对比</p>\n<ul>\n<li><p>.a:archive</p>\n<pre><code>存档的含义，是unix系统中对于静态库的文件后缀，在软件打包时和主程序表态链接在一起，表现形式是在链接成同一个文件。\ngo lang即广泛采用这一形式，对于软件分发只有一个文件。对于打包好的软件来讲，这是专属库，所有都在出厂前打包在一起了，好处是不受外界影响，坏处是任何改动要全部分发。\n对于安装应用的系统来讲，当然是共享的越多越好，既省内存又省硬盘。\n</code></pre></li>\n<li><p>.so:shared object</p>\n<pre><code>共享库，用过Windows的同学应该都或多或少碰到过找不到DLL或DLL错误之类的问题，其中最为著名的问题就是DLL Hell（某个著名的库，软件a使用1.0，新装的软件b使用1.0.1，导致软件a运行异常），DLL即Dynamic Link Library的缩写，和shared object表示同样的事物，只是名字不同而已。\n运行时按需加载，不论是系统提供的共享库还是自带的共享库，最大化利用软件分治的原理，修Bug也是更新所在so文件，不需全部更新。\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Android中的so</p>\n<pre><code>so是与平台相关的二进制机器码，与ABI（Application Binary Interface）相对应，\n一个ABI表示相应的CPU的指令集与内存页管理，也对应于不同的C运行环境，所以so是有不同的系统版本的。\n\n随着Android系统的快速发展，搭载Android的硬件平台也早已多样化了（对比WinTel联盟，直到2012年才新发展了Windows RT来适配ARM平台，2015年的Win10才进入 Raspberry Pi 2这类基于ARM的新型设备中），\n现在已经运行在7个ABI：armeabi，armeabi-v7a (armeabi-v7a-hard)，arm64-v8a，x86，x86_64，mips 和 mips64。\n</code></pre></li>\n<li><p>Android为什么选择使用so</p>\n<pre><code>Android 是基于 Linux Kernl，同样也继承了所有so的相关设计。\n除了系统原因，还有一下几点：\n    1. so机制能够让开发者最大化利用己有的C 和 C++代码\n    2.so比java执行速度快\n    3.内存分配不受Dalivik/ART的单个应用限制，减少OOM\n</code></pre></li>\n<li><p>如何使用</p>\n<ul>\n<li><p>Android Studio中。将得到的ABI放到jniLibs/API</p>\n<pre><code>├── AndroidManifest.xml\n└── jniLibs\n    ├── armeabi\n    │   └── libsnappydb-native.so\n    ├── armeabi-v7a\n    │   └── libsnappydb-native.so\n    ├── mips\n    │   └── libsnappydb-native.so\n    └── x86\n    └── libsnappydb-native.so\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<pre><code>- 或者使用jniLibs.srcDir属性指定：\n\n        android {\n            sourceSets {\n            main {\n                jni.srcDirs = [] //disable automatic ndk-build call\n                jniLibs.srcDir &apos;main/libs&apos;\n            }\n            }\n        }\n\n- eclipse中直接放到libs/ABI目录。\n\n- 在aar文件中，so处于jni/ABI目录中，对于库开发者和应用开发者都不必关注，全部自动处理。\n\n- 在生成的APK中，所有so文件对应于lib/ABI中。\n\n- 当APK安装到Android系统中时，so文件位置:\n\n        Android&lt;5.0，/data/data/PACKAGE_NAME/lib\n        Android&gt;=5.0，/data/app/PACKAGE_NAME/lib/CPU_ARCH/和/data/data/PACKAGE_NAME/lib\n</code></pre><ul>\n<li><p>可能出现的问题</p>\n<p>  UnsatisfiedLinkError</p>\n<p>  dlopen：falied</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>什么是so文件：</p>\n<pre><code>so是Shared Object的缩写，即共享的对象，机器可以直接运行的二进制码，\n从操作系统到专用软件，都离不开so。\nso文件主要用于Unix和Linux系统中。\n</code></pre></li>\n</ul>\n<ul>\n<li><p>.a和.so对比</p>\n<ul>\n<li><p>.a:archive</p>\n<pre><code>存档的含义，是unix系统中对于静态库的文件后缀，在软件打包时和主程序表态链接在一起，表现形式是在链接成同一个文件。\ngo lang即广泛采用这一形式，对于软件分发只有一个文件。对于打包好的软件来讲，这是专属库，所有都在出厂前打包在一起了，好处是不受外界影响，坏处是任何改动要全部分发。\n对于安装应用的系统来讲，当然是共享的越多越好，既省内存又省硬盘。\n</code></pre></li>\n<li><p>.so:shared object</p>\n<pre><code>共享库，用过Windows的同学应该都或多或少碰到过找不到DLL或DLL错误之类的问题，其中最为著名的问题就是DLL Hell（某个著名的库，软件a使用1.0，新装的软件b使用1.0.1，导致软件a运行异常），DLL即Dynamic Link Library的缩写，和shared object表示同样的事物，只是名字不同而已。\n运行时按需加载，不论是系统提供的共享库还是自带的共享库，最大化利用软件分治的原理，修Bug也是更新所在so文件，不需全部更新。\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Android中的so</p>\n<pre><code>so是与平台相关的二进制机器码，与ABI（Application Binary Interface）相对应，\n一个ABI表示相应的CPU的指令集与内存页管理，也对应于不同的C运行环境，所以so是有不同的系统版本的。\n\n随着Android系统的快速发展，搭载Android的硬件平台也早已多样化了（对比WinTel联盟，直到2012年才新发展了Windows RT来适配ARM平台，2015年的Win10才进入 Raspberry Pi 2这类基于ARM的新型设备中），\n现在已经运行在7个ABI：armeabi，armeabi-v7a (armeabi-v7a-hard)，arm64-v8a，x86，x86_64，mips 和 mips64。\n</code></pre></li>\n<li><p>Android为什么选择使用so</p>\n<pre><code>Android 是基于 Linux Kernl，同样也继承了所有so的相关设计。\n除了系统原因，还有一下几点：\n    1. so机制能够让开发者最大化利用己有的C 和 C++代码\n    2.so比java执行速度快\n    3.内存分配不受Dalivik/ART的单个应用限制，减少OOM\n</code></pre></li>\n<li><p>如何使用</p>\n<ul>\n<li><p>Android Studio中。将得到的ABI放到jniLibs/API</p>\n<pre><code>├── AndroidManifest.xml\n└── jniLibs\n    ├── armeabi\n    │   └── libsnappydb-native.so\n    ├── armeabi-v7a\n    │   └── libsnappydb-native.so\n    ├── mips\n    │   └── libsnappydb-native.so\n    └── x86\n    └── libsnappydb-native.so\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<pre><code>- 或者使用jniLibs.srcDir属性指定：\n\n        android {\n            sourceSets {\n            main {\n                jni.srcDirs = [] //disable automatic ndk-build call\n                jniLibs.srcDir &apos;main/libs&apos;\n            }\n            }\n        }\n\n- eclipse中直接放到libs/ABI目录。\n\n- 在aar文件中，so处于jni/ABI目录中，对于库开发者和应用开发者都不必关注，全部自动处理。\n\n- 在生成的APK中，所有so文件对应于lib/ABI中。\n\n- 当APK安装到Android系统中时，so文件位置:\n\n        Android&lt;5.0，/data/data/PACKAGE_NAME/lib\n        Android&gt;=5.0，/data/app/PACKAGE_NAME/lib/CPU_ARCH/和/data/data/PACKAGE_NAME/lib\n</code></pre><ul>\n<li><p>可能出现的问题</p>\n<p>  UnsatisfiedLinkError</p>\n<p>  dlopen：falied</p>\n</li>\n</ul>\n"},{"title":"Android6.0新的权限机制","date":"2016-05-02T06:47:01.000Z","_content":"接触到了android6.0权限的几个坑，这里记录一下\n参考自：[http://blog.csdn.net/lmj623565791/article/details/50709663](http://blog.csdn.net/lmj623565791/article/details/50709663) \n\n对于6.0以下的权限及在安装的时候，根据权限声明产生一个权限列表，用户只有在同意之后才能完成app的安装，造成了我们想要使用某个app，就要默默忍受其一些不必要的权限（比如是个app都要访问通讯录、短信等）。\n\n而在6.0以后，我们可以直接安装，当app需要我们授予不恰当的权限的时候，我们可以予以拒绝。当然你也可以在设置界面对每个app的权限进行查看，以及对单个权限进行授权或者解除授权。\n\n\n\n新的权限机制更好的保护了用户的隐私，Google将权限分为两类：\n\n- 一类是Normal Permissions，这类权限一般不涉及用户隐私，是不需要用户进行授权的，比如手机震动、访问网络等；\n- 另一类是Dangerous Permission，一般是涉及到用户隐私的，需要用户进行授权，比如读取sdcard、访问通讯录等。\n\n\nNormal Permissions如下：\n\n\tACCESS_LOCATION_EXTRA_COMMANDS\n\tACCESS_NETWORK_STATE\n\tACCESS_NOTIFICATION_POLICY\n\tACCESS_WIFI_STATE\n\tBLUETOOTH\n\tBLUETOOTH_ADMIN\n\tBROADCAST_STICKY\n\tCHANGE_NETWORK_STATE\n\tCHANGE_WIFI_MULTICAST_STATE\n\tCHANGE_WIFI_STATE\n\tDISABLE_KEYGUARD\n\tEXPAND_STATUS_BAR\n\tGET_PACKAGE_SIZE\n\tINSTALL_SHORTCUT\n\tINTERNET\n\tKILL_BACKGROUND_PROCESSES\n\tMODIFY_AUDIO_SETTINGS\n\tNFC\n\tREAD_SYNC_SETTINGS\n\tREAD_SYNC_STATS\n\tRECEIVE_BOOT_COMPLETED\n\tREORDER_TASKS\n\tREQUEST_INSTALL_PACKAGES\n\tSET_ALARM\n\tSET_TIME_ZONE\n\tSET_WALLPAPER\n\tSET_WALLPAPER_HINTS\n\tTRANSMIT_IR\n\tUNINSTALL_SHORTCUT\n\tUSE_FINGERPRINT\n\tVIBRATE\n\tWAKE_LOCK\n\tWRITE_SYNC_SETTINGS\n\t\nDangerous Permissions:\n\n\tgroup:android.permission-group.CONTACTS\n\tpermission:android.permission.WRITE_CONTACTS\n\tpermission:android.permission.GET_ACCOUNTS\n\tpermission:android.permission.READ_CONTACTS\n\n\tgroup:android.permission-group.PHONE\n\tpermission:android.permission.READ_CALL_LOG\n\tpermission:android.permission.READ_PHONE_STATE\n\tpermission:android.permission.CALL_PHONE\n\tpermission:android.permission.WRITE_CALL_LOG\n\tpermission:android.permission.USE_SIP\n\tpermission:android.permission.PROCESS_OUTGOING_CALLS\n\tpermission:com.android.voicemail.permission.ADD_VOICEMAIL\n\n\tgroup:android.permission-group.CALENDAR\n\tpermission:android.permission.READ_CALENDAR\n\tpermission:android.permission.WRITE_CALENDAR\n\n\tgroup:android.permission-group.CAMERA\n\tpermission:android.permission.CAMERA\n\n\tgroup:android.permission-group.SENSORS\n\tpermission:android.permission.BODY_SENSORS\n\n\tgroup:android.permission-group.LOCATION\n\tpermission:android.permission.ACCESS_FINE_LOCATION\n\tpermission:android.permission.ACCESS_COARSE_LOCATION\n\n\tgroup:android.permission-group.STORAGE\n\tpermission:android.permission.READ_EXTERNAL_STORAGE\n\tpermission:android.permission.WRITE_EXTERNAL_STORAGE\n\n\tgroup:android.permission-group.MICROPHONE\n\tpermission:android.permission.RECORD_AUDIO\n\n\tgroup:android.permission-group.SMS\n\tpermission:android.permission.READ_SMS\n\tpermission:android.permission.RECEIVE_WAP_PUSH\n\tpermission:android.permission.RECEIVE_MMS\n\tpermission:android.permission.RECEIVE_SMS\n\tpermission:android.permission.SEND_SMS\n\tpermission:android.permission.READ_CELL_BROADCASTS\n\t\n可以通过adb shell pm list permissions -d -g进行查看。\n\n其中上面的dangerous permissions，危险权限都是一组一组的。如果app运行在android 6.x的机器上，对于授权机制是这样的。如果你申请某个危险的权限，假设你的app早已被用户授权了同一组的某个危险权限，那么系统会立即授权，而不需要用户去点击授权。比如你的app对READ_CONTACTS已经授权了，当你的app申请WRITE_CONTACTS时，系统会直接授权通过。此外，对于申请时弹出的dialog上面的文本说明也是对整个权限组的说明，而不是单个权限（注意这个dialog是不能进行定制的）。\n\n当然也不要对权限组过多的依赖，对每个危险权限都要进行正常流程的申请，因为在后期的版本中这个权限组可能会产生变化。","source":"_posts/Android6.0新的权限机制.md","raw":"---\ntitle:  \"Android6.0新的权限机制\"\ndate: 2016-05-02 14:47:01\ncategories: [Android,适配]\ntags: [Android]\n---\n接触到了android6.0权限的几个坑，这里记录一下\n参考自：[http://blog.csdn.net/lmj623565791/article/details/50709663](http://blog.csdn.net/lmj623565791/article/details/50709663) \n\n对于6.0以下的权限及在安装的时候，根据权限声明产生一个权限列表，用户只有在同意之后才能完成app的安装，造成了我们想要使用某个app，就要默默忍受其一些不必要的权限（比如是个app都要访问通讯录、短信等）。\n\n而在6.0以后，我们可以直接安装，当app需要我们授予不恰当的权限的时候，我们可以予以拒绝。当然你也可以在设置界面对每个app的权限进行查看，以及对单个权限进行授权或者解除授权。\n\n\n\n新的权限机制更好的保护了用户的隐私，Google将权限分为两类：\n\n- 一类是Normal Permissions，这类权限一般不涉及用户隐私，是不需要用户进行授权的，比如手机震动、访问网络等；\n- 另一类是Dangerous Permission，一般是涉及到用户隐私的，需要用户进行授权，比如读取sdcard、访问通讯录等。\n\n\nNormal Permissions如下：\n\n\tACCESS_LOCATION_EXTRA_COMMANDS\n\tACCESS_NETWORK_STATE\n\tACCESS_NOTIFICATION_POLICY\n\tACCESS_WIFI_STATE\n\tBLUETOOTH\n\tBLUETOOTH_ADMIN\n\tBROADCAST_STICKY\n\tCHANGE_NETWORK_STATE\n\tCHANGE_WIFI_MULTICAST_STATE\n\tCHANGE_WIFI_STATE\n\tDISABLE_KEYGUARD\n\tEXPAND_STATUS_BAR\n\tGET_PACKAGE_SIZE\n\tINSTALL_SHORTCUT\n\tINTERNET\n\tKILL_BACKGROUND_PROCESSES\n\tMODIFY_AUDIO_SETTINGS\n\tNFC\n\tREAD_SYNC_SETTINGS\n\tREAD_SYNC_STATS\n\tRECEIVE_BOOT_COMPLETED\n\tREORDER_TASKS\n\tREQUEST_INSTALL_PACKAGES\n\tSET_ALARM\n\tSET_TIME_ZONE\n\tSET_WALLPAPER\n\tSET_WALLPAPER_HINTS\n\tTRANSMIT_IR\n\tUNINSTALL_SHORTCUT\n\tUSE_FINGERPRINT\n\tVIBRATE\n\tWAKE_LOCK\n\tWRITE_SYNC_SETTINGS\n\t\nDangerous Permissions:\n\n\tgroup:android.permission-group.CONTACTS\n\tpermission:android.permission.WRITE_CONTACTS\n\tpermission:android.permission.GET_ACCOUNTS\n\tpermission:android.permission.READ_CONTACTS\n\n\tgroup:android.permission-group.PHONE\n\tpermission:android.permission.READ_CALL_LOG\n\tpermission:android.permission.READ_PHONE_STATE\n\tpermission:android.permission.CALL_PHONE\n\tpermission:android.permission.WRITE_CALL_LOG\n\tpermission:android.permission.USE_SIP\n\tpermission:android.permission.PROCESS_OUTGOING_CALLS\n\tpermission:com.android.voicemail.permission.ADD_VOICEMAIL\n\n\tgroup:android.permission-group.CALENDAR\n\tpermission:android.permission.READ_CALENDAR\n\tpermission:android.permission.WRITE_CALENDAR\n\n\tgroup:android.permission-group.CAMERA\n\tpermission:android.permission.CAMERA\n\n\tgroup:android.permission-group.SENSORS\n\tpermission:android.permission.BODY_SENSORS\n\n\tgroup:android.permission-group.LOCATION\n\tpermission:android.permission.ACCESS_FINE_LOCATION\n\tpermission:android.permission.ACCESS_COARSE_LOCATION\n\n\tgroup:android.permission-group.STORAGE\n\tpermission:android.permission.READ_EXTERNAL_STORAGE\n\tpermission:android.permission.WRITE_EXTERNAL_STORAGE\n\n\tgroup:android.permission-group.MICROPHONE\n\tpermission:android.permission.RECORD_AUDIO\n\n\tgroup:android.permission-group.SMS\n\tpermission:android.permission.READ_SMS\n\tpermission:android.permission.RECEIVE_WAP_PUSH\n\tpermission:android.permission.RECEIVE_MMS\n\tpermission:android.permission.RECEIVE_SMS\n\tpermission:android.permission.SEND_SMS\n\tpermission:android.permission.READ_CELL_BROADCASTS\n\t\n可以通过adb shell pm list permissions -d -g进行查看。\n\n其中上面的dangerous permissions，危险权限都是一组一组的。如果app运行在android 6.x的机器上，对于授权机制是这样的。如果你申请某个危险的权限，假设你的app早已被用户授权了同一组的某个危险权限，那么系统会立即授权，而不需要用户去点击授权。比如你的app对READ_CONTACTS已经授权了，当你的app申请WRITE_CONTACTS时，系统会直接授权通过。此外，对于申请时弹出的dialog上面的文本说明也是对整个权限组的说明，而不是单个权限（注意这个dialog是不能进行定制的）。\n\n当然也不要对权限组过多的依赖，对每个危险权限都要进行正常流程的申请，因为在后期的版本中这个权限组可能会产生变化。","slug":"Android6.0新的权限机制","published":1,"updated":"2017-12-26T05:14:25.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjboyl4wv00061ctmtqvs88zf","content":"<p>接触到了android6.0权限的几个坑，这里记录一下<br>参考自：<a href=\"http://blog.csdn.net/lmj623565791/article/details/50709663\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/lmj623565791/article/details/50709663</a> </p>\n<p>对于6.0以下的权限及在安装的时候，根据权限声明产生一个权限列表，用户只有在同意之后才能完成app的安装，造成了我们想要使用某个app，就要默默忍受其一些不必要的权限（比如是个app都要访问通讯录、短信等）。</p>\n<p>而在6.0以后，我们可以直接安装，当app需要我们授予不恰当的权限的时候，我们可以予以拒绝。当然你也可以在设置界面对每个app的权限进行查看，以及对单个权限进行授权或者解除授权。</p>\n<p>新的权限机制更好的保护了用户的隐私，Google将权限分为两类：</p>\n<ul>\n<li>一类是Normal Permissions，这类权限一般不涉及用户隐私，是不需要用户进行授权的，比如手机震动、访问网络等；</li>\n<li>另一类是Dangerous Permission，一般是涉及到用户隐私的，需要用户进行授权，比如读取sdcard、访问通讯录等。</li>\n</ul>\n<p>Normal Permissions如下：</p>\n<pre><code>ACCESS_LOCATION_EXTRA_COMMANDS\nACCESS_NETWORK_STATE\nACCESS_NOTIFICATION_POLICY\nACCESS_WIFI_STATE\nBLUETOOTH\nBLUETOOTH_ADMIN\nBROADCAST_STICKY\nCHANGE_NETWORK_STATE\nCHANGE_WIFI_MULTICAST_STATE\nCHANGE_WIFI_STATE\nDISABLE_KEYGUARD\nEXPAND_STATUS_BAR\nGET_PACKAGE_SIZE\nINSTALL_SHORTCUT\nINTERNET\nKILL_BACKGROUND_PROCESSES\nMODIFY_AUDIO_SETTINGS\nNFC\nREAD_SYNC_SETTINGS\nREAD_SYNC_STATS\nRECEIVE_BOOT_COMPLETED\nREORDER_TASKS\nREQUEST_INSTALL_PACKAGES\nSET_ALARM\nSET_TIME_ZONE\nSET_WALLPAPER\nSET_WALLPAPER_HINTS\nTRANSMIT_IR\nUNINSTALL_SHORTCUT\nUSE_FINGERPRINT\nVIBRATE\nWAKE_LOCK\nWRITE_SYNC_SETTINGS\n</code></pre><p>Dangerous Permissions:</p>\n<pre><code>group:android.permission-group.CONTACTS\npermission:android.permission.WRITE_CONTACTS\npermission:android.permission.GET_ACCOUNTS\npermission:android.permission.READ_CONTACTS\n\ngroup:android.permission-group.PHONE\npermission:android.permission.READ_CALL_LOG\npermission:android.permission.READ_PHONE_STATE\npermission:android.permission.CALL_PHONE\npermission:android.permission.WRITE_CALL_LOG\npermission:android.permission.USE_SIP\npermission:android.permission.PROCESS_OUTGOING_CALLS\npermission:com.android.voicemail.permission.ADD_VOICEMAIL\n\ngroup:android.permission-group.CALENDAR\npermission:android.permission.READ_CALENDAR\npermission:android.permission.WRITE_CALENDAR\n\ngroup:android.permission-group.CAMERA\npermission:android.permission.CAMERA\n\ngroup:android.permission-group.SENSORS\npermission:android.permission.BODY_SENSORS\n\ngroup:android.permission-group.LOCATION\npermission:android.permission.ACCESS_FINE_LOCATION\npermission:android.permission.ACCESS_COARSE_LOCATION\n\ngroup:android.permission-group.STORAGE\npermission:android.permission.READ_EXTERNAL_STORAGE\npermission:android.permission.WRITE_EXTERNAL_STORAGE\n\ngroup:android.permission-group.MICROPHONE\npermission:android.permission.RECORD_AUDIO\n\ngroup:android.permission-group.SMS\npermission:android.permission.READ_SMS\npermission:android.permission.RECEIVE_WAP_PUSH\npermission:android.permission.RECEIVE_MMS\npermission:android.permission.RECEIVE_SMS\npermission:android.permission.SEND_SMS\npermission:android.permission.READ_CELL_BROADCASTS\n</code></pre><p>可以通过adb shell pm list permissions -d -g进行查看。</p>\n<p>其中上面的dangerous permissions，危险权限都是一组一组的。如果app运行在android 6.x的机器上，对于授权机制是这样的。如果你申请某个危险的权限，假设你的app早已被用户授权了同一组的某个危险权限，那么系统会立即授权，而不需要用户去点击授权。比如你的app对READ_CONTACTS已经授权了，当你的app申请WRITE_CONTACTS时，系统会直接授权通过。此外，对于申请时弹出的dialog上面的文本说明也是对整个权限组的说明，而不是单个权限（注意这个dialog是不能进行定制的）。</p>\n<p>当然也不要对权限组过多的依赖，对每个危险权限都要进行正常流程的申请，因为在后期的版本中这个权限组可能会产生变化。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>接触到了android6.0权限的几个坑，这里记录一下<br>参考自：<a href=\"http://blog.csdn.net/lmj623565791/article/details/50709663\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/lmj623565791/article/details/50709663</a> </p>\n<p>对于6.0以下的权限及在安装的时候，根据权限声明产生一个权限列表，用户只有在同意之后才能完成app的安装，造成了我们想要使用某个app，就要默默忍受其一些不必要的权限（比如是个app都要访问通讯录、短信等）。</p>\n<p>而在6.0以后，我们可以直接安装，当app需要我们授予不恰当的权限的时候，我们可以予以拒绝。当然你也可以在设置界面对每个app的权限进行查看，以及对单个权限进行授权或者解除授权。</p>\n<p>新的权限机制更好的保护了用户的隐私，Google将权限分为两类：</p>\n<ul>\n<li>一类是Normal Permissions，这类权限一般不涉及用户隐私，是不需要用户进行授权的，比如手机震动、访问网络等；</li>\n<li>另一类是Dangerous Permission，一般是涉及到用户隐私的，需要用户进行授权，比如读取sdcard、访问通讯录等。</li>\n</ul>\n<p>Normal Permissions如下：</p>\n<pre><code>ACCESS_LOCATION_EXTRA_COMMANDS\nACCESS_NETWORK_STATE\nACCESS_NOTIFICATION_POLICY\nACCESS_WIFI_STATE\nBLUETOOTH\nBLUETOOTH_ADMIN\nBROADCAST_STICKY\nCHANGE_NETWORK_STATE\nCHANGE_WIFI_MULTICAST_STATE\nCHANGE_WIFI_STATE\nDISABLE_KEYGUARD\nEXPAND_STATUS_BAR\nGET_PACKAGE_SIZE\nINSTALL_SHORTCUT\nINTERNET\nKILL_BACKGROUND_PROCESSES\nMODIFY_AUDIO_SETTINGS\nNFC\nREAD_SYNC_SETTINGS\nREAD_SYNC_STATS\nRECEIVE_BOOT_COMPLETED\nREORDER_TASKS\nREQUEST_INSTALL_PACKAGES\nSET_ALARM\nSET_TIME_ZONE\nSET_WALLPAPER\nSET_WALLPAPER_HINTS\nTRANSMIT_IR\nUNINSTALL_SHORTCUT\nUSE_FINGERPRINT\nVIBRATE\nWAKE_LOCK\nWRITE_SYNC_SETTINGS\n</code></pre><p>Dangerous Permissions:</p>\n<pre><code>group:android.permission-group.CONTACTS\npermission:android.permission.WRITE_CONTACTS\npermission:android.permission.GET_ACCOUNTS\npermission:android.permission.READ_CONTACTS\n\ngroup:android.permission-group.PHONE\npermission:android.permission.READ_CALL_LOG\npermission:android.permission.READ_PHONE_STATE\npermission:android.permission.CALL_PHONE\npermission:android.permission.WRITE_CALL_LOG\npermission:android.permission.USE_SIP\npermission:android.permission.PROCESS_OUTGOING_CALLS\npermission:com.android.voicemail.permission.ADD_VOICEMAIL\n\ngroup:android.permission-group.CALENDAR\npermission:android.permission.READ_CALENDAR\npermission:android.permission.WRITE_CALENDAR\n\ngroup:android.permission-group.CAMERA\npermission:android.permission.CAMERA\n\ngroup:android.permission-group.SENSORS\npermission:android.permission.BODY_SENSORS\n\ngroup:android.permission-group.LOCATION\npermission:android.permission.ACCESS_FINE_LOCATION\npermission:android.permission.ACCESS_COARSE_LOCATION\n\ngroup:android.permission-group.STORAGE\npermission:android.permission.READ_EXTERNAL_STORAGE\npermission:android.permission.WRITE_EXTERNAL_STORAGE\n\ngroup:android.permission-group.MICROPHONE\npermission:android.permission.RECORD_AUDIO\n\ngroup:android.permission-group.SMS\npermission:android.permission.READ_SMS\npermission:android.permission.RECEIVE_WAP_PUSH\npermission:android.permission.RECEIVE_MMS\npermission:android.permission.RECEIVE_SMS\npermission:android.permission.SEND_SMS\npermission:android.permission.READ_CELL_BROADCASTS\n</code></pre><p>可以通过adb shell pm list permissions -d -g进行查看。</p>\n<p>其中上面的dangerous permissions，危险权限都是一组一组的。如果app运行在android 6.x的机器上，对于授权机制是这样的。如果你申请某个危险的权限，假设你的app早已被用户授权了同一组的某个危险权限，那么系统会立即授权，而不需要用户去点击授权。比如你的app对READ_CONTACTS已经授权了，当你的app申请WRITE_CONTACTS时，系统会直接授权通过。此外，对于申请时弹出的dialog上面的文本说明也是对整个权限组的说明，而不是单个权限（注意这个dialog是不能进行定制的）。</p>\n<p>当然也不要对权限组过多的依赖，对每个危险权限都要进行正常流程的申请，因为在后期的版本中这个权限组可能会产生变化。</p>\n"},{"layout":"post","title":"Android头部视差效果的实现方式","date":"2016-07-12T16:00:00.000Z","_content":"实现了类似qq空间头部的图片弹性效果，手指向下滑动头部图片展示出更多部分 \n废话不说，上代码： \n自定义的ParallaxListView\n\t\n\tpublic class ParallaxListView extends ListView {\n\n\t    private ImageView parallaxImageView;\n\t    private int maxHeight;\n\t    private int originalHeight;\n\n\t    public ParallaxListView(Context context) {\n\t        this(context, null);\n\t    }\n\t\n\t    public ParallaxListView(Context context, AttributeSet attrs) {\n\t        this(context, attrs, 0);\n\t    }\n\t\n\t    public ParallaxListView(Context context, AttributeSet attrs, int defStyle) {\n\t        super(context, attrs, defStyle);\n\t    }\n\t\n\t    /**\n\t     * 对外提供一个传入图片的方式\n\t     * \n\t     * @param parallaxImageView\n\t     */\n\t    public void setParallaxImageView(final ImageView parallaxImageView) {\n\t        this.parallaxImageView = parallaxImageView;\n\t        // 设置最大高度为图片的真实高度\n\t        maxHeight = parallaxImageView.getDrawable().getIntrinsicHeight();\n\t        // 利用视图树获取最初的高度\n\t        parallaxImageView.getViewTreeObserver().addOnGlobalLayoutListener(\n\t                new OnGlobalLayoutListener() {\n\t\n\t                    /**\n\t                     * 该方法在完成布局的时候调用\n\t                     */\n\t                    @Override\n\t                    public void onGlobalLayout() {\n\t                        // 一般用完立即移除，因为只要有宽高变化，就会重新布局，会引起onGlobalLayout重新调用\n\t                        parallaxImageView.getViewTreeObserver()\n\t                                .removeGlobalOnLayoutListener(this);\n\t                        originalHeight = parallaxImageView.getHeight();\n\t\n\t                    }\n\t                });\n\t\n\t    }\n\t\n\t    /**\n\t     * 重新overScrollBy方法 该方法是在listview滑动到头的时候调用，并且可以在该方法中获取滑动的距离 deltaY: 继续滑动的距离\n\t     * 正值：表示底部到头 负值：顶部到头\n\t     */\n\t    @SuppressLint(\"NewApi\")\n\t    @Override\n\t    protected boolean overScrollBy(int deltaX, int deltaY, int scrollX,\n\t            int scrollY, int scrollRangeX, int scrollRangeY,\n\t            int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {\n\t        // 如果是顶部到头，并且是手指拖动到头，才让ImageView的高度增加\n\t        if (deltaY < 0 && isTouchEvent) {\n\t            // 得到ImageView的新高度\n\t            int newHeight = parallaxImageView.getHeight() - deltaY / 3;\n\t            // 对newHeight高度进行限制\n\t            if (newHeight > maxHeight)\n\t                newHeight = maxHeight;\n\t            // 将新高度设置给imageview\n\t            android.view.ViewGroup.LayoutParams params = parallaxImageView\n\t                    .getLayoutParams();\n\t            params.height = newHeight;\n\t            parallaxImageView.setLayoutParams(params);\n\t\n\t        }\n\t\n\t        return super.overScrollBy(deltaX, deltaY, scrollX, scrollY,\n\t                scrollRangeX, scrollRangeY, maxOverScrollX, maxOverScrollY,\n\t                isTouchEvent);\n\t    }\n\t\n\t    @SuppressLint(\"NewApi\")\n\t    @Override\n\t    public boolean onTouchEvent(MotionEvent ev) {\n\t        // 当手指抬起的时候执行一些逻辑\n\t        if (ev.getAction() == MotionEvent.ACTION_UP) {\n\t            // 让ImageView高度缓慢恢复到初始设置的120\n\t            final ValueAnimator animator = ValueAnimator.ofInt(\n\t                    parallaxImageView.getHeight(), originalHeight);\n\t            animator.addUpdateListener(new AnimatorUpdateListener() {\n\t\n\t                @Override\n\t                public void onAnimationUpdate(ValueAnimator animation) {\n\t                    // 获取动画当前的值\n\t                    int value = (Integer) animator.getAnimatedValue();\n\t                    android.view.ViewGroup.LayoutParams params = parallaxImageView\n\t                            .getLayoutParams();\n\t                    params.height = value;\n\t                    parallaxImageView.setLayoutParams(params);\n\t\n\t                }\n\t            });\n\t            animator.setInterpolator(new OvershootInterpolator());\n\t            animator.setDuration(400);\n\t\n\t            animator.start();\n\t\n\t        }\n\t\n\t        return super.onTouchEvent(ev);\n\t    }\n\t}\n\nParallaxAdapter：\n\n\tpublic class ParallaxAdapter extends BaseAdapter {\n\n\t    private Context context;\n\t\n\t    public ParallaxAdapter(Context context) {\n\t        this.context = context;\n\t    }\n\t\n\t    @Override\n\t    public int getCount() {\n\t        return 30;\n\t    }\n\t\n\t    @Override\n\t    public Object getItem(int position) {\n\t        return null;\n\t    }\n\t\n\t    @Override\n\t    public long getItemId(int position) {\n\t        return 0;\n\t    }\n\t\n\t    @Override\n\t    public View getView(int position, View convertView, ViewGroup parent) {\n\t        TextView tv = new TextView(context);\n\t        tv.setText(\"哈哈哈\"+position);\n\t        tv.setTextSize(30);\n\t        tv.setTextColor(Color.BLACK);\n\t        return tv;\n\t    }\n\t}\n\n\nActivity中使用：\n\n\tpublic class MainActivity extends Activity {\n\t\n\t    private ParallaxListView mPlv;\n\t    private View headerView;\n\t    private ImageView parallaxImageView;\n\t\n\t    @Override\n\t    protected void onCreate(Bundle savedInstanceState) {\n\t        super.onCreate(savedInstanceState);\n\t        setContentView(R.layout.activity_main);\n\t\n\t        initView();\n\t        initData();\n\t    }\n\t    /**\n\t     * 添加数据\n\t     */\n\t    private void initData() {\n\t        mPlv.addHeaderView(headerView);\n\t        mPlv.setParallaxImageView(parallaxImageView);\n\t        mPlv.setAdapter(new ParallaxAdapter(getApplicationContext()));\n\t    }\n\t    /**\n\t     * 添加布局\n\t     */\n\t    @SuppressLint(\"NewApi\") private void initView() {\n\t        mPlv = (ParallaxListView) findViewById(R.id.lv);\n\t        //去掉阴影\n\t        mPlv.setOverScrollMode(AbsListView.OVER_SCROLL_NEVER);\n\t        headerView = View.inflate(getApplicationContext(), R.layout.item_header, null);\n\t        parallaxImageView = (ImageView) headerView.findViewById(R.id.iv);\n\t    }\n\t\n\t}\n","source":"_posts/Android头部视差效果的实现.md","raw":"---\nlayout: post\ntitle:  \"Android头部视差效果的实现方式\"\ndate:   2016-07-13 \ncategories: [Android,UI]\ntags: [Android]\n---\n实现了类似qq空间头部的图片弹性效果，手指向下滑动头部图片展示出更多部分 \n废话不说，上代码： \n自定义的ParallaxListView\n\t\n\tpublic class ParallaxListView extends ListView {\n\n\t    private ImageView parallaxImageView;\n\t    private int maxHeight;\n\t    private int originalHeight;\n\n\t    public ParallaxListView(Context context) {\n\t        this(context, null);\n\t    }\n\t\n\t    public ParallaxListView(Context context, AttributeSet attrs) {\n\t        this(context, attrs, 0);\n\t    }\n\t\n\t    public ParallaxListView(Context context, AttributeSet attrs, int defStyle) {\n\t        super(context, attrs, defStyle);\n\t    }\n\t\n\t    /**\n\t     * 对外提供一个传入图片的方式\n\t     * \n\t     * @param parallaxImageView\n\t     */\n\t    public void setParallaxImageView(final ImageView parallaxImageView) {\n\t        this.parallaxImageView = parallaxImageView;\n\t        // 设置最大高度为图片的真实高度\n\t        maxHeight = parallaxImageView.getDrawable().getIntrinsicHeight();\n\t        // 利用视图树获取最初的高度\n\t        parallaxImageView.getViewTreeObserver().addOnGlobalLayoutListener(\n\t                new OnGlobalLayoutListener() {\n\t\n\t                    /**\n\t                     * 该方法在完成布局的时候调用\n\t                     */\n\t                    @Override\n\t                    public void onGlobalLayout() {\n\t                        // 一般用完立即移除，因为只要有宽高变化，就会重新布局，会引起onGlobalLayout重新调用\n\t                        parallaxImageView.getViewTreeObserver()\n\t                                .removeGlobalOnLayoutListener(this);\n\t                        originalHeight = parallaxImageView.getHeight();\n\t\n\t                    }\n\t                });\n\t\n\t    }\n\t\n\t    /**\n\t     * 重新overScrollBy方法 该方法是在listview滑动到头的时候调用，并且可以在该方法中获取滑动的距离 deltaY: 继续滑动的距离\n\t     * 正值：表示底部到头 负值：顶部到头\n\t     */\n\t    @SuppressLint(\"NewApi\")\n\t    @Override\n\t    protected boolean overScrollBy(int deltaX, int deltaY, int scrollX,\n\t            int scrollY, int scrollRangeX, int scrollRangeY,\n\t            int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {\n\t        // 如果是顶部到头，并且是手指拖动到头，才让ImageView的高度增加\n\t        if (deltaY < 0 && isTouchEvent) {\n\t            // 得到ImageView的新高度\n\t            int newHeight = parallaxImageView.getHeight() - deltaY / 3;\n\t            // 对newHeight高度进行限制\n\t            if (newHeight > maxHeight)\n\t                newHeight = maxHeight;\n\t            // 将新高度设置给imageview\n\t            android.view.ViewGroup.LayoutParams params = parallaxImageView\n\t                    .getLayoutParams();\n\t            params.height = newHeight;\n\t            parallaxImageView.setLayoutParams(params);\n\t\n\t        }\n\t\n\t        return super.overScrollBy(deltaX, deltaY, scrollX, scrollY,\n\t                scrollRangeX, scrollRangeY, maxOverScrollX, maxOverScrollY,\n\t                isTouchEvent);\n\t    }\n\t\n\t    @SuppressLint(\"NewApi\")\n\t    @Override\n\t    public boolean onTouchEvent(MotionEvent ev) {\n\t        // 当手指抬起的时候执行一些逻辑\n\t        if (ev.getAction() == MotionEvent.ACTION_UP) {\n\t            // 让ImageView高度缓慢恢复到初始设置的120\n\t            final ValueAnimator animator = ValueAnimator.ofInt(\n\t                    parallaxImageView.getHeight(), originalHeight);\n\t            animator.addUpdateListener(new AnimatorUpdateListener() {\n\t\n\t                @Override\n\t                public void onAnimationUpdate(ValueAnimator animation) {\n\t                    // 获取动画当前的值\n\t                    int value = (Integer) animator.getAnimatedValue();\n\t                    android.view.ViewGroup.LayoutParams params = parallaxImageView\n\t                            .getLayoutParams();\n\t                    params.height = value;\n\t                    parallaxImageView.setLayoutParams(params);\n\t\n\t                }\n\t            });\n\t            animator.setInterpolator(new OvershootInterpolator());\n\t            animator.setDuration(400);\n\t\n\t            animator.start();\n\t\n\t        }\n\t\n\t        return super.onTouchEvent(ev);\n\t    }\n\t}\n\nParallaxAdapter：\n\n\tpublic class ParallaxAdapter extends BaseAdapter {\n\n\t    private Context context;\n\t\n\t    public ParallaxAdapter(Context context) {\n\t        this.context = context;\n\t    }\n\t\n\t    @Override\n\t    public int getCount() {\n\t        return 30;\n\t    }\n\t\n\t    @Override\n\t    public Object getItem(int position) {\n\t        return null;\n\t    }\n\t\n\t    @Override\n\t    public long getItemId(int position) {\n\t        return 0;\n\t    }\n\t\n\t    @Override\n\t    public View getView(int position, View convertView, ViewGroup parent) {\n\t        TextView tv = new TextView(context);\n\t        tv.setText(\"哈哈哈\"+position);\n\t        tv.setTextSize(30);\n\t        tv.setTextColor(Color.BLACK);\n\t        return tv;\n\t    }\n\t}\n\n\nActivity中使用：\n\n\tpublic class MainActivity extends Activity {\n\t\n\t    private ParallaxListView mPlv;\n\t    private View headerView;\n\t    private ImageView parallaxImageView;\n\t\n\t    @Override\n\t    protected void onCreate(Bundle savedInstanceState) {\n\t        super.onCreate(savedInstanceState);\n\t        setContentView(R.layout.activity_main);\n\t\n\t        initView();\n\t        initData();\n\t    }\n\t    /**\n\t     * 添加数据\n\t     */\n\t    private void initData() {\n\t        mPlv.addHeaderView(headerView);\n\t        mPlv.setParallaxImageView(parallaxImageView);\n\t        mPlv.setAdapter(new ParallaxAdapter(getApplicationContext()));\n\t    }\n\t    /**\n\t     * 添加布局\n\t     */\n\t    @SuppressLint(\"NewApi\") private void initView() {\n\t        mPlv = (ParallaxListView) findViewById(R.id.lv);\n\t        //去掉阴影\n\t        mPlv.setOverScrollMode(AbsListView.OVER_SCROLL_NEVER);\n\t        headerView = View.inflate(getApplicationContext(), R.layout.item_header, null);\n\t        parallaxImageView = (ImageView) headerView.findViewById(R.id.iv);\n\t    }\n\t\n\t}\n","slug":"Android头部视差效果的实现","published":1,"updated":"2017-12-26T05:14:25.498Z","comments":1,"photos":[],"link":"","_id":"cjboyl4wz000a1ctm696xe9cg","content":"<p>实现了类似qq空间头部的图片弹性效果，手指向下滑动头部图片展示出更多部分<br>废话不说，上代码：<br>自定义的ParallaxListView</p>\n<pre><code>public class ParallaxListView extends ListView {\n\n    private ImageView parallaxImageView;\n    private int maxHeight;\n    private int originalHeight;\n\n    public ParallaxListView(Context context) {\n        this(context, null);\n    }\n\n    public ParallaxListView(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public ParallaxListView(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n    }\n\n    /**\n     * 对外提供一个传入图片的方式\n     * \n     * @param parallaxImageView\n     */\n    public void setParallaxImageView(final ImageView parallaxImageView) {\n        this.parallaxImageView = parallaxImageView;\n        // 设置最大高度为图片的真实高度\n        maxHeight = parallaxImageView.getDrawable().getIntrinsicHeight();\n        // 利用视图树获取最初的高度\n        parallaxImageView.getViewTreeObserver().addOnGlobalLayoutListener(\n                new OnGlobalLayoutListener() {\n\n                    /**\n                     * 该方法在完成布局的时候调用\n                     */\n                    @Override\n                    public void onGlobalLayout() {\n                        // 一般用完立即移除，因为只要有宽高变化，就会重新布局，会引起onGlobalLayout重新调用\n                        parallaxImageView.getViewTreeObserver()\n                                .removeGlobalOnLayoutListener(this);\n                        originalHeight = parallaxImageView.getHeight();\n\n                    }\n                });\n\n    }\n\n    /**\n     * 重新overScrollBy方法 该方法是在listview滑动到头的时候调用，并且可以在该方法中获取滑动的距离 deltaY: 继续滑动的距离\n     * 正值：表示底部到头 负值：顶部到头\n     */\n    @SuppressLint(&quot;NewApi&quot;)\n    @Override\n    protected boolean overScrollBy(int deltaX, int deltaY, int scrollX,\n            int scrollY, int scrollRangeX, int scrollRangeY,\n            int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {\n        // 如果是顶部到头，并且是手指拖动到头，才让ImageView的高度增加\n        if (deltaY &lt; 0 &amp;&amp; isTouchEvent) {\n            // 得到ImageView的新高度\n            int newHeight = parallaxImageView.getHeight() - deltaY / 3;\n            // 对newHeight高度进行限制\n            if (newHeight &gt; maxHeight)\n                newHeight = maxHeight;\n            // 将新高度设置给imageview\n            android.view.ViewGroup.LayoutParams params = parallaxImageView\n                    .getLayoutParams();\n            params.height = newHeight;\n            parallaxImageView.setLayoutParams(params);\n\n        }\n\n        return super.overScrollBy(deltaX, deltaY, scrollX, scrollY,\n                scrollRangeX, scrollRangeY, maxOverScrollX, maxOverScrollY,\n                isTouchEvent);\n    }\n\n    @SuppressLint(&quot;NewApi&quot;)\n    @Override\n    public boolean onTouchEvent(MotionEvent ev) {\n        // 当手指抬起的时候执行一些逻辑\n        if (ev.getAction() == MotionEvent.ACTION_UP) {\n            // 让ImageView高度缓慢恢复到初始设置的120\n            final ValueAnimator animator = ValueAnimator.ofInt(\n                    parallaxImageView.getHeight(), originalHeight);\n            animator.addUpdateListener(new AnimatorUpdateListener() {\n\n                @Override\n                public void onAnimationUpdate(ValueAnimator animation) {\n                    // 获取动画当前的值\n                    int value = (Integer) animator.getAnimatedValue();\n                    android.view.ViewGroup.LayoutParams params = parallaxImageView\n                            .getLayoutParams();\n                    params.height = value;\n                    parallaxImageView.setLayoutParams(params);\n\n                }\n            });\n            animator.setInterpolator(new OvershootInterpolator());\n            animator.setDuration(400);\n\n            animator.start();\n\n        }\n\n        return super.onTouchEvent(ev);\n    }\n}\n</code></pre><p>ParallaxAdapter：</p>\n<pre><code>public class ParallaxAdapter extends BaseAdapter {\n\n    private Context context;\n\n    public ParallaxAdapter(Context context) {\n        this.context = context;\n    }\n\n    @Override\n    public int getCount() {\n        return 30;\n    }\n\n    @Override\n    public Object getItem(int position) {\n        return null;\n    }\n\n    @Override\n    public long getItemId(int position) {\n        return 0;\n    }\n\n    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n        TextView tv = new TextView(context);\n        tv.setText(&quot;哈哈哈&quot;+position);\n        tv.setTextSize(30);\n        tv.setTextColor(Color.BLACK);\n        return tv;\n    }\n}\n</code></pre><p>Activity中使用：</p>\n<pre><code>public class MainActivity extends Activity {\n\n    private ParallaxListView mPlv;\n    private View headerView;\n    private ImageView parallaxImageView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        initView();\n        initData();\n    }\n    /**\n     * 添加数据\n     */\n    private void initData() {\n        mPlv.addHeaderView(headerView);\n        mPlv.setParallaxImageView(parallaxImageView);\n        mPlv.setAdapter(new ParallaxAdapter(getApplicationContext()));\n    }\n    /**\n     * 添加布局\n     */\n    @SuppressLint(&quot;NewApi&quot;) private void initView() {\n        mPlv = (ParallaxListView) findViewById(R.id.lv);\n        //去掉阴影\n        mPlv.setOverScrollMode(AbsListView.OVER_SCROLL_NEVER);\n        headerView = View.inflate(getApplicationContext(), R.layout.item_header, null);\n        parallaxImageView = (ImageView) headerView.findViewById(R.id.iv);\n    }\n\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>实现了类似qq空间头部的图片弹性效果，手指向下滑动头部图片展示出更多部分<br>废话不说，上代码：<br>自定义的ParallaxListView</p>\n<pre><code>public class ParallaxListView extends ListView {\n\n    private ImageView parallaxImageView;\n    private int maxHeight;\n    private int originalHeight;\n\n    public ParallaxListView(Context context) {\n        this(context, null);\n    }\n\n    public ParallaxListView(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public ParallaxListView(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n    }\n\n    /**\n     * 对外提供一个传入图片的方式\n     * \n     * @param parallaxImageView\n     */\n    public void setParallaxImageView(final ImageView parallaxImageView) {\n        this.parallaxImageView = parallaxImageView;\n        // 设置最大高度为图片的真实高度\n        maxHeight = parallaxImageView.getDrawable().getIntrinsicHeight();\n        // 利用视图树获取最初的高度\n        parallaxImageView.getViewTreeObserver().addOnGlobalLayoutListener(\n                new OnGlobalLayoutListener() {\n\n                    /**\n                     * 该方法在完成布局的时候调用\n                     */\n                    @Override\n                    public void onGlobalLayout() {\n                        // 一般用完立即移除，因为只要有宽高变化，就会重新布局，会引起onGlobalLayout重新调用\n                        parallaxImageView.getViewTreeObserver()\n                                .removeGlobalOnLayoutListener(this);\n                        originalHeight = parallaxImageView.getHeight();\n\n                    }\n                });\n\n    }\n\n    /**\n     * 重新overScrollBy方法 该方法是在listview滑动到头的时候调用，并且可以在该方法中获取滑动的距离 deltaY: 继续滑动的距离\n     * 正值：表示底部到头 负值：顶部到头\n     */\n    @SuppressLint(&quot;NewApi&quot;)\n    @Override\n    protected boolean overScrollBy(int deltaX, int deltaY, int scrollX,\n            int scrollY, int scrollRangeX, int scrollRangeY,\n            int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {\n        // 如果是顶部到头，并且是手指拖动到头，才让ImageView的高度增加\n        if (deltaY &lt; 0 &amp;&amp; isTouchEvent) {\n            // 得到ImageView的新高度\n            int newHeight = parallaxImageView.getHeight() - deltaY / 3;\n            // 对newHeight高度进行限制\n            if (newHeight &gt; maxHeight)\n                newHeight = maxHeight;\n            // 将新高度设置给imageview\n            android.view.ViewGroup.LayoutParams params = parallaxImageView\n                    .getLayoutParams();\n            params.height = newHeight;\n            parallaxImageView.setLayoutParams(params);\n\n        }\n\n        return super.overScrollBy(deltaX, deltaY, scrollX, scrollY,\n                scrollRangeX, scrollRangeY, maxOverScrollX, maxOverScrollY,\n                isTouchEvent);\n    }\n\n    @SuppressLint(&quot;NewApi&quot;)\n    @Override\n    public boolean onTouchEvent(MotionEvent ev) {\n        // 当手指抬起的时候执行一些逻辑\n        if (ev.getAction() == MotionEvent.ACTION_UP) {\n            // 让ImageView高度缓慢恢复到初始设置的120\n            final ValueAnimator animator = ValueAnimator.ofInt(\n                    parallaxImageView.getHeight(), originalHeight);\n            animator.addUpdateListener(new AnimatorUpdateListener() {\n\n                @Override\n                public void onAnimationUpdate(ValueAnimator animation) {\n                    // 获取动画当前的值\n                    int value = (Integer) animator.getAnimatedValue();\n                    android.view.ViewGroup.LayoutParams params = parallaxImageView\n                            .getLayoutParams();\n                    params.height = value;\n                    parallaxImageView.setLayoutParams(params);\n\n                }\n            });\n            animator.setInterpolator(new OvershootInterpolator());\n            animator.setDuration(400);\n\n            animator.start();\n\n        }\n\n        return super.onTouchEvent(ev);\n    }\n}\n</code></pre><p>ParallaxAdapter：</p>\n<pre><code>public class ParallaxAdapter extends BaseAdapter {\n\n    private Context context;\n\n    public ParallaxAdapter(Context context) {\n        this.context = context;\n    }\n\n    @Override\n    public int getCount() {\n        return 30;\n    }\n\n    @Override\n    public Object getItem(int position) {\n        return null;\n    }\n\n    @Override\n    public long getItemId(int position) {\n        return 0;\n    }\n\n    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n        TextView tv = new TextView(context);\n        tv.setText(&quot;哈哈哈&quot;+position);\n        tv.setTextSize(30);\n        tv.setTextColor(Color.BLACK);\n        return tv;\n    }\n}\n</code></pre><p>Activity中使用：</p>\n<pre><code>public class MainActivity extends Activity {\n\n    private ParallaxListView mPlv;\n    private View headerView;\n    private ImageView parallaxImageView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        initView();\n        initData();\n    }\n    /**\n     * 添加数据\n     */\n    private void initData() {\n        mPlv.addHeaderView(headerView);\n        mPlv.setParallaxImageView(parallaxImageView);\n        mPlv.setAdapter(new ParallaxAdapter(getApplicationContext()));\n    }\n    /**\n     * 添加布局\n     */\n    @SuppressLint(&quot;NewApi&quot;) private void initView() {\n        mPlv = (ParallaxListView) findViewById(R.id.lv);\n        //去掉阴影\n        mPlv.setOverScrollMode(AbsListView.OVER_SCROLL_NEVER);\n        headerView = View.inflate(getApplicationContext(), R.layout.item_header, null);\n        parallaxImageView = (ImageView) headerView.findViewById(R.id.iv);\n    }\n\n}\n</code></pre>"},{"title":"Android中的多进程的模式","date":"2017-07-26T06:47:01.000Z","_content":"\n![](http://ot0nm27pk.bkt.clouddn.com/android_ipc_01.jpg) \n\n#### 开启多进程模式\n如果你想在一个应用中使用多个进程,通过清单文件给四大组件添加android:process属性,就可以很方便的开启多进程.\n还有一种非常规的创建方式,通过JNI在native层去fork一个新的进程.这种我们暂时只是了解一下.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.wudi.demo\">\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n        <activity android:name=\".FristActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n        <activity android:name=\".SecondActivity\"\n            android:process=\":second\">\n        </activity>\n        <activity android:name=\".ThirdActivity\"\n            android:process=\"com.third.demo\">\n        </activity>\n    </application>\n\n</manifest>\n```\n\n当我们依次打开FristActivity, SecondActivity, ThirdActivity.此时应该打开了三个进程.\n\n那么命令行中进行测试\n`adb shell ps`可以把系统所有进程展示出来, 你可以加上过滤信息`| grep xxx xxx`替换你需要过滤出来信息,这里我们使用`adb shell ps | grep com.wudi`,结果为：\n\n```shell\nu0_a512   13555 533   1715032 47068 SyS_epoll_ 0000000000 S com.wudi.demo\nu0_a512   13585 533   1715032 47208 SyS_epoll_ 0000000000 S com.wudi.demo:second\nu0_a512   13625 533   1894268 61276 SyS_epoll_ 0000000000 S com.wudi.third\n```\n这里需要注意的是：\n\n- 当以`:`开头的进程,属于当前应用的私有进程,其他应用的组件不可以和它跑在同一个进程\n- 当不以`:`开头,那么进程属于全局进程,其他应用通过ShareUID方法可以和它跑在同一个进程\n\n\nAndroid系统会为每一个应用分配唯一的UID. 相同UID的应用才能共享数据. 但是两个应用通过ShareUID跑在同一个进程是有要求的. 除了具有相同的ShareUID并且还要签名相同才可以. 这时如果不在同一进程他们之间可以共享data目录,组件信息等. 如果还在同一进程, 那么他们还能共享内存数据.\n\n\n#### 进程模式的运行机制\n\n两个进程间,每个单独的进程又会分配一个独立的虚拟机, 所以每个虚拟机在内存分配上有不同的地址空间.对于不同虚拟机访问同一个对象就会产生多份副本. 副本之间互相独立不干扰彼此.\n\n我们需要注意的问题\n\n- 静态成员和单例模式完全失效\n- 线程同步机制完全失效\n- SharedPreferences的可靠性下降\n- Application会多次创建\n\n\n\n1.如果在FristActivity中对静态变量进行修改, 在SecondActivity取出这个静态发现是FristActivity没修改之前的.\n2.因为不是一块内存,所以不管是锁对象还是锁全局都无法保证线程同步,因为不是同一个对象.\n3.因为Sp不支持两个进程同时读写,因为底层是通过读写XML文件实现的,并发可能会触发异常.\n4.运行在多个进程中,那么就会创建多个虚拟机,每个虚拟机都有一个对应Application并需要启动加载这个文件.\n\n一个应用的多进程:**它就相当于两个不同的应用采用了ShareUID的模式. 每个进程都会拥有独立的虚拟机, Application以及内存空间**\n","source":"_posts/Android中的多进程的模式.md","raw":"---\ntitle:  \"Android中的多进程的模式\"\ndate: 2017-07-26 14:47:01\ncategories: [Android,IPC]\ntags: [Android]\n---\n\n![](http://ot0nm27pk.bkt.clouddn.com/android_ipc_01.jpg) \n\n#### 开启多进程模式\n如果你想在一个应用中使用多个进程,通过清单文件给四大组件添加android:process属性,就可以很方便的开启多进程.\n还有一种非常规的创建方式,通过JNI在native层去fork一个新的进程.这种我们暂时只是了解一下.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.wudi.demo\">\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n        <activity android:name=\".FristActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n        <activity android:name=\".SecondActivity\"\n            android:process=\":second\">\n        </activity>\n        <activity android:name=\".ThirdActivity\"\n            android:process=\"com.third.demo\">\n        </activity>\n    </application>\n\n</manifest>\n```\n\n当我们依次打开FristActivity, SecondActivity, ThirdActivity.此时应该打开了三个进程.\n\n那么命令行中进行测试\n`adb shell ps`可以把系统所有进程展示出来, 你可以加上过滤信息`| grep xxx xxx`替换你需要过滤出来信息,这里我们使用`adb shell ps | grep com.wudi`,结果为：\n\n```shell\nu0_a512   13555 533   1715032 47068 SyS_epoll_ 0000000000 S com.wudi.demo\nu0_a512   13585 533   1715032 47208 SyS_epoll_ 0000000000 S com.wudi.demo:second\nu0_a512   13625 533   1894268 61276 SyS_epoll_ 0000000000 S com.wudi.third\n```\n这里需要注意的是：\n\n- 当以`:`开头的进程,属于当前应用的私有进程,其他应用的组件不可以和它跑在同一个进程\n- 当不以`:`开头,那么进程属于全局进程,其他应用通过ShareUID方法可以和它跑在同一个进程\n\n\nAndroid系统会为每一个应用分配唯一的UID. 相同UID的应用才能共享数据. 但是两个应用通过ShareUID跑在同一个进程是有要求的. 除了具有相同的ShareUID并且还要签名相同才可以. 这时如果不在同一进程他们之间可以共享data目录,组件信息等. 如果还在同一进程, 那么他们还能共享内存数据.\n\n\n#### 进程模式的运行机制\n\n两个进程间,每个单独的进程又会分配一个独立的虚拟机, 所以每个虚拟机在内存分配上有不同的地址空间.对于不同虚拟机访问同一个对象就会产生多份副本. 副本之间互相独立不干扰彼此.\n\n我们需要注意的问题\n\n- 静态成员和单例模式完全失效\n- 线程同步机制完全失效\n- SharedPreferences的可靠性下降\n- Application会多次创建\n\n\n\n1.如果在FristActivity中对静态变量进行修改, 在SecondActivity取出这个静态发现是FristActivity没修改之前的.\n2.因为不是一块内存,所以不管是锁对象还是锁全局都无法保证线程同步,因为不是同一个对象.\n3.因为Sp不支持两个进程同时读写,因为底层是通过读写XML文件实现的,并发可能会触发异常.\n4.运行在多个进程中,那么就会创建多个虚拟机,每个虚拟机都有一个对应Application并需要启动加载这个文件.\n\n一个应用的多进程:**它就相当于两个不同的应用采用了ShareUID的模式. 每个进程都会拥有独立的虚拟机, Application以及内存空间**\n","slug":"Android中的多进程的模式","published":1,"updated":"2017-12-26T05:14:25.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjboyl4x5000c1ctmlvbogr9n","content":"<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/android_ipc_01.jpg\" alt=\"\"> </p>\n<h4 id=\"开启多进程模式\"><a href=\"#开启多进程模式\" class=\"headerlink\" title=\"开启多进程模式\"></a>开启多进程模式</h4><p>如果你想在一个应用中使用多个进程,通过清单文件给四大组件添加android:process属性,就可以很方便的开启多进程.<br>还有一种非常规的创建方式,通过JNI在native层去fork一个新的进程.这种我们暂时只是了解一下.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">package</span>=<span class=\"string\">\"com.wudi.demo\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></span></div><div class=\"line\">        <span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_launcher\"</span></div><div class=\"line\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span></div><div class=\"line\">        <span class=\"attr\">android:supportsRtl</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/AppTheme\"</span>&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".FristActivity\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".SecondActivity\"</span></span></div><div class=\"line\">            <span class=\"attr\">android:process</span>=<span class=\"string\">\":second\"</span>&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".ThirdActivity\"</span></span></div><div class=\"line\">            <span class=\"attr\">android:process</span>=<span class=\"string\">\"com.third.demo\"</span>&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>当我们依次打开FristActivity, SecondActivity, ThirdActivity.此时应该打开了三个进程.</p>\n<p>那么命令行中进行测试<br><code>adb shell ps</code>可以把系统所有进程展示出来, 你可以加上过滤信息<code>| grep xxx xxx</code>替换你需要过滤出来信息,这里我们使用<code>adb shell ps | grep com.wudi</code>,结果为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">u0_a512   13555 533   1715032 47068 SyS_epoll_ 0000000000 S com.wudi.demo</div><div class=\"line\">u0_a512   13585 533   1715032 47208 SyS_epoll_ 0000000000 S com.wudi.demo:second</div><div class=\"line\">u0_a512   13625 533   1894268 61276 SyS_epoll_ 0000000000 S com.wudi.third</div></pre></td></tr></table></figure>\n<p>这里需要注意的是：</p>\n<ul>\n<li>当以<code>:</code>开头的进程,属于当前应用的私有进程,其他应用的组件不可以和它跑在同一个进程</li>\n<li>当不以<code>:</code>开头,那么进程属于全局进程,其他应用通过ShareUID方法可以和它跑在同一个进程</li>\n</ul>\n<p>Android系统会为每一个应用分配唯一的UID. 相同UID的应用才能共享数据. 但是两个应用通过ShareUID跑在同一个进程是有要求的. 除了具有相同的ShareUID并且还要签名相同才可以. 这时如果不在同一进程他们之间可以共享data目录,组件信息等. 如果还在同一进程, 那么他们还能共享内存数据.</p>\n<h4 id=\"进程模式的运行机制\"><a href=\"#进程模式的运行机制\" class=\"headerlink\" title=\"进程模式的运行机制\"></a>进程模式的运行机制</h4><p>两个进程间,每个单独的进程又会分配一个独立的虚拟机, 所以每个虚拟机在内存分配上有不同的地址空间.对于不同虚拟机访问同一个对象就会产生多份副本. 副本之间互相独立不干扰彼此.</p>\n<p>我们需要注意的问题</p>\n<ul>\n<li>静态成员和单例模式完全失效</li>\n<li>线程同步机制完全失效</li>\n<li>SharedPreferences的可靠性下降</li>\n<li>Application会多次创建</li>\n</ul>\n<p>1.如果在FristActivity中对静态变量进行修改, 在SecondActivity取出这个静态发现是FristActivity没修改之前的.<br>2.因为不是一块内存,所以不管是锁对象还是锁全局都无法保证线程同步,因为不是同一个对象.<br>3.因为Sp不支持两个进程同时读写,因为底层是通过读写XML文件实现的,并发可能会触发异常.<br>4.运行在多个进程中,那么就会创建多个虚拟机,每个虚拟机都有一个对应Application并需要启动加载这个文件.</p>\n<p>一个应用的多进程:<strong>它就相当于两个不同的应用采用了ShareUID的模式. 每个进程都会拥有独立的虚拟机, Application以及内存空间</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/android_ipc_01.jpg\" alt=\"\"> </p>\n<h4 id=\"开启多进程模式\"><a href=\"#开启多进程模式\" class=\"headerlink\" title=\"开启多进程模式\"></a>开启多进程模式</h4><p>如果你想在一个应用中使用多个进程,通过清单文件给四大组件添加android:process属性,就可以很方便的开启多进程.<br>还有一种非常规的创建方式,通过JNI在native层去fork一个新的进程.这种我们暂时只是了解一下.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">package</span>=<span class=\"string\">\"com.wudi.demo\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></span></div><div class=\"line\">        <span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_launcher\"</span></div><div class=\"line\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span></div><div class=\"line\">        <span class=\"attr\">android:supportsRtl</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/AppTheme\"</span>&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".FristActivity\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".SecondActivity\"</span></span></div><div class=\"line\">            <span class=\"attr\">android:process</span>=<span class=\"string\">\":second\"</span>&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".ThirdActivity\"</span></span></div><div class=\"line\">            <span class=\"attr\">android:process</span>=<span class=\"string\">\"com.third.demo\"</span>&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>当我们依次打开FristActivity, SecondActivity, ThirdActivity.此时应该打开了三个进程.</p>\n<p>那么命令行中进行测试<br><code>adb shell ps</code>可以把系统所有进程展示出来, 你可以加上过滤信息<code>| grep xxx xxx</code>替换你需要过滤出来信息,这里我们使用<code>adb shell ps | grep com.wudi</code>,结果为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">u0_a512   13555 533   1715032 47068 SyS_epoll_ 0000000000 S com.wudi.demo</div><div class=\"line\">u0_a512   13585 533   1715032 47208 SyS_epoll_ 0000000000 S com.wudi.demo:second</div><div class=\"line\">u0_a512   13625 533   1894268 61276 SyS_epoll_ 0000000000 S com.wudi.third</div></pre></td></tr></table></figure>\n<p>这里需要注意的是：</p>\n<ul>\n<li>当以<code>:</code>开头的进程,属于当前应用的私有进程,其他应用的组件不可以和它跑在同一个进程</li>\n<li>当不以<code>:</code>开头,那么进程属于全局进程,其他应用通过ShareUID方法可以和它跑在同一个进程</li>\n</ul>\n<p>Android系统会为每一个应用分配唯一的UID. 相同UID的应用才能共享数据. 但是两个应用通过ShareUID跑在同一个进程是有要求的. 除了具有相同的ShareUID并且还要签名相同才可以. 这时如果不在同一进程他们之间可以共享data目录,组件信息等. 如果还在同一进程, 那么他们还能共享内存数据.</p>\n<h4 id=\"进程模式的运行机制\"><a href=\"#进程模式的运行机制\" class=\"headerlink\" title=\"进程模式的运行机制\"></a>进程模式的运行机制</h4><p>两个进程间,每个单独的进程又会分配一个独立的虚拟机, 所以每个虚拟机在内存分配上有不同的地址空间.对于不同虚拟机访问同一个对象就会产生多份副本. 副本之间互相独立不干扰彼此.</p>\n<p>我们需要注意的问题</p>\n<ul>\n<li>静态成员和单例模式完全失效</li>\n<li>线程同步机制完全失效</li>\n<li>SharedPreferences的可靠性下降</li>\n<li>Application会多次创建</li>\n</ul>\n<p>1.如果在FristActivity中对静态变量进行修改, 在SecondActivity取出这个静态发现是FristActivity没修改之前的.<br>2.因为不是一块内存,所以不管是锁对象还是锁全局都无法保证线程同步,因为不是同一个对象.<br>3.因为Sp不支持两个进程同时读写,因为底层是通过读写XML文件实现的,并发可能会触发异常.<br>4.运行在多个进程中,那么就会创建多个虚拟机,每个虚拟机都有一个对应Application并需要启动加载这个文件.</p>\n<p>一个应用的多进程:<strong>它就相当于两个不同的应用采用了ShareUID的模式. 每个进程都会拥有独立的虚拟机, Application以及内存空间</strong></p>\n"},{"layout":"post","title":"Android热修复技术之Java代理模式","date":"2017-03-27T16:00:00.000Z","_content":"#### 概念\n**代理模式**是一种比较常用的设计模式，一般来说，当我们不想或者不能直接访问一个对象A，必须通过一个中介对象B来访问，这种方式就叫做代理模式。\t\n\n#### 优点\n- 隐藏委托类的实现，调用者需要和代理类交互\n- 解耦，在不改变委托类代码情况下可以做一些额外处理。\n\n#### 区分\n- **静态代理**\n\n\t代理类的字节码文件，代理类和委托类的关系 在运行之前就已经确定了。\n\t\n\t代理接口定义：\n\t\n\t\tpublic interface Subject {\n\t\t    void m1();\n\t\t    void m2();\n\t\t}\n\t\n\t代理委托者，实现了代理接口：\n\t\n\t\tpublic class RealSubject implements Subject{\n\t\t    @Override\n\t\t    public void m1() {\n\t\t\tSystemClock.sleep(1000);\n\t\t\tLog.d(\"DEBUG\",\"##### call method 1\");\n\t\t    }\n\t\t    @Override\n\t\t    public void m2() {\n\t\t\tSystemClock.sleep(2000);\n\t\t\tLog.d(\"DEBUG\",\"##### call method 2\");\n\t\t    }\n\t\t}\n\t\t\n\t代理类：\n\t\n\t\tpublic class ProxySubject implements Subject {\n\t\t    //引用真正的实现类\n\t\t    private RealSubject subject;\n\t\t    @Override\n\t\t    public void m1() {\n\t\t\tlog();\n\t\t\tif (null == subject) {\n\t\t\t    subject = new RealSubject();\n\t\t\t}\n\t\t\tsubject.m1();\n\t\t    }\n\t\t    @Override\n\t\t    public void m2() {\n\t\t\tif (null == subject) {\n\t\t\t    subject = new RealSubject();\n\t\t\t}\n\t\t\tsubject.m2();\n\t\t\tlog();\n\t\t    }\n\t\t    private void log() {\n\t\t\tLog.d(\"DEBUG\", \"### log it\");\n\t\t    }\n\t\t}\n\t\t\n\t代理类通过引用，去调用真实对象的方法，在代理类方法中可以加入一些其他操作，比如日志操作等。\n\t\n- **动态代理**\n\n\t当我们遇到要代理的方法比较多。比方说，我们在接口中增加一个方法，除了委托类要实现这个方法，代理类也要实现这个方法，感觉上就非常难受。\n\t那我们就需要一个代理类完成所有的代理功能，或者动态的生成代理类，就需要动态代理。\n\t\n\t- 实现步骤\n\t\n\t\t1. 创建一个实现InvocationHandler的类，实现invoke方法\n\t\t2. 通过Proxy的newProxyInstance创建一个代理\n\t\t3. 创建代理类的接口\n\t\t4. 通过代理调用方法\n\t\t\n\t\t\n\t- 根据步骤我们分别创建Subject和RealSubject\n\t\tSubject：\n\t\n\t\t\tpackage ProxyMode;\n\t\t\t/*\n\t\t\t * 抽象接口，对应类图中的Subject\n\t\t\t * \n\t\t\t */\n\t\t\tpublic interface Subject {\n\t\t\t    public void SujectShow();\n\t\t\t}\n\t\t\t\n\t\tRealSubject：\n\n\t\t\tpackage ProxyMode;\n\t\t\tpublic class RealSubject implements Subject{\n\t\t\t    @Override\n\t\t\t    public void SujectShow() {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\tSystem.out.println(\"我才是真正的操作，我是黑衣人！By---\"+getClass());\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t- 建立InvocationHandler用来响应代理的任何调用\n\n\t\t\tpackage ProxyMode;\n\n\t\t\timport java.lang.reflect.InvocationHandler;\n\t\t\timport java.lang.reflect.Method;\n\n\t\t\tpublic class ProxyHandler implements InvocationHandler {\n\n\t\t\t    private Object proxied;   \n\n\t\t\t      public ProxyHandler( Object proxied )   \n\t\t\t      {   \n\t\t\t\t\tthis.proxied = proxied;   \n\t\t\t      }   \n\n\n\t\t\t    @Override\n\t\t\t    public Object invoke(Object proxy, Method method, Object[] args)\n\t\t\t\t    throws Throwable {\n\n\t\t\t\t  System.out.println(\"准备工作之前：\");\n\n\t\t\t\t//转调具体目标对象的方法\n\t\t\t\t  Object object=   method.invoke( proxied, args);\n\n\t\t\t\t  System.out.println(\"工作已经做完了！\");\n\t\t\t\t  return object;\n\t\t\t    }\n\n\t\t\t}\n\t\t\t\n\t- 测试\n\t\n\t\t\tpackage ProxyMode;\n\n\n\t\t\timport java.lang.reflect.Proxy;\n\n\t\t\tpublic class DynamicProxy  {\n\n\t\t\t    public static void main( String args[] )   \n\t\t\t      {   \n\t\t\t\tRealSubject real = new RealSubject();   \n\t\t\t\tSubject proxySubject = (Subject)Proxy.newProxyInstance(Subject.class.getClassLoader(), \n\t\t\t\t new Class[]{Subject.class}, \n\t\t\t\t new ProxyHandler(real));\n\n\t\t\t\tproxySubject.SujectShow();;\n\n\t\t\t      }   \n\t\t\t}\n\t\t\t\n\t- 测试结果\n\t\n\t\t\t准备工作之前：\n\t\t\t我才是真正的操作，我是黑衣人！By---class ProxyMode.RealSubject\n\t\t\t工作已经做完了！\n\t\t\t\n\n\n\n\n\n","source":"_posts/Android热修复技术之Java代理模式（持续更新）.md","raw":"---\nlayout: post\ntitle:  \"Android热修复技术之Java代理模式\"\ndate:   2017-03-28\ncategories: [Android,设计模式]\ntags: [Android,Java]\n---\n#### 概念\n**代理模式**是一种比较常用的设计模式，一般来说，当我们不想或者不能直接访问一个对象A，必须通过一个中介对象B来访问，这种方式就叫做代理模式。\t\n\n#### 优点\n- 隐藏委托类的实现，调用者需要和代理类交互\n- 解耦，在不改变委托类代码情况下可以做一些额外处理。\n\n#### 区分\n- **静态代理**\n\n\t代理类的字节码文件，代理类和委托类的关系 在运行之前就已经确定了。\n\t\n\t代理接口定义：\n\t\n\t\tpublic interface Subject {\n\t\t    void m1();\n\t\t    void m2();\n\t\t}\n\t\n\t代理委托者，实现了代理接口：\n\t\n\t\tpublic class RealSubject implements Subject{\n\t\t    @Override\n\t\t    public void m1() {\n\t\t\tSystemClock.sleep(1000);\n\t\t\tLog.d(\"DEBUG\",\"##### call method 1\");\n\t\t    }\n\t\t    @Override\n\t\t    public void m2() {\n\t\t\tSystemClock.sleep(2000);\n\t\t\tLog.d(\"DEBUG\",\"##### call method 2\");\n\t\t    }\n\t\t}\n\t\t\n\t代理类：\n\t\n\t\tpublic class ProxySubject implements Subject {\n\t\t    //引用真正的实现类\n\t\t    private RealSubject subject;\n\t\t    @Override\n\t\t    public void m1() {\n\t\t\tlog();\n\t\t\tif (null == subject) {\n\t\t\t    subject = new RealSubject();\n\t\t\t}\n\t\t\tsubject.m1();\n\t\t    }\n\t\t    @Override\n\t\t    public void m2() {\n\t\t\tif (null == subject) {\n\t\t\t    subject = new RealSubject();\n\t\t\t}\n\t\t\tsubject.m2();\n\t\t\tlog();\n\t\t    }\n\t\t    private void log() {\n\t\t\tLog.d(\"DEBUG\", \"### log it\");\n\t\t    }\n\t\t}\n\t\t\n\t代理类通过引用，去调用真实对象的方法，在代理类方法中可以加入一些其他操作，比如日志操作等。\n\t\n- **动态代理**\n\n\t当我们遇到要代理的方法比较多。比方说，我们在接口中增加一个方法，除了委托类要实现这个方法，代理类也要实现这个方法，感觉上就非常难受。\n\t那我们就需要一个代理类完成所有的代理功能，或者动态的生成代理类，就需要动态代理。\n\t\n\t- 实现步骤\n\t\n\t\t1. 创建一个实现InvocationHandler的类，实现invoke方法\n\t\t2. 通过Proxy的newProxyInstance创建一个代理\n\t\t3. 创建代理类的接口\n\t\t4. 通过代理调用方法\n\t\t\n\t\t\n\t- 根据步骤我们分别创建Subject和RealSubject\n\t\tSubject：\n\t\n\t\t\tpackage ProxyMode;\n\t\t\t/*\n\t\t\t * 抽象接口，对应类图中的Subject\n\t\t\t * \n\t\t\t */\n\t\t\tpublic interface Subject {\n\t\t\t    public void SujectShow();\n\t\t\t}\n\t\t\t\n\t\tRealSubject：\n\n\t\t\tpackage ProxyMode;\n\t\t\tpublic class RealSubject implements Subject{\n\t\t\t    @Override\n\t\t\t    public void SujectShow() {\n\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\tSystem.out.println(\"我才是真正的操作，我是黑衣人！By---\"+getClass());\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t- 建立InvocationHandler用来响应代理的任何调用\n\n\t\t\tpackage ProxyMode;\n\n\t\t\timport java.lang.reflect.InvocationHandler;\n\t\t\timport java.lang.reflect.Method;\n\n\t\t\tpublic class ProxyHandler implements InvocationHandler {\n\n\t\t\t    private Object proxied;   \n\n\t\t\t      public ProxyHandler( Object proxied )   \n\t\t\t      {   \n\t\t\t\t\tthis.proxied = proxied;   \n\t\t\t      }   \n\n\n\t\t\t    @Override\n\t\t\t    public Object invoke(Object proxy, Method method, Object[] args)\n\t\t\t\t    throws Throwable {\n\n\t\t\t\t  System.out.println(\"准备工作之前：\");\n\n\t\t\t\t//转调具体目标对象的方法\n\t\t\t\t  Object object=   method.invoke( proxied, args);\n\n\t\t\t\t  System.out.println(\"工作已经做完了！\");\n\t\t\t\t  return object;\n\t\t\t    }\n\n\t\t\t}\n\t\t\t\n\t- 测试\n\t\n\t\t\tpackage ProxyMode;\n\n\n\t\t\timport java.lang.reflect.Proxy;\n\n\t\t\tpublic class DynamicProxy  {\n\n\t\t\t    public static void main( String args[] )   \n\t\t\t      {   \n\t\t\t\tRealSubject real = new RealSubject();   \n\t\t\t\tSubject proxySubject = (Subject)Proxy.newProxyInstance(Subject.class.getClassLoader(), \n\t\t\t\t new Class[]{Subject.class}, \n\t\t\t\t new ProxyHandler(real));\n\n\t\t\t\tproxySubject.SujectShow();;\n\n\t\t\t      }   \n\t\t\t}\n\t\t\t\n\t- 测试结果\n\t\n\t\t\t准备工作之前：\n\t\t\t我才是真正的操作，我是黑衣人！By---class ProxyMode.RealSubject\n\t\t\t工作已经做完了！\n\t\t\t\n\n\n\n\n\n","slug":"Android热修复技术之Java代理模式（持续更新）","published":1,"updated":"2017-12-26T05:14:25.499Z","comments":1,"photos":[],"link":"","_id":"cjboyl4x8000g1ctmiz1pezal","content":"<h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p><strong>代理模式</strong>是一种比较常用的设计模式，一般来说，当我们不想或者不能直接访问一个对象A，必须通过一个中介对象B来访问，这种方式就叫做代理模式。    </p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>隐藏委托类的实现，调用者需要和代理类交互</li>\n<li>解耦，在不改变委托类代码情况下可以做一些额外处理。</li>\n</ul>\n<h4 id=\"区分\"><a href=\"#区分\" class=\"headerlink\" title=\"区分\"></a>区分</h4><ul>\n<li><p><strong>静态代理</strong></p>\n<p>  代理类的字节码文件，代理类和委托类的关系 在运行之前就已经确定了。</p>\n<p>  代理接口定义：</p>\n<pre><code>public interface Subject {\n    void m1();\n    void m2();\n}\n</code></pre><p>  代理委托者，实现了代理接口：</p>\n<pre><code>public class RealSubject implements Subject{\n    @Override\n    public void m1() {\n    SystemClock.sleep(1000);\n    Log.d(&quot;DEBUG&quot;,&quot;##### call method 1&quot;);\n    }\n    @Override\n    public void m2() {\n    SystemClock.sleep(2000);\n    Log.d(&quot;DEBUG&quot;,&quot;##### call method 2&quot;);\n    }\n}\n</code></pre><p>  代理类：</p>\n<pre><code>public class ProxySubject implements Subject {\n    //引用真正的实现类\n    private RealSubject subject;\n    @Override\n    public void m1() {\n    log();\n    if (null == subject) {\n        subject = new RealSubject();\n    }\n    subject.m1();\n    }\n    @Override\n    public void m2() {\n    if (null == subject) {\n        subject = new RealSubject();\n    }\n    subject.m2();\n    log();\n    }\n    private void log() {\n    Log.d(&quot;DEBUG&quot;, &quot;### log it&quot;);\n    }\n}\n</code></pre><p>  代理类通过引用，去调用真实对象的方法，在代理类方法中可以加入一些其他操作，比如日志操作等。</p>\n</li>\n<li><p><strong>动态代理</strong></p>\n<p>  当我们遇到要代理的方法比较多。比方说，我们在接口中增加一个方法，除了委托类要实现这个方法，代理类也要实现这个方法，感觉上就非常难受。<br>  那我们就需要一个代理类完成所有的代理功能，或者动态的生成代理类，就需要动态代理。</p>\n<ul>\n<li><p>实现步骤</p>\n<ol>\n<li>创建一个实现InvocationHandler的类，实现invoke方法</li>\n<li>通过Proxy的newProxyInstance创建一个代理</li>\n<li>创建代理类的接口</li>\n<li>通过代理调用方法</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>- 根据步骤我们分别创建Subject和RealSubject\n    Subject：\n\n        package ProxyMode;\n        /*\n         * 抽象接口，对应类图中的Subject\n         * \n         */\n        public interface Subject {\n            public void SujectShow();\n        }\n\n    RealSubject：\n\n        package ProxyMode;\n        public class RealSubject implements Subject{\n            @Override\n            public void SujectShow() {\n            // TODO Auto-generated method stub\n            System.out.println(&quot;我才是真正的操作，我是黑衣人！By---&quot;+getClass());\n            }\n        }\n\n- 建立InvocationHandler用来响应代理的任何调用\n\n        package ProxyMode;\n\n        import java.lang.reflect.InvocationHandler;\n        import java.lang.reflect.Method;\n\n        public class ProxyHandler implements InvocationHandler {\n\n            private Object proxied;   \n\n              public ProxyHandler( Object proxied )   \n              {   \n                this.proxied = proxied;   \n              }   \n\n\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args)\n                throws Throwable {\n\n              System.out.println(&quot;准备工作之前：&quot;);\n\n            //转调具体目标对象的方法\n              Object object=   method.invoke( proxied, args);\n\n              System.out.println(&quot;工作已经做完了！&quot;);\n              return object;\n            }\n\n        }\n\n- 测试\n\n        package ProxyMode;\n\n\n        import java.lang.reflect.Proxy;\n\n        public class DynamicProxy  {\n\n            public static void main( String args[] )   \n              {   \n            RealSubject real = new RealSubject();   \n            Subject proxySubject = (Subject)Proxy.newProxyInstance(Subject.class.getClassLoader(), \n             new Class[]{Subject.class}, \n             new ProxyHandler(real));\n\n            proxySubject.SujectShow();;\n\n              }   \n        }\n\n- 测试结果\n\n        准备工作之前：\n        我才是真正的操作，我是黑衣人！By---class ProxyMode.RealSubject\n        工作已经做完了！\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><p><strong>代理模式</strong>是一种比较常用的设计模式，一般来说，当我们不想或者不能直接访问一个对象A，必须通过一个中介对象B来访问，这种方式就叫做代理模式。    </p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>隐藏委托类的实现，调用者需要和代理类交互</li>\n<li>解耦，在不改变委托类代码情况下可以做一些额外处理。</li>\n</ul>\n<h4 id=\"区分\"><a href=\"#区分\" class=\"headerlink\" title=\"区分\"></a>区分</h4><ul>\n<li><p><strong>静态代理</strong></p>\n<p>  代理类的字节码文件，代理类和委托类的关系 在运行之前就已经确定了。</p>\n<p>  代理接口定义：</p>\n<pre><code>public interface Subject {\n    void m1();\n    void m2();\n}\n</code></pre><p>  代理委托者，实现了代理接口：</p>\n<pre><code>public class RealSubject implements Subject{\n    @Override\n    public void m1() {\n    SystemClock.sleep(1000);\n    Log.d(&quot;DEBUG&quot;,&quot;##### call method 1&quot;);\n    }\n    @Override\n    public void m2() {\n    SystemClock.sleep(2000);\n    Log.d(&quot;DEBUG&quot;,&quot;##### call method 2&quot;);\n    }\n}\n</code></pre><p>  代理类：</p>\n<pre><code>public class ProxySubject implements Subject {\n    //引用真正的实现类\n    private RealSubject subject;\n    @Override\n    public void m1() {\n    log();\n    if (null == subject) {\n        subject = new RealSubject();\n    }\n    subject.m1();\n    }\n    @Override\n    public void m2() {\n    if (null == subject) {\n        subject = new RealSubject();\n    }\n    subject.m2();\n    log();\n    }\n    private void log() {\n    Log.d(&quot;DEBUG&quot;, &quot;### log it&quot;);\n    }\n}\n</code></pre><p>  代理类通过引用，去调用真实对象的方法，在代理类方法中可以加入一些其他操作，比如日志操作等。</p>\n</li>\n<li><p><strong>动态代理</strong></p>\n<p>  当我们遇到要代理的方法比较多。比方说，我们在接口中增加一个方法，除了委托类要实现这个方法，代理类也要实现这个方法，感觉上就非常难受。<br>  那我们就需要一个代理类完成所有的代理功能，或者动态的生成代理类，就需要动态代理。</p>\n<ul>\n<li><p>实现步骤</p>\n<ol>\n<li>创建一个实现InvocationHandler的类，实现invoke方法</li>\n<li>通过Proxy的newProxyInstance创建一个代理</li>\n<li>创建代理类的接口</li>\n<li>通过代理调用方法</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>- 根据步骤我们分别创建Subject和RealSubject\n    Subject：\n\n        package ProxyMode;\n        /*\n         * 抽象接口，对应类图中的Subject\n         * \n         */\n        public interface Subject {\n            public void SujectShow();\n        }\n\n    RealSubject：\n\n        package ProxyMode;\n        public class RealSubject implements Subject{\n            @Override\n            public void SujectShow() {\n            // TODO Auto-generated method stub\n            System.out.println(&quot;我才是真正的操作，我是黑衣人！By---&quot;+getClass());\n            }\n        }\n\n- 建立InvocationHandler用来响应代理的任何调用\n\n        package ProxyMode;\n\n        import java.lang.reflect.InvocationHandler;\n        import java.lang.reflect.Method;\n\n        public class ProxyHandler implements InvocationHandler {\n\n            private Object proxied;   \n\n              public ProxyHandler( Object proxied )   \n              {   \n                this.proxied = proxied;   \n              }   \n\n\n            @Override\n            public Object invoke(Object proxy, Method method, Object[] args)\n                throws Throwable {\n\n              System.out.println(&quot;准备工作之前：&quot;);\n\n            //转调具体目标对象的方法\n              Object object=   method.invoke( proxied, args);\n\n              System.out.println(&quot;工作已经做完了！&quot;);\n              return object;\n            }\n\n        }\n\n- 测试\n\n        package ProxyMode;\n\n\n        import java.lang.reflect.Proxy;\n\n        public class DynamicProxy  {\n\n            public static void main( String args[] )   \n              {   \n            RealSubject real = new RealSubject();   \n            Subject proxySubject = (Subject)Proxy.newProxyInstance(Subject.class.getClassLoader(), \n             new Class[]{Subject.class}, \n             new ProxyHandler(real));\n\n            proxySubject.SujectShow();;\n\n              }   \n        }\n\n- 测试结果\n\n        准备工作之前：\n        我才是真正的操作，我是黑衣人！By---class ProxyMode.RealSubject\n        工作已经做完了！\n</code></pre>"},{"layout":"post","title":"Android自定义View之事件分发机制","date":"2016-08-26T16:00:00.000Z","_content":"Q：为什么有时间分发机制？\n\nA：安卓View是树形结构，会重叠在一起，为了处理点击，滑动等交互冲突\n\n<hr>\n\n未完待续...\n\n\n\n\n\n","source":"_posts/Android自定义View之事件分发机制.md","raw":"---\nlayout: post\ntitle:  \"Android自定义View之事件分发机制\"\ndate:   2016-08-27 \ncategories: [Android,UI]\ntags: [Android]\n---\nQ：为什么有时间分发机制？\n\nA：安卓View是树形结构，会重叠在一起，为了处理点击，滑动等交互冲突\n\n<hr>\n\n未完待续...\n\n\n\n\n\n","slug":"Android自定义View之事件分发机制","published":1,"updated":"2017-12-26T05:14:25.500Z","comments":1,"photos":[],"link":"","_id":"cjboyl4xb000i1ctmpehawurd","content":"<p>Q：为什么有时间分发机制？</p>\n<p>A：安卓View是树形结构，会重叠在一起，为了处理点击，滑动等交互冲突</p>\n<hr>\n\n<p>未完待续…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Q：为什么有时间分发机制？</p>\n<p>A：安卓View是树形结构，会重叠在一起，为了处理点击，滑动等交互冲突</p>\n<hr>\n\n<p>未完待续…</p>\n"},{"layout":"post","title":"JavaSpcript常用互动方法","date":"2017-01-15T16:00:00.000Z","_content":"#### 1.输出内容\n\ndocument.write() 可用于直接向HEML输出流写内容。简单的说就是直接在网页中输出内容\n\n 1.1 第一种：输出内容用“”括起，直接输出“”号内的内容\n\n\t<script type=\"text/javascript\">\n\t  document.write(\"I love JavaScript！\"); //内容用\"\"括起来，\"\"里的内容直接输出。\n\t</script>\n\n 1.2 第二种：通过变量，输出内容\n\n\t<script type=\"text/javascript\">\n\t  var mystr=\"hello world!\";\n\t  document.write(mystr);  //直接写变量名，输出变量存储的内容。\n\t</script>\n \n 1.3 第三种：输出多项内容，内容之间用+连接\n\n\t<script type=\"text/javascript\">\n\t  var mystr=\"hello\";\n\t  document.write(mystr+\"I love JavaScript\"); //多项内容之间用+号连接\n\t</script>\n\n 1.4 第四中：输出HTML标签，并起作用，标签使用“”括起来\n\n\t<script type=\"text/javascript\">\n\t  var mystr=\"hello\";\n\tdocument.write(mystr+\"<br>\");//输出hello后，输出一个换行符\n\t  document.write(\"JavaScript\");\n\t</script>\n\n 注意：\n\t\n\t空格使用&nbsp;\n#### 2.alert消息对话框\n\n我们在访问网站的时候，有时候会突然弹出一个小窗口，上面写着一段提示文字。\n\n语法：\n\n\talert(字符串或变量);  \n\ndemo：\n\n\t<!DOCTYPE HTML>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<title>alert</title>\n\t  <script type=\"text/javascript\">\n\t  function rec(){\n\t  var mychar=\"I love JavaScript\";\n\t  alert(mychar);\n\t  }\n\t  </script>\n\t</head>\n\t<body>\n\t  <input name=\"button\" type=\"button\" onClick=\"rec()\" value=\"点击我，弹出对话框\" />\n\t</body>\n\t</html>\n#### 3.confirm消息对话框\n\nconfirm消息对话框通常用于允许用户做选择的动作，如：“你对吗”等，弹出对话框（包括一个确定按钮和一个取消按钮）\n\n语法：\n\n\tconfirm(str);\n\n参数说明：\n\n\tstr：在消息对话框中要显示的文本\n\t返回值: Boolean值\n\n返回值：\n\n\t当用户点击\"确定\"按钮时，返回true\n\t当用户点击\"取消\"按钮时，返回false\n\ndemo：\n\n\t<script type=\"text/javascript\">\n\t    var mymessage=confirm(\"你喜欢JavaScript吗?\");\n\t    if(mymessage==true)\n\t    {   document.write(\"很好,加油!\");   }\n\t    else\n\t    {  document.write(\"JS功能强大，要学习噢!\");   }\n\t</script>\n\n注意：\n\n\t消息对话框是排斥其他操作的，即用户在点击对话框按钮前，不能进行任何其它的操作\n\n#### 4.prompt消息对话框\n\nprompt弹出消息对话框，通常用于询问一些需要与用户交互的信息，弹出消息对话框（包含一个确定按钮，取消按钮与一个文本输入框）\n\n语法：\n\n\tprompt(str1, str2);\n\n参数说明：\n\n\tstr1: 要显示在消息对话框中的文本，不可修改\n\tstr2：文本框中的内容，可以修改\n\n返回值：\n\n\t1. 点击确定按钮，文本框中的内容将作为函数返回值\n\t2. 点击取消按钮，将返回null\n\ndemo：\n\n\tvar myname=prompt(\"请输入你的姓名:\");\n\tif(myname!=null)\n\t  {   alert(\"你好\"+myname); }\n\telse\n\t  {  alert(\"你好 my friend.\");  }\n\n#### 5.打开新窗口window.open\nopen()方法可以查找一个已经存在或者新建的浏览器窗口\n\n语法：\n\n\twindow.open([URL], [窗口名称], [参数字符串])\n\n参数说明：\n\n\tURL：可选参数，在窗口中要显示网页的网址或路径。如果省略这个参数，或者它的值是空字符串，那么窗口就不显示任何文档。\n\t窗口名称：可选参数，被打开窗口的名称。\n\t    1.该名称由字母、数字和下划线字符组成。\n\t    2.\"_top\"、\"_blank\"、\"_self\"具有特殊意义的名称。\n\t      _blank：在新窗口显示目标网页\n\t      _self：在当前窗口显示目标网页\n\t      _top：框架网页中在上部窗口中显示目标网页\n\t    3.相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。\n\t    4.name 不能包含有空格。\n参数字符串：\n\t\n\t可选参数，设置窗口参数，各参数用逗号隔开。\n\n#### 6.关闭窗口window.close\nclose()关闭窗口\n\n用法：\n\t\n\twindow.close();   //关闭本窗口\n\t或\n\t<窗口对象>.close();   //关闭指定的窗口\n\ndemo：\n\n\t<script type=\"text/javascript\">\n\t   var mywin=window.open('http://www.imooc.com'); //将新打的窗口对象，存储在变量mywin中\n\t   mywin.close();\n\t</script>\n\n\n\n\n\n\n\n","source":"_posts/JavaSpcript常用互动方法.md","raw":"---\nlayout: post\ntitle:  \"JavaSpcript常用互动方法\"\ndate:   2017-01-16 \ncategories: [JS,基础]\ntags: [JS]\n---\n#### 1.输出内容\n\ndocument.write() 可用于直接向HEML输出流写内容。简单的说就是直接在网页中输出内容\n\n 1.1 第一种：输出内容用“”括起，直接输出“”号内的内容\n\n\t<script type=\"text/javascript\">\n\t  document.write(\"I love JavaScript！\"); //内容用\"\"括起来，\"\"里的内容直接输出。\n\t</script>\n\n 1.2 第二种：通过变量，输出内容\n\n\t<script type=\"text/javascript\">\n\t  var mystr=\"hello world!\";\n\t  document.write(mystr);  //直接写变量名，输出变量存储的内容。\n\t</script>\n \n 1.3 第三种：输出多项内容，内容之间用+连接\n\n\t<script type=\"text/javascript\">\n\t  var mystr=\"hello\";\n\t  document.write(mystr+\"I love JavaScript\"); //多项内容之间用+号连接\n\t</script>\n\n 1.4 第四中：输出HTML标签，并起作用，标签使用“”括起来\n\n\t<script type=\"text/javascript\">\n\t  var mystr=\"hello\";\n\tdocument.write(mystr+\"<br>\");//输出hello后，输出一个换行符\n\t  document.write(\"JavaScript\");\n\t</script>\n\n 注意：\n\t\n\t空格使用&nbsp;\n#### 2.alert消息对话框\n\n我们在访问网站的时候，有时候会突然弹出一个小窗口，上面写着一段提示文字。\n\n语法：\n\n\talert(字符串或变量);  \n\ndemo：\n\n\t<!DOCTYPE HTML>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<title>alert</title>\n\t  <script type=\"text/javascript\">\n\t  function rec(){\n\t  var mychar=\"I love JavaScript\";\n\t  alert(mychar);\n\t  }\n\t  </script>\n\t</head>\n\t<body>\n\t  <input name=\"button\" type=\"button\" onClick=\"rec()\" value=\"点击我，弹出对话框\" />\n\t</body>\n\t</html>\n#### 3.confirm消息对话框\n\nconfirm消息对话框通常用于允许用户做选择的动作，如：“你对吗”等，弹出对话框（包括一个确定按钮和一个取消按钮）\n\n语法：\n\n\tconfirm(str);\n\n参数说明：\n\n\tstr：在消息对话框中要显示的文本\n\t返回值: Boolean值\n\n返回值：\n\n\t当用户点击\"确定\"按钮时，返回true\n\t当用户点击\"取消\"按钮时，返回false\n\ndemo：\n\n\t<script type=\"text/javascript\">\n\t    var mymessage=confirm(\"你喜欢JavaScript吗?\");\n\t    if(mymessage==true)\n\t    {   document.write(\"很好,加油!\");   }\n\t    else\n\t    {  document.write(\"JS功能强大，要学习噢!\");   }\n\t</script>\n\n注意：\n\n\t消息对话框是排斥其他操作的，即用户在点击对话框按钮前，不能进行任何其它的操作\n\n#### 4.prompt消息对话框\n\nprompt弹出消息对话框，通常用于询问一些需要与用户交互的信息，弹出消息对话框（包含一个确定按钮，取消按钮与一个文本输入框）\n\n语法：\n\n\tprompt(str1, str2);\n\n参数说明：\n\n\tstr1: 要显示在消息对话框中的文本，不可修改\n\tstr2：文本框中的内容，可以修改\n\n返回值：\n\n\t1. 点击确定按钮，文本框中的内容将作为函数返回值\n\t2. 点击取消按钮，将返回null\n\ndemo：\n\n\tvar myname=prompt(\"请输入你的姓名:\");\n\tif(myname!=null)\n\t  {   alert(\"你好\"+myname); }\n\telse\n\t  {  alert(\"你好 my friend.\");  }\n\n#### 5.打开新窗口window.open\nopen()方法可以查找一个已经存在或者新建的浏览器窗口\n\n语法：\n\n\twindow.open([URL], [窗口名称], [参数字符串])\n\n参数说明：\n\n\tURL：可选参数，在窗口中要显示网页的网址或路径。如果省略这个参数，或者它的值是空字符串，那么窗口就不显示任何文档。\n\t窗口名称：可选参数，被打开窗口的名称。\n\t    1.该名称由字母、数字和下划线字符组成。\n\t    2.\"_top\"、\"_blank\"、\"_self\"具有特殊意义的名称。\n\t      _blank：在新窗口显示目标网页\n\t      _self：在当前窗口显示目标网页\n\t      _top：框架网页中在上部窗口中显示目标网页\n\t    3.相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。\n\t    4.name 不能包含有空格。\n参数字符串：\n\t\n\t可选参数，设置窗口参数，各参数用逗号隔开。\n\n#### 6.关闭窗口window.close\nclose()关闭窗口\n\n用法：\n\t\n\twindow.close();   //关闭本窗口\n\t或\n\t<窗口对象>.close();   //关闭指定的窗口\n\ndemo：\n\n\t<script type=\"text/javascript\">\n\t   var mywin=window.open('http://www.imooc.com'); //将新打的窗口对象，存储在变量mywin中\n\t   mywin.close();\n\t</script>\n\n\n\n\n\n\n\n","slug":"JavaSpcript常用互动方法","published":1,"updated":"2017-12-26T05:14:25.504Z","comments":1,"photos":[],"link":"","_id":"cjboyl4xd000m1ctmiie4jzbh","content":"<h4 id=\"1-输出内容\"><a href=\"#1-输出内容\" class=\"headerlink\" title=\"1.输出内容\"></a>1.输出内容</h4><p>document.write() 可用于直接向HEML输出流写内容。简单的说就是直接在网页中输出内容</p>\n<p> 1.1 第一种：输出内容用“”括起，直接输出“”号内的内容</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n  document.write(&quot;I love JavaScript！&quot;); //内容用&quot;&quot;括起来，&quot;&quot;里的内容直接输出。\n&lt;/script&gt;\n</code></pre><p> 1.2 第二种：通过变量，输出内容</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n  var mystr=&quot;hello world!&quot;;\n  document.write(mystr);  //直接写变量名，输出变量存储的内容。\n&lt;/script&gt;\n</code></pre><p> 1.3 第三种：输出多项内容，内容之间用+连接</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n  var mystr=&quot;hello&quot;;\n  document.write(mystr+&quot;I love JavaScript&quot;); //多项内容之间用+号连接\n&lt;/script&gt;\n</code></pre><p> 1.4 第四中：输出HTML标签，并起作用，标签使用“”括起来</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n  var mystr=&quot;hello&quot;;\ndocument.write(mystr+&quot;&lt;br&gt;&quot;);//输出hello后，输出一个换行符\n  document.write(&quot;JavaScript&quot;);\n&lt;/script&gt;\n</code></pre><p> 注意：</p>\n<pre><code>空格使用&amp;nbsp;\n</code></pre><h4 id=\"2-alert消息对话框\"><a href=\"#2-alert消息对话框\" class=\"headerlink\" title=\"2.alert消息对话框\"></a>2.alert消息对话框</h4><p>我们在访问网站的时候，有时候会突然弹出一个小窗口，上面写着一段提示文字。</p>\n<p>语法：</p>\n<pre><code>alert(字符串或变量);  \n</code></pre><p>demo：</p>\n<pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n&lt;title&gt;alert&lt;/title&gt;\n  &lt;script type=&quot;text/javascript&quot;&gt;\n  function rec(){\n  var mychar=&quot;I love JavaScript&quot;;\n  alert(mychar);\n  }\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;input name=&quot;button&quot; type=&quot;button&quot; onClick=&quot;rec()&quot; value=&quot;点击我，弹出对话框&quot; /&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h4 id=\"3-confirm消息对话框\"><a href=\"#3-confirm消息对话框\" class=\"headerlink\" title=\"3.confirm消息对话框\"></a>3.confirm消息对话框</h4><p>confirm消息对话框通常用于允许用户做选择的动作，如：“你对吗”等，弹出对话框（包括一个确定按钮和一个取消按钮）</p>\n<p>语法：</p>\n<pre><code>confirm(str);\n</code></pre><p>参数说明：</p>\n<pre><code>str：在消息对话框中要显示的文本\n返回值: Boolean值\n</code></pre><p>返回值：</p>\n<pre><code>当用户点击&quot;确定&quot;按钮时，返回true\n当用户点击&quot;取消&quot;按钮时，返回false\n</code></pre><p>demo：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n    var mymessage=confirm(&quot;你喜欢JavaScript吗?&quot;);\n    if(mymessage==true)\n    {   document.write(&quot;很好,加油!&quot;);   }\n    else\n    {  document.write(&quot;JS功能强大，要学习噢!&quot;);   }\n&lt;/script&gt;\n</code></pre><p>注意：</p>\n<pre><code>消息对话框是排斥其他操作的，即用户在点击对话框按钮前，不能进行任何其它的操作\n</code></pre><h4 id=\"4-prompt消息对话框\"><a href=\"#4-prompt消息对话框\" class=\"headerlink\" title=\"4.prompt消息对话框\"></a>4.prompt消息对话框</h4><p>prompt弹出消息对话框，通常用于询问一些需要与用户交互的信息，弹出消息对话框（包含一个确定按钮，取消按钮与一个文本输入框）</p>\n<p>语法：</p>\n<pre><code>prompt(str1, str2);\n</code></pre><p>参数说明：</p>\n<pre><code>str1: 要显示在消息对话框中的文本，不可修改\nstr2：文本框中的内容，可以修改\n</code></pre><p>返回值：</p>\n<pre><code>1. 点击确定按钮，文本框中的内容将作为函数返回值\n2. 点击取消按钮，将返回null\n</code></pre><p>demo：</p>\n<pre><code>var myname=prompt(&quot;请输入你的姓名:&quot;);\nif(myname!=null)\n  {   alert(&quot;你好&quot;+myname); }\nelse\n  {  alert(&quot;你好 my friend.&quot;);  }\n</code></pre><h4 id=\"5-打开新窗口window-open\"><a href=\"#5-打开新窗口window-open\" class=\"headerlink\" title=\"5.打开新窗口window.open\"></a>5.打开新窗口window.open</h4><p>open()方法可以查找一个已经存在或者新建的浏览器窗口</p>\n<p>语法：</p>\n<pre><code>window.open([URL], [窗口名称], [参数字符串])\n</code></pre><p>参数说明：</p>\n<pre><code>URL：可选参数，在窗口中要显示网页的网址或路径。如果省略这个参数，或者它的值是空字符串，那么窗口就不显示任何文档。\n窗口名称：可选参数，被打开窗口的名称。\n    1.该名称由字母、数字和下划线字符组成。\n    2.&quot;_top&quot;、&quot;_blank&quot;、&quot;_self&quot;具有特殊意义的名称。\n      _blank：在新窗口显示目标网页\n      _self：在当前窗口显示目标网页\n      _top：框架网页中在上部窗口中显示目标网页\n    3.相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。\n    4.name 不能包含有空格。\n</code></pre><p>参数字符串：</p>\n<pre><code>可选参数，设置窗口参数，各参数用逗号隔开。\n</code></pre><h4 id=\"6-关闭窗口window-close\"><a href=\"#6-关闭窗口window-close\" class=\"headerlink\" title=\"6.关闭窗口window.close\"></a>6.关闭窗口window.close</h4><p>close()关闭窗口</p>\n<p>用法：</p>\n<pre><code>window.close();   //关闭本窗口\n或\n&lt;窗口对象&gt;.close();   //关闭指定的窗口\n</code></pre><p>demo：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n   var mywin=window.open(&apos;http://www.imooc.com&apos;); //将新打的窗口对象，存储在变量mywin中\n   mywin.close();\n&lt;/script&gt;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-输出内容\"><a href=\"#1-输出内容\" class=\"headerlink\" title=\"1.输出内容\"></a>1.输出内容</h4><p>document.write() 可用于直接向HEML输出流写内容。简单的说就是直接在网页中输出内容</p>\n<p> 1.1 第一种：输出内容用“”括起，直接输出“”号内的内容</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n  document.write(&quot;I love JavaScript！&quot;); //内容用&quot;&quot;括起来，&quot;&quot;里的内容直接输出。\n&lt;/script&gt;\n</code></pre><p> 1.2 第二种：通过变量，输出内容</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n  var mystr=&quot;hello world!&quot;;\n  document.write(mystr);  //直接写变量名，输出变量存储的内容。\n&lt;/script&gt;\n</code></pre><p> 1.3 第三种：输出多项内容，内容之间用+连接</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n  var mystr=&quot;hello&quot;;\n  document.write(mystr+&quot;I love JavaScript&quot;); //多项内容之间用+号连接\n&lt;/script&gt;\n</code></pre><p> 1.4 第四中：输出HTML标签，并起作用，标签使用“”括起来</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n  var mystr=&quot;hello&quot;;\ndocument.write(mystr+&quot;&lt;br&gt;&quot;);//输出hello后，输出一个换行符\n  document.write(&quot;JavaScript&quot;);\n&lt;/script&gt;\n</code></pre><p> 注意：</p>\n<pre><code>空格使用&amp;nbsp;\n</code></pre><h4 id=\"2-alert消息对话框\"><a href=\"#2-alert消息对话框\" class=\"headerlink\" title=\"2.alert消息对话框\"></a>2.alert消息对话框</h4><p>我们在访问网站的时候，有时候会突然弹出一个小窗口，上面写着一段提示文字。</p>\n<p>语法：</p>\n<pre><code>alert(字符串或变量);  \n</code></pre><p>demo：</p>\n<pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n&lt;title&gt;alert&lt;/title&gt;\n  &lt;script type=&quot;text/javascript&quot;&gt;\n  function rec(){\n  var mychar=&quot;I love JavaScript&quot;;\n  alert(mychar);\n  }\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;input name=&quot;button&quot; type=&quot;button&quot; onClick=&quot;rec()&quot; value=&quot;点击我，弹出对话框&quot; /&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h4 id=\"3-confirm消息对话框\"><a href=\"#3-confirm消息对话框\" class=\"headerlink\" title=\"3.confirm消息对话框\"></a>3.confirm消息对话框</h4><p>confirm消息对话框通常用于允许用户做选择的动作，如：“你对吗”等，弹出对话框（包括一个确定按钮和一个取消按钮）</p>\n<p>语法：</p>\n<pre><code>confirm(str);\n</code></pre><p>参数说明：</p>\n<pre><code>str：在消息对话框中要显示的文本\n返回值: Boolean值\n</code></pre><p>返回值：</p>\n<pre><code>当用户点击&quot;确定&quot;按钮时，返回true\n当用户点击&quot;取消&quot;按钮时，返回false\n</code></pre><p>demo：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n    var mymessage=confirm(&quot;你喜欢JavaScript吗?&quot;);\n    if(mymessage==true)\n    {   document.write(&quot;很好,加油!&quot;);   }\n    else\n    {  document.write(&quot;JS功能强大，要学习噢!&quot;);   }\n&lt;/script&gt;\n</code></pre><p>注意：</p>\n<pre><code>消息对话框是排斥其他操作的，即用户在点击对话框按钮前，不能进行任何其它的操作\n</code></pre><h4 id=\"4-prompt消息对话框\"><a href=\"#4-prompt消息对话框\" class=\"headerlink\" title=\"4.prompt消息对话框\"></a>4.prompt消息对话框</h4><p>prompt弹出消息对话框，通常用于询问一些需要与用户交互的信息，弹出消息对话框（包含一个确定按钮，取消按钮与一个文本输入框）</p>\n<p>语法：</p>\n<pre><code>prompt(str1, str2);\n</code></pre><p>参数说明：</p>\n<pre><code>str1: 要显示在消息对话框中的文本，不可修改\nstr2：文本框中的内容，可以修改\n</code></pre><p>返回值：</p>\n<pre><code>1. 点击确定按钮，文本框中的内容将作为函数返回值\n2. 点击取消按钮，将返回null\n</code></pre><p>demo：</p>\n<pre><code>var myname=prompt(&quot;请输入你的姓名:&quot;);\nif(myname!=null)\n  {   alert(&quot;你好&quot;+myname); }\nelse\n  {  alert(&quot;你好 my friend.&quot;);  }\n</code></pre><h4 id=\"5-打开新窗口window-open\"><a href=\"#5-打开新窗口window-open\" class=\"headerlink\" title=\"5.打开新窗口window.open\"></a>5.打开新窗口window.open</h4><p>open()方法可以查找一个已经存在或者新建的浏览器窗口</p>\n<p>语法：</p>\n<pre><code>window.open([URL], [窗口名称], [参数字符串])\n</code></pre><p>参数说明：</p>\n<pre><code>URL：可选参数，在窗口中要显示网页的网址或路径。如果省略这个参数，或者它的值是空字符串，那么窗口就不显示任何文档。\n窗口名称：可选参数，被打开窗口的名称。\n    1.该名称由字母、数字和下划线字符组成。\n    2.&quot;_top&quot;、&quot;_blank&quot;、&quot;_self&quot;具有特殊意义的名称。\n      _blank：在新窗口显示目标网页\n      _self：在当前窗口显示目标网页\n      _top：框架网页中在上部窗口中显示目标网页\n    3.相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。\n    4.name 不能包含有空格。\n</code></pre><p>参数字符串：</p>\n<pre><code>可选参数，设置窗口参数，各参数用逗号隔开。\n</code></pre><h4 id=\"6-关闭窗口window-close\"><a href=\"#6-关闭窗口window-close\" class=\"headerlink\" title=\"6.关闭窗口window.close\"></a>6.关闭窗口window.close</h4><p>close()关闭窗口</p>\n<p>用法：</p>\n<pre><code>window.close();   //关闭本窗口\n或\n&lt;窗口对象&gt;.close();   //关闭指定的窗口\n</code></pre><p>demo：</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\n   var mywin=window.open(&apos;http://www.imooc.com&apos;); //将新打的窗口对象，存储在变量mywin中\n   mywin.close();\n&lt;/script&gt;\n</code></pre>"},{"layout":"post","title":"IP地址，子网掩码，端口，DNS，网关","date":"2016-08-14T16:00:00.000Z","_content":"### IP地址\nIP包头：\n\n![](http://ot0nm27pk.bkt.clouddn.com/net_ip_01.png)\n\nIP地址：\n\n\t00000000.00000000.00000000.00000000\n\t1 1 1 1 1 1 1 1 . 1 1 1 1 1 1 1 1 . 1 1 1 1 1 1 1 1 . 1 1 1 1 1 1 1 1\n\n换算成为：\n\n\t0.0.0.0\n\t255.255.255.255\n\nIP地址分类：\n\n![](http://ot0nm27pk.bkt.clouddn.com/net_ip_02.png)\n\n\n### 子网掩码\n\nip和子网掩码不能单独使用，必须一起使用（不能分开查看，要一起查看）\n\n标准子网掩码：\n\t\n\t255.0.0.0  \n\t255.255.0.0  \n\t255.255.255.0\n\n表示对应的数变化就是不同网段，需要路由器才能相互访问，其他的变化没关系，还是同一个网段\n\nA类IP：\n\n![](http://ot0nm27pk.bkt.clouddn.com/net_ziwang_01.png)\n\nB类IP：\n          \n![](http://ot0nm27pk.bkt.clouddn.com/net_ziwang_02.png)\n\nC类IP：\n\n![](http://ot0nm27pk.bkt.clouddn.com/net_ziwang_03.png)\n             \n变长子网掩码及子网规划:\n\n![](http://ot0nm27pk.bkt.clouddn.com/net_ziwang_04.png)\n\n\n\n### 端口\n\n在传输层确定端口号\n\n通过ip能确定对方服务器位置，服务器上开启了一些服务，不同服务有不同的端口号，端口号就是为了确定目标服务器相应的服务\n\n端口号\n\n\t2的16次方  0 - 65535\n\nTCP协议包头：\n\n![](http://ot0nm27pk.bkt.clouddn.com/net_baotou_01.png)\n\nUDP协议包头：\n\n![](http://ot0nm27pk.bkt.clouddn.com/net_baotou_02.png)\n          \n常见端口号：\n\n\t* FTP（文件传输协议）端口号：20 21\n\t* SSH（安全shell协议）：端口号 22\n\t* telnet（远程登录协议）：端口号 23（禁用，明文传输）\n\t* DNS（域名系统）：端口号53\n\t* http（超文本传输协议）：端口号80\n\t* SMTP（简单邮件传输协议）：端口号25\n\t* POP3（邮局协议3代）：端口号 110\n\n\n查看本机启用的端口命令：\n\nnetstat -an\n\n     -a：查看所有连接和监听端口\n     -n：显示IP地址和端口号，而不显示域名和服务名\n\n### DNS\n\n不配置DNS是不能访问互联网的\n\nDomain Name System的缩写，域名系统的缩写，又叫名称解析\n\n名称解析概述\n\n\t* 在互联网中，通过IP地址来进行通信\n\t* IP地址用数字表示，记忆起来比较困难\n\t* 人对域名更加敏感\n\n\n在DNS出现之前，我们有hosts文件（静态IP和域名对应），优先级比DNS更高\n\n从Hosts文件到DNS\n\n* 早期Hosts文件解析域名 \n\t1. 名称解析效能下降\n\t2. 主机维护困难\n\n* DNS服务\n\t1. 层次性\n\t2. 分布式\n\n\n\nDNS服务的作用\n\n* 将域名解析为IP地址\n\n\t\t1. 客户机向DNS服务器发送域名查询请求\n\t\t2. DNS服务器告知客户机Web服务器的IP地址\n\t\t3. 客户机与Web服务器通信\n\n\n域名空间结构\n\n![](http://ot0nm27pk.bkt.clouddn.com/net_dns_01.png)\n\n\n* 根域\n* 顶级域（域名分配组织ISO分配）\n\t1. 组织域（gov政府，com商业，edu教育，org民间组织，net网络服务，mil军事）\n\t2. 国家或地区域(cn中国，hk香港，jp日本，uk英国，au澳大利亚)\n* 二级域\n* 主机名\n\nDNS查询过程\n\n![](http://ot0nm27pk.bkt.clouddn.com/net_dns_02.png)\n\nDNS查询类型\n\n* 从查询方式上区分\n\t* 递归查询：要么做出查询成功响应，要么作出查询失败的响应，一般客户机和服务器之间属于递归查询，即当客户机向DNS服务器发出请求后，若DNS服务器本身不能解析，则会向另外的DNS服务器发出查询请求，得到结果后转交给客户机\n\t* 迭代查询：服务器收到一次迭代查询回复一次结果，这个结果不一定是目标IP与域名的映射关系，也可以是其他DNS服务器的地址\n\n* 从查询内容上区分\n\t* 正向查询由域名查找IP地址\n\t* 反向查询由IP地址查找域名\n\n### 网关\n\n概念：\n\n* 网关（Gateway）又称网间连接器，协议转换器\n* 网关在网络层以上实现网络互联，是最复杂的网络互连设备，仅用于两个高层协议不同的网络互联\n* 网管既可以用于广域网互联，也可以用于局域网互联。\n* 网关是一种充当转换重任的服务器或路由器\n\n示意图：\n\n![](http://ot0nm27pk.bkt.clouddn.com/net_wangguan_01.png)\n","source":"_posts/IP地址，子网掩码，端口，DNS，网关.md","raw":"---\nlayout: post\ntitle:  \"IP地址，子网掩码，端口，DNS，网关\"\ndate:   2016-08-15\ncategories: [计算机网络,基础]\ntags: [Net]\n---\n### IP地址\nIP包头：\n\n![](http://ot0nm27pk.bkt.clouddn.com/net_ip_01.png)\n\nIP地址：\n\n\t00000000.00000000.00000000.00000000\n\t1 1 1 1 1 1 1 1 . 1 1 1 1 1 1 1 1 . 1 1 1 1 1 1 1 1 . 1 1 1 1 1 1 1 1\n\n换算成为：\n\n\t0.0.0.0\n\t255.255.255.255\n\nIP地址分类：\n\n![](http://ot0nm27pk.bkt.clouddn.com/net_ip_02.png)\n\n\n### 子网掩码\n\nip和子网掩码不能单独使用，必须一起使用（不能分开查看，要一起查看）\n\n标准子网掩码：\n\t\n\t255.0.0.0  \n\t255.255.0.0  \n\t255.255.255.0\n\n表示对应的数变化就是不同网段，需要路由器才能相互访问，其他的变化没关系，还是同一个网段\n\nA类IP：\n\n![](http://ot0nm27pk.bkt.clouddn.com/net_ziwang_01.png)\n\nB类IP：\n          \n![](http://ot0nm27pk.bkt.clouddn.com/net_ziwang_02.png)\n\nC类IP：\n\n![](http://ot0nm27pk.bkt.clouddn.com/net_ziwang_03.png)\n             \n变长子网掩码及子网规划:\n\n![](http://ot0nm27pk.bkt.clouddn.com/net_ziwang_04.png)\n\n\n\n### 端口\n\n在传输层确定端口号\n\n通过ip能确定对方服务器位置，服务器上开启了一些服务，不同服务有不同的端口号，端口号就是为了确定目标服务器相应的服务\n\n端口号\n\n\t2的16次方  0 - 65535\n\nTCP协议包头：\n\n![](http://ot0nm27pk.bkt.clouddn.com/net_baotou_01.png)\n\nUDP协议包头：\n\n![](http://ot0nm27pk.bkt.clouddn.com/net_baotou_02.png)\n          \n常见端口号：\n\n\t* FTP（文件传输协议）端口号：20 21\n\t* SSH（安全shell协议）：端口号 22\n\t* telnet（远程登录协议）：端口号 23（禁用，明文传输）\n\t* DNS（域名系统）：端口号53\n\t* http（超文本传输协议）：端口号80\n\t* SMTP（简单邮件传输协议）：端口号25\n\t* POP3（邮局协议3代）：端口号 110\n\n\n查看本机启用的端口命令：\n\nnetstat -an\n\n     -a：查看所有连接和监听端口\n     -n：显示IP地址和端口号，而不显示域名和服务名\n\n### DNS\n\n不配置DNS是不能访问互联网的\n\nDomain Name System的缩写，域名系统的缩写，又叫名称解析\n\n名称解析概述\n\n\t* 在互联网中，通过IP地址来进行通信\n\t* IP地址用数字表示，记忆起来比较困难\n\t* 人对域名更加敏感\n\n\n在DNS出现之前，我们有hosts文件（静态IP和域名对应），优先级比DNS更高\n\n从Hosts文件到DNS\n\n* 早期Hosts文件解析域名 \n\t1. 名称解析效能下降\n\t2. 主机维护困难\n\n* DNS服务\n\t1. 层次性\n\t2. 分布式\n\n\n\nDNS服务的作用\n\n* 将域名解析为IP地址\n\n\t\t1. 客户机向DNS服务器发送域名查询请求\n\t\t2. DNS服务器告知客户机Web服务器的IP地址\n\t\t3. 客户机与Web服务器通信\n\n\n域名空间结构\n\n![](http://ot0nm27pk.bkt.clouddn.com/net_dns_01.png)\n\n\n* 根域\n* 顶级域（域名分配组织ISO分配）\n\t1. 组织域（gov政府，com商业，edu教育，org民间组织，net网络服务，mil军事）\n\t2. 国家或地区域(cn中国，hk香港，jp日本，uk英国，au澳大利亚)\n* 二级域\n* 主机名\n\nDNS查询过程\n\n![](http://ot0nm27pk.bkt.clouddn.com/net_dns_02.png)\n\nDNS查询类型\n\n* 从查询方式上区分\n\t* 递归查询：要么做出查询成功响应，要么作出查询失败的响应，一般客户机和服务器之间属于递归查询，即当客户机向DNS服务器发出请求后，若DNS服务器本身不能解析，则会向另外的DNS服务器发出查询请求，得到结果后转交给客户机\n\t* 迭代查询：服务器收到一次迭代查询回复一次结果，这个结果不一定是目标IP与域名的映射关系，也可以是其他DNS服务器的地址\n\n* 从查询内容上区分\n\t* 正向查询由域名查找IP地址\n\t* 反向查询由IP地址查找域名\n\n### 网关\n\n概念：\n\n* 网关（Gateway）又称网间连接器，协议转换器\n* 网关在网络层以上实现网络互联，是最复杂的网络互连设备，仅用于两个高层协议不同的网络互联\n* 网管既可以用于广域网互联，也可以用于局域网互联。\n* 网关是一种充当转换重任的服务器或路由器\n\n示意图：\n\n![](http://ot0nm27pk.bkt.clouddn.com/net_wangguan_01.png)\n","slug":"IP地址，子网掩码，端口，DNS，网关","published":1,"updated":"2017-12-26T05:14:25.503Z","comments":1,"photos":[],"link":"","_id":"cjboyl4xe000o1ctmmxj9zx97","content":"<h3 id=\"IP地址\"><a href=\"#IP地址\" class=\"headerlink\" title=\"IP地址\"></a>IP地址</h3><p>IP包头：</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net_ip_01.png\" alt=\"\"></p>\n<p>IP地址：</p>\n<pre><code>00000000.00000000.00000000.00000000\n1 1 1 1 1 1 1 1 . 1 1 1 1 1 1 1 1 . 1 1 1 1 1 1 1 1 . 1 1 1 1 1 1 1 1\n</code></pre><p>换算成为：</p>\n<pre><code>0.0.0.0\n255.255.255.255\n</code></pre><p>IP地址分类：</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net_ip_02.png\" alt=\"\"></p>\n<h3 id=\"子网掩码\"><a href=\"#子网掩码\" class=\"headerlink\" title=\"子网掩码\"></a>子网掩码</h3><p>ip和子网掩码不能单独使用，必须一起使用（不能分开查看，要一起查看）</p>\n<p>标准子网掩码：</p>\n<pre><code>255.0.0.0  \n255.255.0.0  \n255.255.255.0\n</code></pre><p>表示对应的数变化就是不同网段，需要路由器才能相互访问，其他的变化没关系，还是同一个网段</p>\n<p>A类IP：</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net_ziwang_01.png\" alt=\"\"></p>\n<p>B类IP：</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net_ziwang_02.png\" alt=\"\"></p>\n<p>C类IP：</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net_ziwang_03.png\" alt=\"\"></p>\n<p>变长子网掩码及子网规划:</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net_ziwang_04.png\" alt=\"\"></p>\n<h3 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h3><p>在传输层确定端口号</p>\n<p>通过ip能确定对方服务器位置，服务器上开启了一些服务，不同服务有不同的端口号，端口号就是为了确定目标服务器相应的服务</p>\n<p>端口号</p>\n<pre><code>2的16次方  0 - 65535\n</code></pre><p>TCP协议包头：</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net_baotou_01.png\" alt=\"\"></p>\n<p>UDP协议包头：</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net_baotou_02.png\" alt=\"\"></p>\n<p>常见端口号：</p>\n<pre><code>* FTP（文件传输协议）端口号：20 21\n* SSH（安全shell协议）：端口号 22\n* telnet（远程登录协议）：端口号 23（禁用，明文传输）\n* DNS（域名系统）：端口号53\n* http（超文本传输协议）：端口号80\n* SMTP（简单邮件传输协议）：端口号25\n* POP3（邮局协议3代）：端口号 110\n</code></pre><p>查看本机启用的端口命令：</p>\n<p>netstat -an</p>\n<pre><code>-a：查看所有连接和监听端口\n-n：显示IP地址和端口号，而不显示域名和服务名\n</code></pre><h3 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h3><p>不配置DNS是不能访问互联网的</p>\n<p>Domain Name System的缩写，域名系统的缩写，又叫名称解析</p>\n<p>名称解析概述</p>\n<pre><code>* 在互联网中，通过IP地址来进行通信\n* IP地址用数字表示，记忆起来比较困难\n* 人对域名更加敏感\n</code></pre><p>在DNS出现之前，我们有hosts文件（静态IP和域名对应），优先级比DNS更高</p>\n<p>从Hosts文件到DNS</p>\n<ul>\n<li><p>早期Hosts文件解析域名 </p>\n<ol>\n<li>名称解析效能下降</li>\n<li>主机维护困难</li>\n</ol>\n</li>\n<li><p>DNS服务</p>\n<ol>\n<li>层次性</li>\n<li>分布式</li>\n</ol>\n</li>\n</ul>\n<p>DNS服务的作用</p>\n<ul>\n<li><p>将域名解析为IP地址</p>\n<pre><code>1. 客户机向DNS服务器发送域名查询请求\n2. DNS服务器告知客户机Web服务器的IP地址\n3. 客户机与Web服务器通信\n</code></pre></li>\n</ul>\n<p>域名空间结构</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net_dns_01.png\" alt=\"\"></p>\n<ul>\n<li>根域</li>\n<li>顶级域（域名分配组织ISO分配）<ol>\n<li>组织域（gov政府，com商业，edu教育，org民间组织，net网络服务，mil军事）</li>\n<li>国家或地区域(cn中国，hk香港，jp日本，uk英国，au澳大利亚)</li>\n</ol>\n</li>\n<li>二级域</li>\n<li>主机名</li>\n</ul>\n<p>DNS查询过程</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net_dns_02.png\" alt=\"\"></p>\n<p>DNS查询类型</p>\n<ul>\n<li><p>从查询方式上区分</p>\n<ul>\n<li>递归查询：要么做出查询成功响应，要么作出查询失败的响应，一般客户机和服务器之间属于递归查询，即当客户机向DNS服务器发出请求后，若DNS服务器本身不能解析，则会向另外的DNS服务器发出查询请求，得到结果后转交给客户机</li>\n<li>迭代查询：服务器收到一次迭代查询回复一次结果，这个结果不一定是目标IP与域名的映射关系，也可以是其他DNS服务器的地址</li>\n</ul>\n</li>\n<li><p>从查询内容上区分</p>\n<ul>\n<li>正向查询由域名查找IP地址</li>\n<li>反向查询由IP地址查找域名</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"网关\"><a href=\"#网关\" class=\"headerlink\" title=\"网关\"></a>网关</h3><p>概念：</p>\n<ul>\n<li>网关（Gateway）又称网间连接器，协议转换器</li>\n<li>网关在网络层以上实现网络互联，是最复杂的网络互连设备，仅用于两个高层协议不同的网络互联</li>\n<li>网管既可以用于广域网互联，也可以用于局域网互联。</li>\n<li>网关是一种充当转换重任的服务器或路由器</li>\n</ul>\n<p>示意图：</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net_wangguan_01.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"IP地址\"><a href=\"#IP地址\" class=\"headerlink\" title=\"IP地址\"></a>IP地址</h3><p>IP包头：</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net_ip_01.png\" alt=\"\"></p>\n<p>IP地址：</p>\n<pre><code>00000000.00000000.00000000.00000000\n1 1 1 1 1 1 1 1 . 1 1 1 1 1 1 1 1 . 1 1 1 1 1 1 1 1 . 1 1 1 1 1 1 1 1\n</code></pre><p>换算成为：</p>\n<pre><code>0.0.0.0\n255.255.255.255\n</code></pre><p>IP地址分类：</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net_ip_02.png\" alt=\"\"></p>\n<h3 id=\"子网掩码\"><a href=\"#子网掩码\" class=\"headerlink\" title=\"子网掩码\"></a>子网掩码</h3><p>ip和子网掩码不能单独使用，必须一起使用（不能分开查看，要一起查看）</p>\n<p>标准子网掩码：</p>\n<pre><code>255.0.0.0  \n255.255.0.0  \n255.255.255.0\n</code></pre><p>表示对应的数变化就是不同网段，需要路由器才能相互访问，其他的变化没关系，还是同一个网段</p>\n<p>A类IP：</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net_ziwang_01.png\" alt=\"\"></p>\n<p>B类IP：</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net_ziwang_02.png\" alt=\"\"></p>\n<p>C类IP：</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net_ziwang_03.png\" alt=\"\"></p>\n<p>变长子网掩码及子网规划:</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net_ziwang_04.png\" alt=\"\"></p>\n<h3 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h3><p>在传输层确定端口号</p>\n<p>通过ip能确定对方服务器位置，服务器上开启了一些服务，不同服务有不同的端口号，端口号就是为了确定目标服务器相应的服务</p>\n<p>端口号</p>\n<pre><code>2的16次方  0 - 65535\n</code></pre><p>TCP协议包头：</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net_baotou_01.png\" alt=\"\"></p>\n<p>UDP协议包头：</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net_baotou_02.png\" alt=\"\"></p>\n<p>常见端口号：</p>\n<pre><code>* FTP（文件传输协议）端口号：20 21\n* SSH（安全shell协议）：端口号 22\n* telnet（远程登录协议）：端口号 23（禁用，明文传输）\n* DNS（域名系统）：端口号53\n* http（超文本传输协议）：端口号80\n* SMTP（简单邮件传输协议）：端口号25\n* POP3（邮局协议3代）：端口号 110\n</code></pre><p>查看本机启用的端口命令：</p>\n<p>netstat -an</p>\n<pre><code>-a：查看所有连接和监听端口\n-n：显示IP地址和端口号，而不显示域名和服务名\n</code></pre><h3 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h3><p>不配置DNS是不能访问互联网的</p>\n<p>Domain Name System的缩写，域名系统的缩写，又叫名称解析</p>\n<p>名称解析概述</p>\n<pre><code>* 在互联网中，通过IP地址来进行通信\n* IP地址用数字表示，记忆起来比较困难\n* 人对域名更加敏感\n</code></pre><p>在DNS出现之前，我们有hosts文件（静态IP和域名对应），优先级比DNS更高</p>\n<p>从Hosts文件到DNS</p>\n<ul>\n<li><p>早期Hosts文件解析域名 </p>\n<ol>\n<li>名称解析效能下降</li>\n<li>主机维护困难</li>\n</ol>\n</li>\n<li><p>DNS服务</p>\n<ol>\n<li>层次性</li>\n<li>分布式</li>\n</ol>\n</li>\n</ul>\n<p>DNS服务的作用</p>\n<ul>\n<li><p>将域名解析为IP地址</p>\n<pre><code>1. 客户机向DNS服务器发送域名查询请求\n2. DNS服务器告知客户机Web服务器的IP地址\n3. 客户机与Web服务器通信\n</code></pre></li>\n</ul>\n<p>域名空间结构</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net_dns_01.png\" alt=\"\"></p>\n<ul>\n<li>根域</li>\n<li>顶级域（域名分配组织ISO分配）<ol>\n<li>组织域（gov政府，com商业，edu教育，org民间组织，net网络服务，mil军事）</li>\n<li>国家或地区域(cn中国，hk香港，jp日本，uk英国，au澳大利亚)</li>\n</ol>\n</li>\n<li>二级域</li>\n<li>主机名</li>\n</ul>\n<p>DNS查询过程</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net_dns_02.png\" alt=\"\"></p>\n<p>DNS查询类型</p>\n<ul>\n<li><p>从查询方式上区分</p>\n<ul>\n<li>递归查询：要么做出查询成功响应，要么作出查询失败的响应，一般客户机和服务器之间属于递归查询，即当客户机向DNS服务器发出请求后，若DNS服务器本身不能解析，则会向另外的DNS服务器发出查询请求，得到结果后转交给客户机</li>\n<li>迭代查询：服务器收到一次迭代查询回复一次结果，这个结果不一定是目标IP与域名的映射关系，也可以是其他DNS服务器的地址</li>\n</ul>\n</li>\n<li><p>从查询内容上区分</p>\n<ul>\n<li>正向查询由域名查找IP地址</li>\n<li>反向查询由IP地址查找域名</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"网关\"><a href=\"#网关\" class=\"headerlink\" title=\"网关\"></a>网关</h3><p>概念：</p>\n<ul>\n<li>网关（Gateway）又称网间连接器，协议转换器</li>\n<li>网关在网络层以上实现网络互联，是最复杂的网络互连设备，仅用于两个高层协议不同的网络互联</li>\n<li>网管既可以用于广域网互联，也可以用于局域网互联。</li>\n<li>网关是一种充当转换重任的服务器或路由器</li>\n</ul>\n<p>示意图：</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net_wangguan_01.png\" alt=\"\"></p>\n"},{"layout":"post","title":"Markdown编写流程图的语法问题","date":"2017-03-26T16:00:00.000Z","_content":"画流程图的步骤\n\n>好气哦！我的编辑器不支持解析！ :(\n\n>后头搞一下，未完待续...\n\n1. 第一段用来定义元素\n\t\n\t语法：\n\t\t\n\t\ttag=>type:content:>url\n\t\t\n\ttag就是一个标签，下面我们在定义连接元素时用type是这个标签的类型\n\t\n\t基本类型：\n\t\n\t\tstart\n\t\tend\n\t\toperation\n\t\tsubroutine\n\t\tcondition\n\t\tinput/output\n\t\t\n\t开始：\n\t\t\n\t\tst=>start:开始\n\t\t\n\t操作流程：\n\t\n\t\tst->op->cond\n\t\t\n\t条件：\n\t\n\t\tcond=>condition:确认?\n\t\t\n\t结束：\n\t\n\t\te=>end:结束\n\t\t\n\t示例：\n\n\n<textarea id=\"code\" style=\"width: 100%;\" rows=\"11\">\nst=>start: Start|past:>http://www.google.com[blank]\ne=>end: End:>http://www.google.com\nop1=>operation: My Operation|past\nop2=>operation: Stuff|current\nsub1=>subroutine: My Subroutine|invalid\ncond=>condition: Yes\nor No?|approved:>http://www.google.com\nc2=>condition: Good idea|rejected\nio=>inputoutput: catch something...|request\n\nst->op1(right)->cond\ncond(yes, right)->c2\ncond(no)->sub1(left)->op1\nc2(yes)->io->e\nc2(no)->op2->e\n</textarea>\n\n\n\t\tst=>start: Start\n\t\te=>end\n\t\top=>operation: My Operation\n\t\tcond=>condition: Yes or No?\n\n\t\tst->op->cond\n\t\tcond(yes)->e\n\t\tcond(no)->op\t\n\n2. 第二段用来连接元素\n\n\tst=>start:开始\n\tst->op->cond\n\t\n\t\n***\n\t\n\tflow\n\tst=>start: Start\n\top=>operation: Your Operation\n\tcond=>condition: Yes or No?\n\te=>end\n\tst->op->cond\n\tcond(yes)->e\n\tcond(no)->op\n\t\n～～～flow\nst=>start: Start:>http://alfred-sun.github.io\nio=>inputoutput: verification\nop=>operation: Your Operation\ncond=>condition: Yes or No?\nsub=>subroutine: Your Subroutine\ne=>end:>https://github.com/adrai/flowchart.js\n\nst->io->op->cond\ncond(yes)->e\ncond(no)->sub->io\n～～～\n\n\tst=>start: 开始:>http://www.google.com[blank]\n\te=>end:    结束:>http://www.google.com\n\top1=>operation: 操作\n\tsub1=>subroutine: 子程序\n\tcond=>condition: Yes \n\tor No?:>http://www.google.com\n\tio=>inputoutput: 输入输出\n\n\tst->op1->cond\n\tcond(yes)->io->e\n\tcond(no)->sub1(right)->op1\n\n\n\n<flow>\nst=>start: Start:>http://alfred-sun.github.io\nio=>inputoutput: verification\nop=>operation: Your Operation\ncond=>condition: Yes or No?\nsub=>subroutine: Your Subroutine\ne=>end:>https://github.com/adrai/flowchart.js\n\nst->io->op->cond\ncond(yes)->e\ncond(no)->sub->io\n</flow>\n\n\n\n","source":"_posts/MarkDown编写流程图的语法问题.md","raw":"---\nlayout: post\ntitle:  \"Markdown编写流程图的语法问题\"\ndate:   2017-03-27\ncategories: [Markdown,流程图]\ntags: [Text]\n---\n画流程图的步骤\n\n>好气哦！我的编辑器不支持解析！ :(\n\n>后头搞一下，未完待续...\n\n1. 第一段用来定义元素\n\t\n\t语法：\n\t\t\n\t\ttag=>type:content:>url\n\t\t\n\ttag就是一个标签，下面我们在定义连接元素时用type是这个标签的类型\n\t\n\t基本类型：\n\t\n\t\tstart\n\t\tend\n\t\toperation\n\t\tsubroutine\n\t\tcondition\n\t\tinput/output\n\t\t\n\t开始：\n\t\t\n\t\tst=>start:开始\n\t\t\n\t操作流程：\n\t\n\t\tst->op->cond\n\t\t\n\t条件：\n\t\n\t\tcond=>condition:确认?\n\t\t\n\t结束：\n\t\n\t\te=>end:结束\n\t\t\n\t示例：\n\n\n<textarea id=\"code\" style=\"width: 100%;\" rows=\"11\">\nst=>start: Start|past:>http://www.google.com[blank]\ne=>end: End:>http://www.google.com\nop1=>operation: My Operation|past\nop2=>operation: Stuff|current\nsub1=>subroutine: My Subroutine|invalid\ncond=>condition: Yes\nor No?|approved:>http://www.google.com\nc2=>condition: Good idea|rejected\nio=>inputoutput: catch something...|request\n\nst->op1(right)->cond\ncond(yes, right)->c2\ncond(no)->sub1(left)->op1\nc2(yes)->io->e\nc2(no)->op2->e\n</textarea>\n\n\n\t\tst=>start: Start\n\t\te=>end\n\t\top=>operation: My Operation\n\t\tcond=>condition: Yes or No?\n\n\t\tst->op->cond\n\t\tcond(yes)->e\n\t\tcond(no)->op\t\n\n2. 第二段用来连接元素\n\n\tst=>start:开始\n\tst->op->cond\n\t\n\t\n***\n\t\n\tflow\n\tst=>start: Start\n\top=>operation: Your Operation\n\tcond=>condition: Yes or No?\n\te=>end\n\tst->op->cond\n\tcond(yes)->e\n\tcond(no)->op\n\t\n～～～flow\nst=>start: Start:>http://alfred-sun.github.io\nio=>inputoutput: verification\nop=>operation: Your Operation\ncond=>condition: Yes or No?\nsub=>subroutine: Your Subroutine\ne=>end:>https://github.com/adrai/flowchart.js\n\nst->io->op->cond\ncond(yes)->e\ncond(no)->sub->io\n～～～\n\n\tst=>start: 开始:>http://www.google.com[blank]\n\te=>end:    结束:>http://www.google.com\n\top1=>operation: 操作\n\tsub1=>subroutine: 子程序\n\tcond=>condition: Yes \n\tor No?:>http://www.google.com\n\tio=>inputoutput: 输入输出\n\n\tst->op1->cond\n\tcond(yes)->io->e\n\tcond(no)->sub1(right)->op1\n\n\n\n<flow>\nst=>start: Start:>http://alfred-sun.github.io\nio=>inputoutput: verification\nop=>operation: Your Operation\ncond=>condition: Yes or No?\nsub=>subroutine: Your Subroutine\ne=>end:>https://github.com/adrai/flowchart.js\n\nst->io->op->cond\ncond(yes)->e\ncond(no)->sub->io\n</flow>\n\n\n\n","slug":"MarkDown编写流程图的语法问题","published":1,"updated":"2017-12-26T05:14:25.505Z","comments":1,"photos":[],"link":"","_id":"cjboyl4xg000r1ctmcbrebmv0","content":"<p>画流程图的步骤</p>\n<blockquote>\n<p>好气哦！我的编辑器不支持解析！ :(</p>\n<p>后头搞一下，未完待续…</p>\n</blockquote>\n<ol>\n<li><p>第一段用来定义元素</p>\n<p> 语法：</p>\n<pre><code>tag=&gt;type:content:&gt;url\n</code></pre><p> tag就是一个标签，下面我们在定义连接元素时用type是这个标签的类型</p>\n<p> 基本类型：</p>\n<pre><code>start\nend\noperation\nsubroutine\ncondition\ninput/output\n</code></pre><p> 开始：</p>\n<pre><code>st=&gt;start:开始\n</code></pre><p> 操作流程：</p>\n<pre><code>st-&gt;op-&gt;cond\n</code></pre><p> 条件：</p>\n<pre><code>cond=&gt;condition:确认?\n</code></pre><p> 结束：</p>\n<pre><code>e=&gt;end:结束\n</code></pre><p> 示例：</p>\n</li>\n</ol>\n<textarea id=\"code\" style=\"width: 100%;\" rows=\"11\"><br>st=&gt;start: Start|past:&gt;<a href=\"http://www.google.com[blank\" target=\"_blank\" rel=\"external\">http://www.google.com[blank</a>]<br>e=&gt;end: End:&gt;<a href=\"http://www.google.com\" target=\"_blank\" rel=\"external\">http://www.google.com</a><br>op1=&gt;operation: My Operation|past<br>op2=&gt;operation: Stuff|current<br>sub1=&gt;subroutine: My Subroutine|invalid<br>cond=&gt;condition: Yes<br>or No?|approved:&gt;<a href=\"http://www.google.com\" target=\"_blank\" rel=\"external\">http://www.google.com</a><br>c2=&gt;condition: Good idea|rejected<br>io=&gt;inputoutput: catch something…|request<br><br>st-&gt;op1(right)-&gt;cond<br>cond(yes, right)-&gt;c2<br>cond(no)-&gt;sub1(left)-&gt;op1<br>c2(yes)-&gt;io-&gt;e<br>c2(no)-&gt;op2-&gt;e<br></textarea>\n\n\n<pre><code>st=&gt;start: Start\ne=&gt;end\nop=&gt;operation: My Operation\ncond=&gt;condition: Yes or No?\n\nst-&gt;op-&gt;cond\ncond(yes)-&gt;e\ncond(no)-&gt;op    \n</code></pre><ol>\n<li><p>第二段用来连接元素</p>\n<p> st=&gt;start:开始<br> st-&gt;op-&gt;cond</p>\n</li>\n</ol>\n<hr>\n<pre><code>flow\nst=&gt;start: Start\nop=&gt;operation: Your Operation\ncond=&gt;condition: Yes or No?\ne=&gt;end\nst-&gt;op-&gt;cond\ncond(yes)-&gt;e\ncond(no)-&gt;op\n</code></pre><p>～～～flow<br>st=&gt;start: Start:&gt;<a href=\"http://alfred-sun.github.io\" target=\"_blank\" rel=\"external\">http://alfred-sun.github.io</a><br>io=&gt;inputoutput: verification<br>op=&gt;operation: Your Operation<br>cond=&gt;condition: Yes or No?<br>sub=&gt;subroutine: Your Subroutine<br>e=&gt;end:&gt;<a href=\"https://github.com/adrai/flowchart.js\" target=\"_blank\" rel=\"external\">https://github.com/adrai/flowchart.js</a></p>\n<p>st-&gt;io-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;sub-&gt;io<br>～～～</p>\n<pre><code>st=&gt;start: 开始:&gt;http://www.google.com[blank]\ne=&gt;end:    结束:&gt;http://www.google.com\nop1=&gt;operation: 操作\nsub1=&gt;subroutine: 子程序\ncond=&gt;condition: Yes \nor No?:&gt;http://www.google.com\nio=&gt;inputoutput: 输入输出\n\nst-&gt;op1-&gt;cond\ncond(yes)-&gt;io-&gt;e\ncond(no)-&gt;sub1(right)-&gt;op1\n</code></pre><flow><br>st=&gt;start: Start:&gt;<a href=\"http://alfred-sun.github.io\" target=\"_blank\" rel=\"external\">http://alfred-sun.github.io</a><br>io=&gt;inputoutput: verification<br>op=&gt;operation: Your Operation<br>cond=&gt;condition: Yes or No?<br>sub=&gt;subroutine: Your Subroutine<br>e=&gt;end:&gt;<a href=\"https://github.com/adrai/flowchart.js\" target=\"_blank\" rel=\"external\">https://github.com/adrai/flowchart.js</a><br><br>st-&gt;io-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;sub-&gt;io<br></flow>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>画流程图的步骤</p>\n<blockquote>\n<p>好气哦！我的编辑器不支持解析！ :(</p>\n<p>后头搞一下，未完待续…</p>\n</blockquote>\n<ol>\n<li><p>第一段用来定义元素</p>\n<p> 语法：</p>\n<pre><code>tag=&gt;type:content:&gt;url\n</code></pre><p> tag就是一个标签，下面我们在定义连接元素时用type是这个标签的类型</p>\n<p> 基本类型：</p>\n<pre><code>start\nend\noperation\nsubroutine\ncondition\ninput/output\n</code></pre><p> 开始：</p>\n<pre><code>st=&gt;start:开始\n</code></pre><p> 操作流程：</p>\n<pre><code>st-&gt;op-&gt;cond\n</code></pre><p> 条件：</p>\n<pre><code>cond=&gt;condition:确认?\n</code></pre><p> 结束：</p>\n<pre><code>e=&gt;end:结束\n</code></pre><p> 示例：</p>\n</li>\n</ol>\n<textarea id=\"code\" style=\"width: 100%;\" rows=\"11\"><br>st=&gt;start: Start|past:&gt;<a href=\"http://www.google.com[blank\" target=\"_blank\" rel=\"external\">http://www.google.com[blank</a>]<br>e=&gt;end: End:&gt;<a href=\"http://www.google.com\" target=\"_blank\" rel=\"external\">http://www.google.com</a><br>op1=&gt;operation: My Operation|past<br>op2=&gt;operation: Stuff|current<br>sub1=&gt;subroutine: My Subroutine|invalid<br>cond=&gt;condition: Yes<br>or No?|approved:&gt;<a href=\"http://www.google.com\" target=\"_blank\" rel=\"external\">http://www.google.com</a><br>c2=&gt;condition: Good idea|rejected<br>io=&gt;inputoutput: catch something…|request<br><br>st-&gt;op1(right)-&gt;cond<br>cond(yes, right)-&gt;c2<br>cond(no)-&gt;sub1(left)-&gt;op1<br>c2(yes)-&gt;io-&gt;e<br>c2(no)-&gt;op2-&gt;e<br></textarea>\n\n\n<pre><code>st=&gt;start: Start\ne=&gt;end\nop=&gt;operation: My Operation\ncond=&gt;condition: Yes or No?\n\nst-&gt;op-&gt;cond\ncond(yes)-&gt;e\ncond(no)-&gt;op    \n</code></pre><ol>\n<li><p>第二段用来连接元素</p>\n<p> st=&gt;start:开始<br> st-&gt;op-&gt;cond</p>\n</li>\n</ol>\n<hr>\n<pre><code>flow\nst=&gt;start: Start\nop=&gt;operation: Your Operation\ncond=&gt;condition: Yes or No?\ne=&gt;end\nst-&gt;op-&gt;cond\ncond(yes)-&gt;e\ncond(no)-&gt;op\n</code></pre><p>～～～flow<br>st=&gt;start: Start:&gt;<a href=\"http://alfred-sun.github.io\" target=\"_blank\" rel=\"external\">http://alfred-sun.github.io</a><br>io=&gt;inputoutput: verification<br>op=&gt;operation: Your Operation<br>cond=&gt;condition: Yes or No?<br>sub=&gt;subroutine: Your Subroutine<br>e=&gt;end:&gt;<a href=\"https://github.com/adrai/flowchart.js\" target=\"_blank\" rel=\"external\">https://github.com/adrai/flowchart.js</a></p>\n<p>st-&gt;io-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;sub-&gt;io<br>～～～</p>\n<pre><code>st=&gt;start: 开始:&gt;http://www.google.com[blank]\ne=&gt;end:    结束:&gt;http://www.google.com\nop1=&gt;operation: 操作\nsub1=&gt;subroutine: 子程序\ncond=&gt;condition: Yes \nor No?:&gt;http://www.google.com\nio=&gt;inputoutput: 输入输出\n\nst-&gt;op1-&gt;cond\ncond(yes)-&gt;io-&gt;e\ncond(no)-&gt;sub1(right)-&gt;op1\n</code></pre><flow><br>st=&gt;start: Start:&gt;<a href=\"http://alfred-sun.github.io\" target=\"_blank\" rel=\"external\">http://alfred-sun.github.io</a><br>io=&gt;inputoutput: verification<br>op=&gt;operation: Your Operation<br>cond=&gt;condition: Yes or No?<br>sub=&gt;subroutine: Your Subroutine<br>e=&gt;end:&gt;<a href=\"https://github.com/adrai/flowchart.js\" target=\"_blank\" rel=\"external\">https://github.com/adrai/flowchart.js</a><br><br>st-&gt;io-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;sub-&gt;io<br></flow>\n\n\n\n"},{"title":"Android调起照相机、相册获取图片，并压缩图片","date":"2017-07-25T06:47:01.000Z","_content":"\n\n>最近封装了图片OCR模块，模块代码不方便贴出来，就简单记录一下图片的处理方式\n获取图片方式是让用户选择 相机拍照 或者从 相册 中选择\n\n![](http://ot0nm27pk.bkt.clouddn.com/gududemao.png)\n\n\n先说照相机方式：\n\n首先考虑Android6.0之后的动态权限处理\n```java\n  /**\n     * 核对相机权限\n     */\n    private void checkCameraPermission() {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            try {\n                int isPermission = checkSelfPermission(Manifest.permission.CAMERA);\n                if( isPermission == PackageManager.PERMISSION_GRANTED) {\n                    openCarema();\n                    return;\n                }\n                boolean shouldRequest = shouldShowRequestPermissionRationale(Manifest.permission.CAMERA);\n                if (shouldRequest) {\n                    requestCameraPermission();\n                    return;\n                }\n                showToast(\"请打开摄像机权限\");\n            } catch (RuntimeException e) { //防止MUNU系统等，更改权限的名称\n                showToast(\"请打开摄像机权限\");\n            }\n        } else {\n            openCarema();\n        }\n    }\n      /**\n     * 请求打开权限\n     */\n    @TargetApi(Build.VERSION_CODES.M)\n    private void requestCameraPermission() {\n        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUESTCODE_OPEN_CAMERA_PERMISSION);\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        if (requestCode == REQUESTCODE_OPEN_CAMERA_PERMISSION) {\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                openCarema();\n            } else {\n                showToast(\"请打开摄像机权限\");\n            }\n        }\n    }\n\n```\n上边代码很简单明了，这里就不做赘述了\n\n下边打开相机\n```java\n \t/**\n     * 打开相机\n     */\n    private void openCarema() {\n        // 指定相机拍摄照片保存地址\n        String state = Environment.getExternalStorageState();\n        if (state.equals(Environment.MEDIA_MOUNTED)) {\n            cameraPath = SAVED_IMAGE_DIR_PATH + System.currentTimeMillis() + \".png\";\n            Intent intent = new Intent();\n            // 指定开启系统相机的Action\n            intent.setAction(MediaStore.ACTION_IMAGE_CAPTURE);\n            String out_file_path = SAVED_IMAGE_DIR_PATH;\n            File dir = new File(out_file_path);\n            if (!dir.exists()) {\n                dir.mkdirs();\n            } // 把文件地址转换成Uri格式\n            Uri uri = Uri.fromFile(new File(cameraPath));\n            // 设置系统相机拍摄照片完成后图片文件的存放地址\n            intent.putExtra(MediaStore.EXTRA_OUTPUT, uri);\n            startActivityForResult(intent, CAMERA_REQUEST_CODE);\n        } else {\n            showToast(\"请确认已经插入SD卡\");\n        }\n    }\n```\n上面可以看到，开启系统现有相机应用拍摄照片，需要用的MediaStore.ACTION_IMAGE_CAPTURE作为Intent的action开启Activity即可。但是在使用系统现有相机用用的时候，默认会把图片保存到系统图库的目录下，如果需要指定图片文件的保存路径，需要额外在Intent中设置。\n\n设置系统现有相机应用的拍摄照片的保存路径，需要用Intent.putExtra()方法通过MediaStore.EXTRA_OUTPUT去设置Intent的额外数据，这里传递的是一个Uri参数，可以是一个文件路径的Uri。\n\n<b>如果得到结果的话，我们在讲完打开相册后再说</b>\n\n相册方式\n```java\n//打开相册\nIntent intent = new Intent(Intent.ACTION_PICK, null);\nintent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, \"image/*\");\nintent.setAction(Intent.ACTION_GET_CONTENT);\nstartActivityForResult(intent, ALBUM_REQUEST_CODE);\n```\n\n处理返回结果\n```java\n  @Override\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        Bitmap bitmap = null;\n        if (resultCode == Activity.RESULT_OK) {\n            switch (requestCode) {\n                case CAMERA_REQUEST_CODE:\n                    if (TextUtils.isEmpty(cameraPath)) {\n                        showToast(\"获取摄像机图片失败\");\n                        return;\n                    }\n                    bitmap = BitmapUtils.getSmallBitmap(cameraPath, 480, 640);\n                    Logger.d(\"path=\" + cameraPath);\n                    File file = new File(cameraPath);\n                    if (file.exists()) {\n                        file.delete();\n                        Logger.d(\"删除相机图片\");\n                    }\n                    break;\n                case ALBUM_REQUEST_CODE:\n                    Uri uri = data.getData();\n                    final String absolutePath= getAbsolutePath(this, uri);\n                    if (TextUtils.isEmpty(absolutePath)) {\n                        showToast(\"获取摄像机图片失败\");\n                        return;\n                    }\n                    bitmap = BitmapUtils.getSmallBitmap(absolutePath, 480, 640);\n                    break;\n                default:\n                    break;\n            }\n            if (bitmap == null) {\n                showToast(\"获取图片失败\");\n                return;\n            }\n            fillBitmap(bitmap);\n        }\n    }\n```\n\n由上边可知BitmapUtils.getSmallBitma是得到压缩之后的图片，下边放代码\n```java\n    /**\n     * 根据路径获得突破并压缩返回bitmap用于显示\n     * 作者：QianqianLis\n     * 链接：http://www.jianshu.com/p/81e553fd0bc3\n     * 來源：简书\n     * @param filePath\n     * @return\n     */\n    public static Bitmap getSmallBitmap(String filePath, int reqWidth, int reqHeight) {\n        final BitmapFactory.Options options = new BitmapFactory.Options();\n        options.inJustDecodeBounds = true;  //只返回图片的大小信息\n        BitmapFactory.decodeFile(filePath, options);\n        // Calculate inSampleSize\n        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);\n        // Decode bitmap with inSampleSize set\n        options.inJustDecodeBounds = false;\n        return BitmapFactory.decodeFile(filePath, options);\n    }\n```\n这是从简书上看到的方法，只是做了一个简单的封装就使用了，亲自分别保存了压缩前的的图片和压缩后的图片，做了一下对比，红米note4上原图3M压缩完800k，当然这只是大概数据\n\n","source":"_posts/Android调起照相机、相册获取图片，并压缩图片.md","raw":"---\ntitle:  \"Android调起照相机、相册获取图片，并压缩图片\"\ndate: 2017-07-25 14:47:01\ncategories: [Android,UI]\ntags: [Android]\n---\n\n\n>最近封装了图片OCR模块，模块代码不方便贴出来，就简单记录一下图片的处理方式\n获取图片方式是让用户选择 相机拍照 或者从 相册 中选择\n\n![](http://ot0nm27pk.bkt.clouddn.com/gududemao.png)\n\n\n先说照相机方式：\n\n首先考虑Android6.0之后的动态权限处理\n```java\n  /**\n     * 核对相机权限\n     */\n    private void checkCameraPermission() {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            try {\n                int isPermission = checkSelfPermission(Manifest.permission.CAMERA);\n                if( isPermission == PackageManager.PERMISSION_GRANTED) {\n                    openCarema();\n                    return;\n                }\n                boolean shouldRequest = shouldShowRequestPermissionRationale(Manifest.permission.CAMERA);\n                if (shouldRequest) {\n                    requestCameraPermission();\n                    return;\n                }\n                showToast(\"请打开摄像机权限\");\n            } catch (RuntimeException e) { //防止MUNU系统等，更改权限的名称\n                showToast(\"请打开摄像机权限\");\n            }\n        } else {\n            openCarema();\n        }\n    }\n      /**\n     * 请求打开权限\n     */\n    @TargetApi(Build.VERSION_CODES.M)\n    private void requestCameraPermission() {\n        requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUESTCODE_OPEN_CAMERA_PERMISSION);\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        if (requestCode == REQUESTCODE_OPEN_CAMERA_PERMISSION) {\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                openCarema();\n            } else {\n                showToast(\"请打开摄像机权限\");\n            }\n        }\n    }\n\n```\n上边代码很简单明了，这里就不做赘述了\n\n下边打开相机\n```java\n \t/**\n     * 打开相机\n     */\n    private void openCarema() {\n        // 指定相机拍摄照片保存地址\n        String state = Environment.getExternalStorageState();\n        if (state.equals(Environment.MEDIA_MOUNTED)) {\n            cameraPath = SAVED_IMAGE_DIR_PATH + System.currentTimeMillis() + \".png\";\n            Intent intent = new Intent();\n            // 指定开启系统相机的Action\n            intent.setAction(MediaStore.ACTION_IMAGE_CAPTURE);\n            String out_file_path = SAVED_IMAGE_DIR_PATH;\n            File dir = new File(out_file_path);\n            if (!dir.exists()) {\n                dir.mkdirs();\n            } // 把文件地址转换成Uri格式\n            Uri uri = Uri.fromFile(new File(cameraPath));\n            // 设置系统相机拍摄照片完成后图片文件的存放地址\n            intent.putExtra(MediaStore.EXTRA_OUTPUT, uri);\n            startActivityForResult(intent, CAMERA_REQUEST_CODE);\n        } else {\n            showToast(\"请确认已经插入SD卡\");\n        }\n    }\n```\n上面可以看到，开启系统现有相机应用拍摄照片，需要用的MediaStore.ACTION_IMAGE_CAPTURE作为Intent的action开启Activity即可。但是在使用系统现有相机用用的时候，默认会把图片保存到系统图库的目录下，如果需要指定图片文件的保存路径，需要额外在Intent中设置。\n\n设置系统现有相机应用的拍摄照片的保存路径，需要用Intent.putExtra()方法通过MediaStore.EXTRA_OUTPUT去设置Intent的额外数据，这里传递的是一个Uri参数，可以是一个文件路径的Uri。\n\n<b>如果得到结果的话，我们在讲完打开相册后再说</b>\n\n相册方式\n```java\n//打开相册\nIntent intent = new Intent(Intent.ACTION_PICK, null);\nintent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, \"image/*\");\nintent.setAction(Intent.ACTION_GET_CONTENT);\nstartActivityForResult(intent, ALBUM_REQUEST_CODE);\n```\n\n处理返回结果\n```java\n  @Override\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        Bitmap bitmap = null;\n        if (resultCode == Activity.RESULT_OK) {\n            switch (requestCode) {\n                case CAMERA_REQUEST_CODE:\n                    if (TextUtils.isEmpty(cameraPath)) {\n                        showToast(\"获取摄像机图片失败\");\n                        return;\n                    }\n                    bitmap = BitmapUtils.getSmallBitmap(cameraPath, 480, 640);\n                    Logger.d(\"path=\" + cameraPath);\n                    File file = new File(cameraPath);\n                    if (file.exists()) {\n                        file.delete();\n                        Logger.d(\"删除相机图片\");\n                    }\n                    break;\n                case ALBUM_REQUEST_CODE:\n                    Uri uri = data.getData();\n                    final String absolutePath= getAbsolutePath(this, uri);\n                    if (TextUtils.isEmpty(absolutePath)) {\n                        showToast(\"获取摄像机图片失败\");\n                        return;\n                    }\n                    bitmap = BitmapUtils.getSmallBitmap(absolutePath, 480, 640);\n                    break;\n                default:\n                    break;\n            }\n            if (bitmap == null) {\n                showToast(\"获取图片失败\");\n                return;\n            }\n            fillBitmap(bitmap);\n        }\n    }\n```\n\n由上边可知BitmapUtils.getSmallBitma是得到压缩之后的图片，下边放代码\n```java\n    /**\n     * 根据路径获得突破并压缩返回bitmap用于显示\n     * 作者：QianqianLis\n     * 链接：http://www.jianshu.com/p/81e553fd0bc3\n     * 來源：简书\n     * @param filePath\n     * @return\n     */\n    public static Bitmap getSmallBitmap(String filePath, int reqWidth, int reqHeight) {\n        final BitmapFactory.Options options = new BitmapFactory.Options();\n        options.inJustDecodeBounds = true;  //只返回图片的大小信息\n        BitmapFactory.decodeFile(filePath, options);\n        // Calculate inSampleSize\n        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);\n        // Decode bitmap with inSampleSize set\n        options.inJustDecodeBounds = false;\n        return BitmapFactory.decodeFile(filePath, options);\n    }\n```\n这是从简书上看到的方法，只是做了一个简单的封装就使用了，亲自分别保存了压缩前的的图片和压缩后的图片，做了一下对比，红米note4上原图3M压缩完800k，当然这只是大概数据\n\n","slug":"Android调起照相机、相册获取图片，并压缩图片","published":1,"updated":"2017-12-26T05:14:25.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjboyl4xh000u1ctm9ih5bdgz","content":"<blockquote>\n<p>最近封装了图片OCR模块，模块代码不方便贴出来，就简单记录一下图片的处理方式<br>获取图片方式是让用户选择 相机拍照 或者从 相册 中选择</p>\n</blockquote>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/gududemao.png\" alt=\"\"></p>\n<p>先说照相机方式：</p>\n<p>首先考虑Android6.0之后的动态权限处理<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">   * 核对相机权限</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkCameraPermission</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">              <span class=\"keyword\">int</span> isPermission = checkSelfPermission(Manifest.permission.CAMERA);</div><div class=\"line\">              <span class=\"keyword\">if</span>( isPermission == PackageManager.PERMISSION_GRANTED) &#123;</div><div class=\"line\">                  openCarema();</div><div class=\"line\">                  <span class=\"keyword\">return</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">              <span class=\"keyword\">boolean</span> shouldRequest = shouldShowRequestPermissionRationale(Manifest.permission.CAMERA);</div><div class=\"line\">              <span class=\"keyword\">if</span> (shouldRequest) &#123;</div><div class=\"line\">                  requestCameraPermission();</div><div class=\"line\">                  <span class=\"keyword\">return</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">              showToast(<span class=\"string\">\"请打开摄像机权限\"</span>);</div><div class=\"line\">          &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123; <span class=\"comment\">//防止MUNU系统等，更改权限的名称</span></div><div class=\"line\">              showToast(<span class=\"string\">\"请打开摄像机权限\"</span>);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          openCarema();</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">   * 请求打开权限</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"meta\">@TargetApi</span>(Build.VERSION_CODES.M)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">requestCameraPermission</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      requestPermissions(<span class=\"keyword\">new</span> String[]&#123;Manifest.permission.CAMERA&#125;, REQUESTCODE_OPEN_CAMERA_PERMISSION);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class=\"keyword\">int</span>[] grantResults)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (requestCode == REQUESTCODE_OPEN_CAMERA_PERMISSION) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (grantResults[<span class=\"number\">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class=\"line\">              openCarema();</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              showToast(<span class=\"string\">\"请打开摄像机权限\"</span>);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>上边代码很简单明了，这里就不做赘述了</p>\n<p>下边打开相机<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">   * 打开相机</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">openCarema</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 指定相机拍摄照片保存地址</span></div><div class=\"line\">      String state = Environment.getExternalStorageState();</div><div class=\"line\">      <span class=\"keyword\">if</span> (state.equals(Environment.MEDIA_MOUNTED)) &#123;</div><div class=\"line\">          cameraPath = SAVED_IMAGE_DIR_PATH + System.currentTimeMillis() + <span class=\"string\">\".png\"</span>;</div><div class=\"line\">          Intent intent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">          <span class=\"comment\">// 指定开启系统相机的Action</span></div><div class=\"line\">          intent.setAction(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class=\"line\">          String out_file_path = SAVED_IMAGE_DIR_PATH;</div><div class=\"line\">          File dir = <span class=\"keyword\">new</span> File(out_file_path);</div><div class=\"line\">          <span class=\"keyword\">if</span> (!dir.exists()) &#123;</div><div class=\"line\">              dir.mkdirs();</div><div class=\"line\">          &#125; <span class=\"comment\">// 把文件地址转换成Uri格式</span></div><div class=\"line\">          Uri uri = Uri.fromFile(<span class=\"keyword\">new</span> File(cameraPath));</div><div class=\"line\">          <span class=\"comment\">// 设置系统相机拍摄照片完成后图片文件的存放地址</span></div><div class=\"line\">          intent.putExtra(MediaStore.EXTRA_OUTPUT, uri);</div><div class=\"line\">          startActivityForResult(intent, CAMERA_REQUEST_CODE);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          showToast(<span class=\"string\">\"请确认已经插入SD卡\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>上面可以看到，开启系统现有相机应用拍摄照片，需要用的MediaStore.ACTION_IMAGE_CAPTURE作为Intent的action开启Activity即可。但是在使用系统现有相机用用的时候，默认会把图片保存到系统图库的目录下，如果需要指定图片文件的保存路径，需要额外在Intent中设置。</p>\n<p>设置系统现有相机应用的拍摄照片的保存路径，需要用Intent.putExtra()方法通过MediaStore.EXTRA_OUTPUT去设置Intent的额外数据，这里传递的是一个Uri参数，可以是一个文件路径的Uri。</p>\n<p><b>如果得到结果的话，我们在讲完打开相册后再说</b></p>\n<p>相册方式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//打开相册</span></div><div class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_PICK, <span class=\"keyword\">null</span>);</div><div class=\"line\">intent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, <span class=\"string\">\"image/*\"</span>);</div><div class=\"line\">intent.setAction(Intent.ACTION_GET_CONTENT);</div><div class=\"line\">startActivityForResult(intent, ALBUM_REQUEST_CODE);</div></pre></td></tr></table></figure></p>\n<p>处理返回结果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class=\"line\">      Bitmap bitmap = <span class=\"keyword\">null</span>;</div><div class=\"line\">      <span class=\"keyword\">if</span> (resultCode == Activity.RESULT_OK) &#123;</div><div class=\"line\">          <span class=\"keyword\">switch</span> (requestCode) &#123;</div><div class=\"line\">              <span class=\"keyword\">case</span> CAMERA_REQUEST_CODE:</div><div class=\"line\">                  <span class=\"keyword\">if</span> (TextUtils.isEmpty(cameraPath)) &#123;</div><div class=\"line\">                      showToast(<span class=\"string\">\"获取摄像机图片失败\"</span>);</div><div class=\"line\">                      <span class=\"keyword\">return</span>;</div><div class=\"line\">                  &#125;</div><div class=\"line\">                  bitmap = BitmapUtils.getSmallBitmap(cameraPath, <span class=\"number\">480</span>, <span class=\"number\">640</span>);</div><div class=\"line\">                  Logger.d(<span class=\"string\">\"path=\"</span> + cameraPath);</div><div class=\"line\">                  File file = <span class=\"keyword\">new</span> File(cameraPath);</div><div class=\"line\">                  <span class=\"keyword\">if</span> (file.exists()) &#123;</div><div class=\"line\">                      file.delete();</div><div class=\"line\">                      Logger.d(<span class=\"string\">\"删除相机图片\"</span>);</div><div class=\"line\">                  &#125;</div><div class=\"line\">                  <span class=\"keyword\">break</span>;</div><div class=\"line\">              <span class=\"keyword\">case</span> ALBUM_REQUEST_CODE:</div><div class=\"line\">                  Uri uri = data.getData();</div><div class=\"line\">                  <span class=\"keyword\">final</span> String absolutePath= getAbsolutePath(<span class=\"keyword\">this</span>, uri);</div><div class=\"line\">                  <span class=\"keyword\">if</span> (TextUtils.isEmpty(absolutePath)) &#123;</div><div class=\"line\">                      showToast(<span class=\"string\">\"获取摄像机图片失败\"</span>);</div><div class=\"line\">                      <span class=\"keyword\">return</span>;</div><div class=\"line\">                  &#125;</div><div class=\"line\">                  bitmap = BitmapUtils.getSmallBitmap(absolutePath, <span class=\"number\">480</span>, <span class=\"number\">640</span>);</div><div class=\"line\">                  <span class=\"keyword\">break</span>;</div><div class=\"line\">              <span class=\"keyword\">default</span>:</div><div class=\"line\">                  <span class=\"keyword\">break</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">if</span> (bitmap == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              showToast(<span class=\"string\">\"获取图片失败\"</span>);</div><div class=\"line\">              <span class=\"keyword\">return</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          fillBitmap(bitmap);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>由上边可知BitmapUtils.getSmallBitma是得到压缩之后的图片，下边放代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 根据路径获得突破并压缩返回bitmap用于显示</div><div class=\"line\"> * 作者：QianqianLis</div><div class=\"line\"> * 链接：http://www.jianshu.com/p/81e553fd0bc3</div><div class=\"line\"> * 來源：简书</div><div class=\"line\"> * <span class=\"doctag\">@param</span> filePath</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">getSmallBitmap</span><span class=\"params\">(String filePath, <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> BitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();</div><div class=\"line\">    options.inJustDecodeBounds = <span class=\"keyword\">true</span>;  <span class=\"comment\">//只返回图片的大小信息</span></div><div class=\"line\">    BitmapFactory.decodeFile(filePath, options);</div><div class=\"line\">    <span class=\"comment\">// Calculate inSampleSize</span></div><div class=\"line\">    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);</div><div class=\"line\">    <span class=\"comment\">// Decode bitmap with inSampleSize set</span></div><div class=\"line\">    options.inJustDecodeBounds = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> BitmapFactory.decodeFile(filePath, options);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这是从简书上看到的方法，只是做了一个简单的封装就使用了，亲自分别保存了压缩前的的图片和压缩后的图片，做了一下对比，红米note4上原图3M压缩完800k，当然这只是大概数据</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>最近封装了图片OCR模块，模块代码不方便贴出来，就简单记录一下图片的处理方式<br>获取图片方式是让用户选择 相机拍照 或者从 相册 中选择</p>\n</blockquote>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/gududemao.png\" alt=\"\"></p>\n<p>先说照相机方式：</p>\n<p>首先考虑Android6.0之后的动态权限处理<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">   * 核对相机权限</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkCameraPermission</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">              <span class=\"keyword\">int</span> isPermission = checkSelfPermission(Manifest.permission.CAMERA);</div><div class=\"line\">              <span class=\"keyword\">if</span>( isPermission == PackageManager.PERMISSION_GRANTED) &#123;</div><div class=\"line\">                  openCarema();</div><div class=\"line\">                  <span class=\"keyword\">return</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">              <span class=\"keyword\">boolean</span> shouldRequest = shouldShowRequestPermissionRationale(Manifest.permission.CAMERA);</div><div class=\"line\">              <span class=\"keyword\">if</span> (shouldRequest) &#123;</div><div class=\"line\">                  requestCameraPermission();</div><div class=\"line\">                  <span class=\"keyword\">return</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">              showToast(<span class=\"string\">\"请打开摄像机权限\"</span>);</div><div class=\"line\">          &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123; <span class=\"comment\">//防止MUNU系统等，更改权限的名称</span></div><div class=\"line\">              showToast(<span class=\"string\">\"请打开摄像机权限\"</span>);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          openCarema();</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">   * 请求打开权限</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"meta\">@TargetApi</span>(Build.VERSION_CODES.M)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">requestCameraPermission</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      requestPermissions(<span class=\"keyword\">new</span> String[]&#123;Manifest.permission.CAMERA&#125;, REQUESTCODE_OPEN_CAMERA_PERMISSION);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class=\"keyword\">int</span>[] grantResults)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (requestCode == REQUESTCODE_OPEN_CAMERA_PERMISSION) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (grantResults[<span class=\"number\">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class=\"line\">              openCarema();</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              showToast(<span class=\"string\">\"请打开摄像机权限\"</span>);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>上边代码很简单明了，这里就不做赘述了</p>\n<p>下边打开相机<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">   * 打开相机</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">openCarema</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 指定相机拍摄照片保存地址</span></div><div class=\"line\">      String state = Environment.getExternalStorageState();</div><div class=\"line\">      <span class=\"keyword\">if</span> (state.equals(Environment.MEDIA_MOUNTED)) &#123;</div><div class=\"line\">          cameraPath = SAVED_IMAGE_DIR_PATH + System.currentTimeMillis() + <span class=\"string\">\".png\"</span>;</div><div class=\"line\">          Intent intent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">          <span class=\"comment\">// 指定开启系统相机的Action</span></div><div class=\"line\">          intent.setAction(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class=\"line\">          String out_file_path = SAVED_IMAGE_DIR_PATH;</div><div class=\"line\">          File dir = <span class=\"keyword\">new</span> File(out_file_path);</div><div class=\"line\">          <span class=\"keyword\">if</span> (!dir.exists()) &#123;</div><div class=\"line\">              dir.mkdirs();</div><div class=\"line\">          &#125; <span class=\"comment\">// 把文件地址转换成Uri格式</span></div><div class=\"line\">          Uri uri = Uri.fromFile(<span class=\"keyword\">new</span> File(cameraPath));</div><div class=\"line\">          <span class=\"comment\">// 设置系统相机拍摄照片完成后图片文件的存放地址</span></div><div class=\"line\">          intent.putExtra(MediaStore.EXTRA_OUTPUT, uri);</div><div class=\"line\">          startActivityForResult(intent, CAMERA_REQUEST_CODE);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          showToast(<span class=\"string\">\"请确认已经插入SD卡\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>上面可以看到，开启系统现有相机应用拍摄照片，需要用的MediaStore.ACTION_IMAGE_CAPTURE作为Intent的action开启Activity即可。但是在使用系统现有相机用用的时候，默认会把图片保存到系统图库的目录下，如果需要指定图片文件的保存路径，需要额外在Intent中设置。</p>\n<p>设置系统现有相机应用的拍摄照片的保存路径，需要用Intent.putExtra()方法通过MediaStore.EXTRA_OUTPUT去设置Intent的额外数据，这里传递的是一个Uri参数，可以是一个文件路径的Uri。</p>\n<p><b>如果得到结果的话，我们在讲完打开相册后再说</b></p>\n<p>相册方式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//打开相册</span></div><div class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_PICK, <span class=\"keyword\">null</span>);</div><div class=\"line\">intent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, <span class=\"string\">\"image/*\"</span>);</div><div class=\"line\">intent.setAction(Intent.ACTION_GET_CONTENT);</div><div class=\"line\">startActivityForResult(intent, ALBUM_REQUEST_CODE);</div></pre></td></tr></table></figure></p>\n<p>处理返回结果<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class=\"line\">      Bitmap bitmap = <span class=\"keyword\">null</span>;</div><div class=\"line\">      <span class=\"keyword\">if</span> (resultCode == Activity.RESULT_OK) &#123;</div><div class=\"line\">          <span class=\"keyword\">switch</span> (requestCode) &#123;</div><div class=\"line\">              <span class=\"keyword\">case</span> CAMERA_REQUEST_CODE:</div><div class=\"line\">                  <span class=\"keyword\">if</span> (TextUtils.isEmpty(cameraPath)) &#123;</div><div class=\"line\">                      showToast(<span class=\"string\">\"获取摄像机图片失败\"</span>);</div><div class=\"line\">                      <span class=\"keyword\">return</span>;</div><div class=\"line\">                  &#125;</div><div class=\"line\">                  bitmap = BitmapUtils.getSmallBitmap(cameraPath, <span class=\"number\">480</span>, <span class=\"number\">640</span>);</div><div class=\"line\">                  Logger.d(<span class=\"string\">\"path=\"</span> + cameraPath);</div><div class=\"line\">                  File file = <span class=\"keyword\">new</span> File(cameraPath);</div><div class=\"line\">                  <span class=\"keyword\">if</span> (file.exists()) &#123;</div><div class=\"line\">                      file.delete();</div><div class=\"line\">                      Logger.d(<span class=\"string\">\"删除相机图片\"</span>);</div><div class=\"line\">                  &#125;</div><div class=\"line\">                  <span class=\"keyword\">break</span>;</div><div class=\"line\">              <span class=\"keyword\">case</span> ALBUM_REQUEST_CODE:</div><div class=\"line\">                  Uri uri = data.getData();</div><div class=\"line\">                  <span class=\"keyword\">final</span> String absolutePath= getAbsolutePath(<span class=\"keyword\">this</span>, uri);</div><div class=\"line\">                  <span class=\"keyword\">if</span> (TextUtils.isEmpty(absolutePath)) &#123;</div><div class=\"line\">                      showToast(<span class=\"string\">\"获取摄像机图片失败\"</span>);</div><div class=\"line\">                      <span class=\"keyword\">return</span>;</div><div class=\"line\">                  &#125;</div><div class=\"line\">                  bitmap = BitmapUtils.getSmallBitmap(absolutePath, <span class=\"number\">480</span>, <span class=\"number\">640</span>);</div><div class=\"line\">                  <span class=\"keyword\">break</span>;</div><div class=\"line\">              <span class=\"keyword\">default</span>:</div><div class=\"line\">                  <span class=\"keyword\">break</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">if</span> (bitmap == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              showToast(<span class=\"string\">\"获取图片失败\"</span>);</div><div class=\"line\">              <span class=\"keyword\">return</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          fillBitmap(bitmap);</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>由上边可知BitmapUtils.getSmallBitma是得到压缩之后的图片，下边放代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 根据路径获得突破并压缩返回bitmap用于显示</div><div class=\"line\"> * 作者：QianqianLis</div><div class=\"line\"> * 链接：http://www.jianshu.com/p/81e553fd0bc3</div><div class=\"line\"> * 來源：简书</div><div class=\"line\"> * <span class=\"doctag\">@param</span> filePath</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">getSmallBitmap</span><span class=\"params\">(String filePath, <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> BitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();</div><div class=\"line\">    options.inJustDecodeBounds = <span class=\"keyword\">true</span>;  <span class=\"comment\">//只返回图片的大小信息</span></div><div class=\"line\">    BitmapFactory.decodeFile(filePath, options);</div><div class=\"line\">    <span class=\"comment\">// Calculate inSampleSize</span></div><div class=\"line\">    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);</div><div class=\"line\">    <span class=\"comment\">// Decode bitmap with inSampleSize set</span></div><div class=\"line\">    options.inJustDecodeBounds = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> BitmapFactory.decodeFile(filePath, options);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这是从简书上看到的方法，只是做了一个简单的封装就使用了，亲自分别保存了压缩前的的图片和压缩后的图片，做了一下对比，红米note4上原图3M压缩完800k，当然这只是大概数据</p>\n"},{"layout":"post","title":"OkHttp接口拦截打印log的设置","date":"2016-06-29T16:00:00.000Z","_content":"\n通常调试网络接口时都会将网络请求和响应相关数据通过日志的形式打印出来。OkHttp也提供了一个网络拦截器okhttp-logging-interceptor，通过它能拦截okhttp网络请求和响应所有相关信息（请求行、请求头、请求体、响应行、响应行、响应头、响应体）。\n\n<hr>\n\n- 使用okhttp网络日志拦截器：\n\n\t\tcompile 'com.squareup.okhttp3:logging-interceptor:3.5.0'\n\t\n- 定义拦截器中的网络日志工具\n\n\t\tpublic class HttpLogger implements HttpLoggingInterceptor.Logger {\n\t\t\t@Override\n\t\t\tpublic void log(String message) {\n\t\t\t    Log.d(\"HttpLogInfo\", message);\n\t\t\t}\n\t\t }\n\t \n- 初始化OkHttpClient，并添加网络日志拦截器\n\n        ```java\n\t\t/**\n\t\t* 初始化okhttpclient.\n\t\t*\n\t\t* @return okhttpClient\n\t\t*/\n\t\tprivate OkHttpClient okhttpclient() {\n\t\t    if (mOkHttpClient == null) {\n\t\t\tHttpLoggingInterceptor logInterceptor = new HttpLoggingInterceptor(new HttpLogger());\n\t\t\tlogInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);\n\t\t\tmOkHttpClient = new OkHttpClient.Builder()\n\t\t\t    .connectTimeout(15, TimeUnit.SECONDS)\n\t\t\t    .addNetworkInterceptor(logInterceptor)\n\t\t\t    .build();\n\t\t    }\n\t\t    return mOkHttpClient;\n\t\t}\n\t\t```\n\t\n- 打印出来的日志\n\t- 拦截的网络请求日志信息1\n\n\t![](http://ot0nm27pk.bkt.clouddn.com/logger_01.png)\n\n\t- 拦截的网络请求日志信息2\n\n\t![](http://ot0nm27pk.bkt.clouddn.com/logger_02.png)\n\n\t- 拦截的网络请求日志信息3\n\n\t![](http://ot0nm27pk.bkt.clouddn.com/logger_03.png)\n\t\n\t\n<hr>\n\n- 注意:\n在给OkhttpClient添加网络请求拦截器的时候应该调用方法addNetworkInterceptor，而不是addInterceptor。因为有时候可能会通过cookieJar在header里面去添加一些持久化的cookie或者session信息。这样就在请求头里面就不会打印出这些信息。\n\n看一下OkHttpClient调用拦截器的源码：\n\n\n\tResponse getResponseWithInterceptorChain() throws IOException {\n\t    // Build a full stack of interceptors.\n\t    List<Interceptor> interceptors = new ArrayList<>();\n\t    interceptors.addAll(client.interceptors());\n\t    interceptors.add(retryAndFollowUpInterceptor);\n\t    interceptors.add(new BridgeInterceptor(client.cookieJar()));\n\t    interceptors.add(new CacheInterceptor(client.internalCache()));\n\t    interceptors.add(new ConnectInterceptor(client));\n\t    if (!forWebSocket) {\n\t      interceptors.addAll(client.networkInterceptors());\n\t    }\n\t    interceptors.add(new CallServerInterceptor(forWebSocket));\n\t    Interceptor.Chain chain = new RealInterceptorChain(\n\t\tinterceptors, null, null, null, 0, originalRequest);\n\t    return chain.proceed(originalRequest);\n\t  }\n在okhttp执行网络请求时，会先构造拦截链，此时是将所有的拦截器都放入一个ArrayList中，看源码就知道添加拦截器的顺序是：\n\n\tclient.interceptors()，\n\tBridgeInterceptor，\n\tCacheInterceptor，\n\tConnectInterceptor，\n\tnetworkInterceptors，\n\tCallServerInterceptor。\n\t在通过拦截链执行拦截逻辑是按先后顺序递归调用的。如果是我们调用addInterceptor方法来添加HttpLoggingInterceptor拦截器，那么网络日志拦截器就会被添加到client.networkInterceptors()里面，根据添加到ArrayList中的顺序，执行拦截时会先执行HttpLoggingInterceptor，并打印出日志。然后才会执行CookieJar包装的拦截器BridgeInterceptor。这就导致我们添加header中的cookie等信息不会打印出来。\n\t\n<hr>\n\n现在我们打印出了完整的日志，但是格式看起来很不舒服，下面我们来对打印出来的数据格式化。\n\n我采用的是开源日志库looger来打印\n\n加入依赖：\n\n \tcompile 'com.orhanobut:logger:1.15'\n\t\n使用looger库的时候建议先封装一层，作为一个工具类。\n\n\tpublic class LogUtil {\n\t    /**\n\t     * 初始化log工具，在app入口处调用\n\t     *\n\t     * @param isLogEnable 是否打印log\n\t     */\n\t    public static void init(boolean isLogEnable) {\n\t\tLogger.init(\"LogHttpInfo\")\n\t\t        .hideThreadInfo()\n\t\t        .logLevel(isLogEnable ? LogLevel.FULL : LogLevel.NONE)\n\t\t        .methodOffset(2);\n\t    }\n\n\t    public static void d(String message) {\n\t\tLogger.d(message);\n\t    }\n\n\t    public static void i(String message) {\n\t\tLogger.i(message);\n\t    }\n\n\t    public static void w(String message, Throwable e) {\n\t\tString info = e != null ? e.toString() : \"null\";\n\t\tLogger.w(message + \"：\" + info);\n\t    }\n\n\t    public static void e(String message, Throwable e) {\n\t\tLogger.e(e, message);\n\t    }\n\n\t    public static void json(String json) {\n\t\tLogger.json(json);\n\t    }\n\t}\n\t\n我们还需要在Application调用初始化方法\n\n\t// 初始化Looger工具\n\tLogUtil.init(BuildConfig.LOG_DEBUG);\n\t\n这时候我们继续写HttpLogger类\n\n\tprivate class HttpLogger implements HttpLoggingInterceptor.Logger {\n\t    private StringBuilder mMessage = new StringBuilder();\n\n\t    @Override\n\t    public void log(String message) {\n\t\t// 请求或者响应开始\n\t\tif (message.startsWith(\"--> POST\")) {\n\t\t    mMessage.setLength(0);\n\t\t}\n\t\t// 以{}或者[]形式的说明是响应结果的json数据，需要进行格式化\n\t\tif ((message.startsWith(\"{\") && message.endsWith(\"}\"))\n\t\t    || (message.startsWith(\"[\") && message.endsWith(\"]\"))) {\n\t\t    message = formatJson(decodeUnicode(message));\n\t\t}\n\t\tmMessage.append(message.concat(\"\\n\"));\n\t\t// 响应结束，打印整条日志\n\t\tif (message.startsWith(\"<-- END HTTP\")) {\n\t\t    LogUtil.d(mMessage.toString());\n\t\t}\n\t    }\n\t    /**\n\t\t * 格式化json字符串\n\t\t *\n\t\t * @param jsonStr 需要格式化的json串\n\t\t * @return 格式化后的json串\n\t\t */\n\t\tpublic static String formatJson(String jsonStr) {\n\t\t    if (null == jsonStr || \"\".equals(jsonStr)) return \"\";\n\t\t    StringBuilder sb = new StringBuilder();\n\t\t    char last = '\\0';\n\t\t    char current = '\\0';\n\t\t    int indent = 0;\n\t\t    for (int i = 0; i < jsonStr.length(); i++) {\n\t\t\tlast = current;\n\t\t\tcurrent = jsonStr.charAt(i);\n\t\t\t//遇到{ [换行，且下一行缩进\n\t\t\tswitch (current) {\n\t\t\t    case '{':\n\t\t\t    case '[':\n\t\t\t\tsb.append(current);\n\t\t\t\tsb.append('\\n');\n\t\t\t\tindent++;\n\t\t\t\taddIndentBlank(sb, indent);\n\t\t\t\tbreak;\n\t\t\t    //遇到} ]换行，当前行缩进\n\t\t\t    case '}':\n\t\t\t    case ']':\n\t\t\t\tsb.append('\\n');\n\t\t\t\tindent--;\n\t\t\t\taddIndentBlank(sb, indent);\n\t\t\t\tsb.append(current);\n\t\t\t\tbreak;\n\t\t\t    //遇到,换行\n\t\t\t    case ',':\n\t\t\t\tsb.append(current);\n\t\t\t\tif (last != '\\\\') {\n\t\t\t\t    sb.append('\\n');\n\t\t\t\t    addIndentBlank(sb, indent);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\tsb.append(current);\n\t\t\t}\n\t\t    }\n\t\treturn sb.toString();\n\t\t}\n\n\t\t/**\n\t\t * 添加space\n\t\t *\n\t\t * @param sb\n\t\t * @param indent\n\t\t */\n\t\tprivate static void addIndentBlank(StringBuilder sb, int indent) {\n\t\t    for (int i = 0; i < indent; i++) {\n\t\t\tsb.append('\\t');\n\t\t    }\n\t\t}\n\t\t/**\n\t\t * http 请求数据返回 json 中中文字符为 unicode 编码转汉字转码\n\t\t *\n\t\t * @param theString\n\t\t * @return 转化后的结果.\n\t\t */\n\t\tpublic static String decodeUnicode(String theString) {\n\t\t    char aChar;\n\t\t    int len = theString.length();\n\t\t    StringBuffer outBuffer = new StringBuffer(len);\n\t\t    for (int x = 0; x < len; ) {\n\t\t\taChar = theString.charAt(x++);\n\t\t\tif (aChar == '\\\\') {\n\t\t\t    aChar = theString.charAt(x++);\n\t\t\t    if (aChar == 'u') {\n\t\t\t\tint value = 0;\n\t\t\t\tfor (int i = 0; i < 4; i++) {\n\t\t\t\t    aChar = theString.charAt(x++);\n\t\t\t\t    switch (aChar) {\n\t\t\t\t        case '0':\n\t\t\t\t        case '1':\n\t\t\t\t        case '2':\n\t\t\t\t        case '3':\n\t\t\t\t        case '4':\n\t\t\t\t        case '5':\n\t\t\t\t        case '6':\n\t\t\t\t        case '7':\n\t\t\t\t        case '8':\n\t\t\t\t        case '9':\n\t\t\t\t            value = (value << 4) + aChar - '0';\n\t\t\t\t            break;\n\t\t\t\t        case 'a':\n\t\t\t\t        case 'b':\n\t\t\t\t        case 'c':\n\t\t\t\t        case 'd':\n\t\t\t\t        case 'e':\n\t\t\t\t        case 'f':\n\t\t\t\t            value = (value << 4) + 10 + aChar - 'a';\n\t\t\t\t            break;\n\t\t\t\t        case 'A':\n\t\t\t\t        case 'B':\n\t\t\t\t        case 'C':\n\t\t\t\t        case 'D':\n\t\t\t\t        case 'E':\n\t\t\t\t        case 'F':\n\t\t\t\t            value = (value << 4) + 10 + aChar - 'A';\n\t\t\t\t            break;\n\t\t\t\t        default:\n\t\t\t\t            throw new IllegalArgumentException(\n\t\t\t\t                    \"Malformed   \\\\uxxxx   encoding.\");\n\t\t\t\t    }\n\n\t\t\t\t}\n\t\t\t\toutBuffer.append((char) value);\n\t\t\t    } else {\n\t\t\t\tif (aChar == 't')\n\t\t\t\t    aChar = '\\t';\n\t\t\t\telse if (aChar == 'r')\n\t\t\t\t    aChar = '\\r';\n\t\t\t\telse if (aChar == 'n')\n\t\t\t\t    aChar = '\\n';\n\t\t\t\telse if (aChar == 'f')\n\t\t\t\t    aChar = '\\f';\n\t\t\t\toutBuffer.append(aChar);\n\t\t\t    }\n\t\t\t} else\n\t\t\t    outBuffer.append(aChar);\n\t\t    }\n\t\t    return outBuffer.toString();\n\t\t}\t\t\n\t}\n\t\n<hr>\n\n最终效果\n\n\tD/LogHttpInfo: ╔════════════════════════════════════════════════════════════════════════════════════════\n\tD/LogHttpInfo: ║ RealInterceptorChain.proceed  (RealInterceptorChain.java:92)\n\tD/LogHttpInfo: ║    HttpLoggingInterceptor.intercept  (HttpLoggingInterceptor.java:266)\n\tD/LogHttpInfo: ╟────────────────────────────────────────────────────────────────────────────────────────\n\tD/LogHttpInfo: ║ --> POST http://op.juhe.cn/onebox/movie/video http/1.1\n\tD/LogHttpInfo: ║ Content-Type: application/x-www-form-urlencoded\n\tD/LogHttpInfo: ║ Content-Length: 95\n\tD/LogHttpInfo: ║ Host: op.juhe.cn\n\tD/LogHttpInfo: ║ Connection: Keep-Alive\n\tD/LogHttpInfo: ║ Accept-Encoding: gzip\n\tD/LogHttpInfo: ║ User-Agent: okhttp/3.5.0\n\tD/LogHttpInfo: ║ \n\tD/LogHttpInfo: ║ key=a3d3a43fcc149b6ed8268b8fa41d27b7&dtype=json&q=%E9%81%97%E8%90%BD%E7%9A%84%E4%B8%96%E7%95%8C\n\tD/LogHttpInfo: ║ --> END POST (95-byte body)\n\tD/LogHttpInfo: ║ <-- 200 OK http://op.juhe.cn/onebox/movie/video (760ms)\n\tD/LogHttpInfo: ║ Server: nginx\n\tD/LogHttpInfo: ║ Date: Mon, 16 Jan 2017 09:36:35 GMT\n\tD/LogHttpInfo: ║ Content-Type: application/json;charset=utf-8\n\tD/LogHttpInfo: ║ Transfer-Encoding: chunked\n\tD/LogHttpInfo: ║ Connection: keep-alive\n\tD/LogHttpInfo: ║ X-Powered-By: PHP/5.6.23\n\tD/LogHttpInfo: ║ \n\tD/LogHttpInfo: ║ {\n\tD/LogHttpInfo: ║     \"reason\":\"查询成功\",\n\tD/LogHttpInfo: ║     \"result\":{\n\t\t\t\t\t\t\t...\n\tD/LogHttpInfo: ║     },\n\tD/LogHttpInfo: ║     \"error_code\":0\n\tD/LogHttpInfo: ║ }\n\tD/LogHttpInfo: ║ <-- END HTTP (2994-byte body)\n\tD/LogHttpInfo: ╚══════════════════════════════════════════════════════════════════\n\n<hr>\n以上就是所有的设置了，下面来说一下怎么更改打印的log不同等级的颜色\n\n流程：\n\n\t1. File->Settings 或Ctrl + Alt +S\n\t2. 找到 Editor -> Colors &Fonts -> Android Logcat 或在上面的搜索框中输入Logcat\n\t3. 点中Verbose , Info, Debug等选项，然后在后面将Use Inberited attributes 去掉勾选\n\t4. 再将 Foreground 前的复选框选上，就可以双击后面的框框去选择颜色了\n\tApply–>OK\n\n对应颜色值：\n\n\tVERBOSE\tBBBBBB\n\tDEBUG\t0070BB\n\tINFO\t48BB31\n\tWARN\tBBBB23\n\tERROR\tFF0006\n\tASSERT\t8F0005\n\t\n效果：\n\n![](http://ot0nm27pk.bkt.clouddn.com/logger_04.png)\n\t\n","source":"_posts/OkHttp接口拦截打印log的设置.md","raw":"---\nlayout: post\ntitle:  \"OkHttp接口拦截打印log的设置\"\ndate:   2016-06-30 \ncategories: [Android,网络]\ntags: [Android]\n---\n\n通常调试网络接口时都会将网络请求和响应相关数据通过日志的形式打印出来。OkHttp也提供了一个网络拦截器okhttp-logging-interceptor，通过它能拦截okhttp网络请求和响应所有相关信息（请求行、请求头、请求体、响应行、响应行、响应头、响应体）。\n\n<hr>\n\n- 使用okhttp网络日志拦截器：\n\n\t\tcompile 'com.squareup.okhttp3:logging-interceptor:3.5.0'\n\t\n- 定义拦截器中的网络日志工具\n\n\t\tpublic class HttpLogger implements HttpLoggingInterceptor.Logger {\n\t\t\t@Override\n\t\t\tpublic void log(String message) {\n\t\t\t    Log.d(\"HttpLogInfo\", message);\n\t\t\t}\n\t\t }\n\t \n- 初始化OkHttpClient，并添加网络日志拦截器\n\n        ```java\n\t\t/**\n\t\t* 初始化okhttpclient.\n\t\t*\n\t\t* @return okhttpClient\n\t\t*/\n\t\tprivate OkHttpClient okhttpclient() {\n\t\t    if (mOkHttpClient == null) {\n\t\t\tHttpLoggingInterceptor logInterceptor = new HttpLoggingInterceptor(new HttpLogger());\n\t\t\tlogInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);\n\t\t\tmOkHttpClient = new OkHttpClient.Builder()\n\t\t\t    .connectTimeout(15, TimeUnit.SECONDS)\n\t\t\t    .addNetworkInterceptor(logInterceptor)\n\t\t\t    .build();\n\t\t    }\n\t\t    return mOkHttpClient;\n\t\t}\n\t\t```\n\t\n- 打印出来的日志\n\t- 拦截的网络请求日志信息1\n\n\t![](http://ot0nm27pk.bkt.clouddn.com/logger_01.png)\n\n\t- 拦截的网络请求日志信息2\n\n\t![](http://ot0nm27pk.bkt.clouddn.com/logger_02.png)\n\n\t- 拦截的网络请求日志信息3\n\n\t![](http://ot0nm27pk.bkt.clouddn.com/logger_03.png)\n\t\n\t\n<hr>\n\n- 注意:\n在给OkhttpClient添加网络请求拦截器的时候应该调用方法addNetworkInterceptor，而不是addInterceptor。因为有时候可能会通过cookieJar在header里面去添加一些持久化的cookie或者session信息。这样就在请求头里面就不会打印出这些信息。\n\n看一下OkHttpClient调用拦截器的源码：\n\n\n\tResponse getResponseWithInterceptorChain() throws IOException {\n\t    // Build a full stack of interceptors.\n\t    List<Interceptor> interceptors = new ArrayList<>();\n\t    interceptors.addAll(client.interceptors());\n\t    interceptors.add(retryAndFollowUpInterceptor);\n\t    interceptors.add(new BridgeInterceptor(client.cookieJar()));\n\t    interceptors.add(new CacheInterceptor(client.internalCache()));\n\t    interceptors.add(new ConnectInterceptor(client));\n\t    if (!forWebSocket) {\n\t      interceptors.addAll(client.networkInterceptors());\n\t    }\n\t    interceptors.add(new CallServerInterceptor(forWebSocket));\n\t    Interceptor.Chain chain = new RealInterceptorChain(\n\t\tinterceptors, null, null, null, 0, originalRequest);\n\t    return chain.proceed(originalRequest);\n\t  }\n在okhttp执行网络请求时，会先构造拦截链，此时是将所有的拦截器都放入一个ArrayList中，看源码就知道添加拦截器的顺序是：\n\n\tclient.interceptors()，\n\tBridgeInterceptor，\n\tCacheInterceptor，\n\tConnectInterceptor，\n\tnetworkInterceptors，\n\tCallServerInterceptor。\n\t在通过拦截链执行拦截逻辑是按先后顺序递归调用的。如果是我们调用addInterceptor方法来添加HttpLoggingInterceptor拦截器，那么网络日志拦截器就会被添加到client.networkInterceptors()里面，根据添加到ArrayList中的顺序，执行拦截时会先执行HttpLoggingInterceptor，并打印出日志。然后才会执行CookieJar包装的拦截器BridgeInterceptor。这就导致我们添加header中的cookie等信息不会打印出来。\n\t\n<hr>\n\n现在我们打印出了完整的日志，但是格式看起来很不舒服，下面我们来对打印出来的数据格式化。\n\n我采用的是开源日志库looger来打印\n\n加入依赖：\n\n \tcompile 'com.orhanobut:logger:1.15'\n\t\n使用looger库的时候建议先封装一层，作为一个工具类。\n\n\tpublic class LogUtil {\n\t    /**\n\t     * 初始化log工具，在app入口处调用\n\t     *\n\t     * @param isLogEnable 是否打印log\n\t     */\n\t    public static void init(boolean isLogEnable) {\n\t\tLogger.init(\"LogHttpInfo\")\n\t\t        .hideThreadInfo()\n\t\t        .logLevel(isLogEnable ? LogLevel.FULL : LogLevel.NONE)\n\t\t        .methodOffset(2);\n\t    }\n\n\t    public static void d(String message) {\n\t\tLogger.d(message);\n\t    }\n\n\t    public static void i(String message) {\n\t\tLogger.i(message);\n\t    }\n\n\t    public static void w(String message, Throwable e) {\n\t\tString info = e != null ? e.toString() : \"null\";\n\t\tLogger.w(message + \"：\" + info);\n\t    }\n\n\t    public static void e(String message, Throwable e) {\n\t\tLogger.e(e, message);\n\t    }\n\n\t    public static void json(String json) {\n\t\tLogger.json(json);\n\t    }\n\t}\n\t\n我们还需要在Application调用初始化方法\n\n\t// 初始化Looger工具\n\tLogUtil.init(BuildConfig.LOG_DEBUG);\n\t\n这时候我们继续写HttpLogger类\n\n\tprivate class HttpLogger implements HttpLoggingInterceptor.Logger {\n\t    private StringBuilder mMessage = new StringBuilder();\n\n\t    @Override\n\t    public void log(String message) {\n\t\t// 请求或者响应开始\n\t\tif (message.startsWith(\"--> POST\")) {\n\t\t    mMessage.setLength(0);\n\t\t}\n\t\t// 以{}或者[]形式的说明是响应结果的json数据，需要进行格式化\n\t\tif ((message.startsWith(\"{\") && message.endsWith(\"}\"))\n\t\t    || (message.startsWith(\"[\") && message.endsWith(\"]\"))) {\n\t\t    message = formatJson(decodeUnicode(message));\n\t\t}\n\t\tmMessage.append(message.concat(\"\\n\"));\n\t\t// 响应结束，打印整条日志\n\t\tif (message.startsWith(\"<-- END HTTP\")) {\n\t\t    LogUtil.d(mMessage.toString());\n\t\t}\n\t    }\n\t    /**\n\t\t * 格式化json字符串\n\t\t *\n\t\t * @param jsonStr 需要格式化的json串\n\t\t * @return 格式化后的json串\n\t\t */\n\t\tpublic static String formatJson(String jsonStr) {\n\t\t    if (null == jsonStr || \"\".equals(jsonStr)) return \"\";\n\t\t    StringBuilder sb = new StringBuilder();\n\t\t    char last = '\\0';\n\t\t    char current = '\\0';\n\t\t    int indent = 0;\n\t\t    for (int i = 0; i < jsonStr.length(); i++) {\n\t\t\tlast = current;\n\t\t\tcurrent = jsonStr.charAt(i);\n\t\t\t//遇到{ [换行，且下一行缩进\n\t\t\tswitch (current) {\n\t\t\t    case '{':\n\t\t\t    case '[':\n\t\t\t\tsb.append(current);\n\t\t\t\tsb.append('\\n');\n\t\t\t\tindent++;\n\t\t\t\taddIndentBlank(sb, indent);\n\t\t\t\tbreak;\n\t\t\t    //遇到} ]换行，当前行缩进\n\t\t\t    case '}':\n\t\t\t    case ']':\n\t\t\t\tsb.append('\\n');\n\t\t\t\tindent--;\n\t\t\t\taddIndentBlank(sb, indent);\n\t\t\t\tsb.append(current);\n\t\t\t\tbreak;\n\t\t\t    //遇到,换行\n\t\t\t    case ',':\n\t\t\t\tsb.append(current);\n\t\t\t\tif (last != '\\\\') {\n\t\t\t\t    sb.append('\\n');\n\t\t\t\t    addIndentBlank(sb, indent);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t    default:\n\t\t\t\tsb.append(current);\n\t\t\t}\n\t\t    }\n\t\treturn sb.toString();\n\t\t}\n\n\t\t/**\n\t\t * 添加space\n\t\t *\n\t\t * @param sb\n\t\t * @param indent\n\t\t */\n\t\tprivate static void addIndentBlank(StringBuilder sb, int indent) {\n\t\t    for (int i = 0; i < indent; i++) {\n\t\t\tsb.append('\\t');\n\t\t    }\n\t\t}\n\t\t/**\n\t\t * http 请求数据返回 json 中中文字符为 unicode 编码转汉字转码\n\t\t *\n\t\t * @param theString\n\t\t * @return 转化后的结果.\n\t\t */\n\t\tpublic static String decodeUnicode(String theString) {\n\t\t    char aChar;\n\t\t    int len = theString.length();\n\t\t    StringBuffer outBuffer = new StringBuffer(len);\n\t\t    for (int x = 0; x < len; ) {\n\t\t\taChar = theString.charAt(x++);\n\t\t\tif (aChar == '\\\\') {\n\t\t\t    aChar = theString.charAt(x++);\n\t\t\t    if (aChar == 'u') {\n\t\t\t\tint value = 0;\n\t\t\t\tfor (int i = 0; i < 4; i++) {\n\t\t\t\t    aChar = theString.charAt(x++);\n\t\t\t\t    switch (aChar) {\n\t\t\t\t        case '0':\n\t\t\t\t        case '1':\n\t\t\t\t        case '2':\n\t\t\t\t        case '3':\n\t\t\t\t        case '4':\n\t\t\t\t        case '5':\n\t\t\t\t        case '6':\n\t\t\t\t        case '7':\n\t\t\t\t        case '8':\n\t\t\t\t        case '9':\n\t\t\t\t            value = (value << 4) + aChar - '0';\n\t\t\t\t            break;\n\t\t\t\t        case 'a':\n\t\t\t\t        case 'b':\n\t\t\t\t        case 'c':\n\t\t\t\t        case 'd':\n\t\t\t\t        case 'e':\n\t\t\t\t        case 'f':\n\t\t\t\t            value = (value << 4) + 10 + aChar - 'a';\n\t\t\t\t            break;\n\t\t\t\t        case 'A':\n\t\t\t\t        case 'B':\n\t\t\t\t        case 'C':\n\t\t\t\t        case 'D':\n\t\t\t\t        case 'E':\n\t\t\t\t        case 'F':\n\t\t\t\t            value = (value << 4) + 10 + aChar - 'A';\n\t\t\t\t            break;\n\t\t\t\t        default:\n\t\t\t\t            throw new IllegalArgumentException(\n\t\t\t\t                    \"Malformed   \\\\uxxxx   encoding.\");\n\t\t\t\t    }\n\n\t\t\t\t}\n\t\t\t\toutBuffer.append((char) value);\n\t\t\t    } else {\n\t\t\t\tif (aChar == 't')\n\t\t\t\t    aChar = '\\t';\n\t\t\t\telse if (aChar == 'r')\n\t\t\t\t    aChar = '\\r';\n\t\t\t\telse if (aChar == 'n')\n\t\t\t\t    aChar = '\\n';\n\t\t\t\telse if (aChar == 'f')\n\t\t\t\t    aChar = '\\f';\n\t\t\t\toutBuffer.append(aChar);\n\t\t\t    }\n\t\t\t} else\n\t\t\t    outBuffer.append(aChar);\n\t\t    }\n\t\t    return outBuffer.toString();\n\t\t}\t\t\n\t}\n\t\n<hr>\n\n最终效果\n\n\tD/LogHttpInfo: ╔════════════════════════════════════════════════════════════════════════════════════════\n\tD/LogHttpInfo: ║ RealInterceptorChain.proceed  (RealInterceptorChain.java:92)\n\tD/LogHttpInfo: ║    HttpLoggingInterceptor.intercept  (HttpLoggingInterceptor.java:266)\n\tD/LogHttpInfo: ╟────────────────────────────────────────────────────────────────────────────────────────\n\tD/LogHttpInfo: ║ --> POST http://op.juhe.cn/onebox/movie/video http/1.1\n\tD/LogHttpInfo: ║ Content-Type: application/x-www-form-urlencoded\n\tD/LogHttpInfo: ║ Content-Length: 95\n\tD/LogHttpInfo: ║ Host: op.juhe.cn\n\tD/LogHttpInfo: ║ Connection: Keep-Alive\n\tD/LogHttpInfo: ║ Accept-Encoding: gzip\n\tD/LogHttpInfo: ║ User-Agent: okhttp/3.5.0\n\tD/LogHttpInfo: ║ \n\tD/LogHttpInfo: ║ key=a3d3a43fcc149b6ed8268b8fa41d27b7&dtype=json&q=%E9%81%97%E8%90%BD%E7%9A%84%E4%B8%96%E7%95%8C\n\tD/LogHttpInfo: ║ --> END POST (95-byte body)\n\tD/LogHttpInfo: ║ <-- 200 OK http://op.juhe.cn/onebox/movie/video (760ms)\n\tD/LogHttpInfo: ║ Server: nginx\n\tD/LogHttpInfo: ║ Date: Mon, 16 Jan 2017 09:36:35 GMT\n\tD/LogHttpInfo: ║ Content-Type: application/json;charset=utf-8\n\tD/LogHttpInfo: ║ Transfer-Encoding: chunked\n\tD/LogHttpInfo: ║ Connection: keep-alive\n\tD/LogHttpInfo: ║ X-Powered-By: PHP/5.6.23\n\tD/LogHttpInfo: ║ \n\tD/LogHttpInfo: ║ {\n\tD/LogHttpInfo: ║     \"reason\":\"查询成功\",\n\tD/LogHttpInfo: ║     \"result\":{\n\t\t\t\t\t\t\t...\n\tD/LogHttpInfo: ║     },\n\tD/LogHttpInfo: ║     \"error_code\":0\n\tD/LogHttpInfo: ║ }\n\tD/LogHttpInfo: ║ <-- END HTTP (2994-byte body)\n\tD/LogHttpInfo: ╚══════════════════════════════════════════════════════════════════\n\n<hr>\n以上就是所有的设置了，下面来说一下怎么更改打印的log不同等级的颜色\n\n流程：\n\n\t1. File->Settings 或Ctrl + Alt +S\n\t2. 找到 Editor -> Colors &Fonts -> Android Logcat 或在上面的搜索框中输入Logcat\n\t3. 点中Verbose , Info, Debug等选项，然后在后面将Use Inberited attributes 去掉勾选\n\t4. 再将 Foreground 前的复选框选上，就可以双击后面的框框去选择颜色了\n\tApply–>OK\n\n对应颜色值：\n\n\tVERBOSE\tBBBBBB\n\tDEBUG\t0070BB\n\tINFO\t48BB31\n\tWARN\tBBBB23\n\tERROR\tFF0006\n\tASSERT\t8F0005\n\t\n效果：\n\n![](http://ot0nm27pk.bkt.clouddn.com/logger_04.png)\n\t\n","slug":"OkHttp接口拦截打印log的设置","published":1,"updated":"2017-12-26T05:14:25.507Z","comments":1,"photos":[],"link":"","_id":"cjboyl4xk000y1ctm6o9qustj","content":"<p>通常调试网络接口时都会将网络请求和响应相关数据通过日志的形式打印出来。OkHttp也提供了一个网络拦截器okhttp-logging-interceptor，通过它能拦截okhttp网络请求和响应所有相关信息（请求行、请求头、请求体、响应行、响应行、响应头、响应体）。</p>\n<hr>\n\n<ul>\n<li><p>使用okhttp网络日志拦截器：</p>\n<pre><code>compile &apos;com.squareup.okhttp3:logging-interceptor:3.5.0&apos;\n</code></pre></li>\n<li><p>定义拦截器中的网络日志工具</p>\n<pre><code>public class HttpLogger implements HttpLoggingInterceptor.Logger {\n    @Override\n    public void log(String message) {\n        Log.d(&quot;HttpLogInfo&quot;, message);\n    }\n }\n</code></pre></li>\n<li><p>初始化OkHttpClient，并添加网络日志拦截器</p>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 初始化okhttpclient.</div><div class=\"line\">*</div><div class=\"line\">* <span class=\"doctag\">@return</span> okhttpClient</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> OkHttpClient <span class=\"title\">okhttpclient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mOkHttpClient == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">trueHttpLoggingInterceptor logInterceptor = <span class=\"keyword\">new</span> HttpLoggingInterceptor(<span class=\"keyword\">new</span> HttpLogger());</div><div class=\"line\">truelogInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);</div><div class=\"line\">truemOkHttpClient = <span class=\"keyword\">new</span> OkHttpClient.Builder()</div><div class=\"line\">true    .connectTimeout(<span class=\"number\">15</span>, TimeUnit.SECONDS)</div><div class=\"line\">true    .addNetworkInterceptor(logInterceptor)</div><div class=\"line\">true    .build();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> mOkHttpClient;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre></li>\n</ul>\n<ul>\n<li><p>打印出来的日志</p>\n<ul>\n<li><p>拦截的网络请求日志信息1</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/logger_01.png\" alt=\"\"></p>\n</li>\n<li><p>拦截的网络请求日志信息2</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/logger_02.png\" alt=\"\"></p>\n</li>\n<li><p>拦截的网络请求日志信息3</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/logger_03.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n\n<ul>\n<li>注意:<br>在给OkhttpClient添加网络请求拦截器的时候应该调用方法addNetworkInterceptor，而不是addInterceptor。因为有时候可能会通过cookieJar在header里面去添加一些持久化的cookie或者session信息。这样就在请求头里面就不会打印出这些信息。</li>\n</ul>\n<p>看一下OkHttpClient调用拦截器的源码：</p>\n<pre><code>Response getResponseWithInterceptorChain() throws IOException {\n    // Build a full stack of interceptors.\n    List&lt;Interceptor&gt; interceptors = new ArrayList&lt;&gt;();\n    interceptors.addAll(client.interceptors());\n    interceptors.add(retryAndFollowUpInterceptor);\n    interceptors.add(new BridgeInterceptor(client.cookieJar()));\n    interceptors.add(new CacheInterceptor(client.internalCache()));\n    interceptors.add(new ConnectInterceptor(client));\n    if (!forWebSocket) {\n      interceptors.addAll(client.networkInterceptors());\n    }\n    interceptors.add(new CallServerInterceptor(forWebSocket));\n    Interceptor.Chain chain = new RealInterceptorChain(\n    interceptors, null, null, null, 0, originalRequest);\n    return chain.proceed(originalRequest);\n  }\n</code></pre><p>在okhttp执行网络请求时，会先构造拦截链，此时是将所有的拦截器都放入一个ArrayList中，看源码就知道添加拦截器的顺序是：</p>\n<pre><code>client.interceptors()，\nBridgeInterceptor，\nCacheInterceptor，\nConnectInterceptor，\nnetworkInterceptors，\nCallServerInterceptor。\n在通过拦截链执行拦截逻辑是按先后顺序递归调用的。如果是我们调用addInterceptor方法来添加HttpLoggingInterceptor拦截器，那么网络日志拦截器就会被添加到client.networkInterceptors()里面，根据添加到ArrayList中的顺序，执行拦截时会先执行HttpLoggingInterceptor，并打印出日志。然后才会执行CookieJar包装的拦截器BridgeInterceptor。这就导致我们添加header中的cookie等信息不会打印出来。\n</code></pre><hr>\n\n<p>现在我们打印出了完整的日志，但是格式看起来很不舒服，下面我们来对打印出来的数据格式化。</p>\n<p>我采用的是开源日志库looger来打印</p>\n<p>加入依赖：</p>\n<pre><code>compile &apos;com.orhanobut:logger:1.15&apos;\n</code></pre><p>使用looger库的时候建议先封装一层，作为一个工具类。</p>\n<pre><code>public class LogUtil {\n    /**\n     * 初始化log工具，在app入口处调用\n     *\n     * @param isLogEnable 是否打印log\n     */\n    public static void init(boolean isLogEnable) {\n    Logger.init(&quot;LogHttpInfo&quot;)\n            .hideThreadInfo()\n            .logLevel(isLogEnable ? LogLevel.FULL : LogLevel.NONE)\n            .methodOffset(2);\n    }\n\n    public static void d(String message) {\n    Logger.d(message);\n    }\n\n    public static void i(String message) {\n    Logger.i(message);\n    }\n\n    public static void w(String message, Throwable e) {\n    String info = e != null ? e.toString() : &quot;null&quot;;\n    Logger.w(message + &quot;：&quot; + info);\n    }\n\n    public static void e(String message, Throwable e) {\n    Logger.e(e, message);\n    }\n\n    public static void json(String json) {\n    Logger.json(json);\n    }\n}\n</code></pre><p>我们还需要在Application调用初始化方法</p>\n<pre><code>// 初始化Looger工具\nLogUtil.init(BuildConfig.LOG_DEBUG);\n</code></pre><p>这时候我们继续写HttpLogger类</p>\n<pre><code>private class HttpLogger implements HttpLoggingInterceptor.Logger {\n    private StringBuilder mMessage = new StringBuilder();\n\n    @Override\n    public void log(String message) {\n    // 请求或者响应开始\n    if (message.startsWith(&quot;--&gt; POST&quot;)) {\n        mMessage.setLength(0);\n    }\n    // 以{}或者[]形式的说明是响应结果的json数据，需要进行格式化\n    if ((message.startsWith(&quot;{&quot;) &amp;&amp; message.endsWith(&quot;}&quot;))\n        || (message.startsWith(&quot;[&quot;) &amp;&amp; message.endsWith(&quot;]&quot;))) {\n        message = formatJson(decodeUnicode(message));\n    }\n    mMessage.append(message.concat(&quot;\\n&quot;));\n    // 响应结束，打印整条日志\n    if (message.startsWith(&quot;&lt;-- END HTTP&quot;)) {\n        LogUtil.d(mMessage.toString());\n    }\n    }\n    /**\n     * 格式化json字符串\n     *\n     * @param jsonStr 需要格式化的json串\n     * @return 格式化后的json串\n     */\n    public static String formatJson(String jsonStr) {\n        if (null == jsonStr || &quot;&quot;.equals(jsonStr)) return &quot;&quot;;\n        StringBuilder sb = new StringBuilder();\n        char last = &apos;\\0&apos;;\n        char current = &apos;\\0&apos;;\n        int indent = 0;\n        for (int i = 0; i &lt; jsonStr.length(); i++) {\n        last = current;\n        current = jsonStr.charAt(i);\n        //遇到{ [换行，且下一行缩进\n        switch (current) {\n            case &apos;{&apos;:\n            case &apos;[&apos;:\n            sb.append(current);\n            sb.append(&apos;\\n&apos;);\n            indent++;\n            addIndentBlank(sb, indent);\n            break;\n            //遇到} ]换行，当前行缩进\n            case &apos;}&apos;:\n            case &apos;]&apos;:\n            sb.append(&apos;\\n&apos;);\n            indent--;\n            addIndentBlank(sb, indent);\n            sb.append(current);\n            break;\n            //遇到,换行\n            case &apos;,&apos;:\n            sb.append(current);\n            if (last != &apos;\\\\&apos;) {\n                sb.append(&apos;\\n&apos;);\n                addIndentBlank(sb, indent);\n            }\n            break;\n            default:\n            sb.append(current);\n        }\n        }\n    return sb.toString();\n    }\n\n    /**\n     * 添加space\n     *\n     * @param sb\n     * @param indent\n     */\n    private static void addIndentBlank(StringBuilder sb, int indent) {\n        for (int i = 0; i &lt; indent; i++) {\n        sb.append(&apos;\\t&apos;);\n        }\n    }\n    /**\n     * http 请求数据返回 json 中中文字符为 unicode 编码转汉字转码\n     *\n     * @param theString\n     * @return 转化后的结果.\n     */\n    public static String decodeUnicode(String theString) {\n        char aChar;\n        int len = theString.length();\n        StringBuffer outBuffer = new StringBuffer(len);\n        for (int x = 0; x &lt; len; ) {\n        aChar = theString.charAt(x++);\n        if (aChar == &apos;\\\\&apos;) {\n            aChar = theString.charAt(x++);\n            if (aChar == &apos;u&apos;) {\n            int value = 0;\n            for (int i = 0; i &lt; 4; i++) {\n                aChar = theString.charAt(x++);\n                switch (aChar) {\n                    case &apos;0&apos;:\n                    case &apos;1&apos;:\n                    case &apos;2&apos;:\n                    case &apos;3&apos;:\n                    case &apos;4&apos;:\n                    case &apos;5&apos;:\n                    case &apos;6&apos;:\n                    case &apos;7&apos;:\n                    case &apos;8&apos;:\n                    case &apos;9&apos;:\n                        value = (value &lt;&lt; 4) + aChar - &apos;0&apos;;\n                        break;\n                    case &apos;a&apos;:\n                    case &apos;b&apos;:\n                    case &apos;c&apos;:\n                    case &apos;d&apos;:\n                    case &apos;e&apos;:\n                    case &apos;f&apos;:\n                        value = (value &lt;&lt; 4) + 10 + aChar - &apos;a&apos;;\n                        break;\n                    case &apos;A&apos;:\n                    case &apos;B&apos;:\n                    case &apos;C&apos;:\n                    case &apos;D&apos;:\n                    case &apos;E&apos;:\n                    case &apos;F&apos;:\n                        value = (value &lt;&lt; 4) + 10 + aChar - &apos;A&apos;;\n                        break;\n                    default:\n                        throw new IllegalArgumentException(\n                                &quot;Malformed   \\\\uxxxx   encoding.&quot;);\n                }\n\n            }\n            outBuffer.append((char) value);\n            } else {\n            if (aChar == &apos;t&apos;)\n                aChar = &apos;\\t&apos;;\n            else if (aChar == &apos;r&apos;)\n                aChar = &apos;\\r&apos;;\n            else if (aChar == &apos;n&apos;)\n                aChar = &apos;\\n&apos;;\n            else if (aChar == &apos;f&apos;)\n                aChar = &apos;\\f&apos;;\n            outBuffer.append(aChar);\n            }\n        } else\n            outBuffer.append(aChar);\n        }\n        return outBuffer.toString();\n    }        \n}\n</code></pre><hr>\n\n<p>最终效果</p>\n<pre><code>D/LogHttpInfo: ╔════════════════════════════════════════════════════════════════════════════════════════\nD/LogHttpInfo: ║ RealInterceptorChain.proceed  (RealInterceptorChain.java:92)\nD/LogHttpInfo: ║    HttpLoggingInterceptor.intercept  (HttpLoggingInterceptor.java:266)\nD/LogHttpInfo: ╟────────────────────────────────────────────────────────────────────────────────────────\nD/LogHttpInfo: ║ --&gt; POST http://op.juhe.cn/onebox/movie/video http/1.1\nD/LogHttpInfo: ║ Content-Type: application/x-www-form-urlencoded\nD/LogHttpInfo: ║ Content-Length: 95\nD/LogHttpInfo: ║ Host: op.juhe.cn\nD/LogHttpInfo: ║ Connection: Keep-Alive\nD/LogHttpInfo: ║ Accept-Encoding: gzip\nD/LogHttpInfo: ║ User-Agent: okhttp/3.5.0\nD/LogHttpInfo: ║ \nD/LogHttpInfo: ║ key=a3d3a43fcc149b6ed8268b8fa41d27b7&amp;dtype=json&amp;q=%E9%81%97%E8%90%BD%E7%9A%84%E4%B8%96%E7%95%8C\nD/LogHttpInfo: ║ --&gt; END POST (95-byte body)\nD/LogHttpInfo: ║ &lt;-- 200 OK http://op.juhe.cn/onebox/movie/video (760ms)\nD/LogHttpInfo: ║ Server: nginx\nD/LogHttpInfo: ║ Date: Mon, 16 Jan 2017 09:36:35 GMT\nD/LogHttpInfo: ║ Content-Type: application/json;charset=utf-8\nD/LogHttpInfo: ║ Transfer-Encoding: chunked\nD/LogHttpInfo: ║ Connection: keep-alive\nD/LogHttpInfo: ║ X-Powered-By: PHP/5.6.23\nD/LogHttpInfo: ║ \nD/LogHttpInfo: ║ {\nD/LogHttpInfo: ║     &quot;reason&quot;:&quot;查询成功&quot;,\nD/LogHttpInfo: ║     &quot;result&quot;:{\n                        ...\nD/LogHttpInfo: ║     },\nD/LogHttpInfo: ║     &quot;error_code&quot;:0\nD/LogHttpInfo: ║ }\nD/LogHttpInfo: ║ &lt;-- END HTTP (2994-byte body)\nD/LogHttpInfo: ╚══════════════════════════════════════════════════════════════════\n</code></pre><p><hr><br>以上就是所有的设置了，下面来说一下怎么更改打印的log不同等级的颜色</p>\n<p>流程：</p>\n<pre><code>1. File-&gt;Settings 或Ctrl + Alt +S\n2. 找到 Editor -&gt; Colors &amp;Fonts -&gt; Android Logcat 或在上面的搜索框中输入Logcat\n3. 点中Verbose , Info, Debug等选项，然后在后面将Use Inberited attributes 去掉勾选\n4. 再将 Foreground 前的复选框选上，就可以双击后面的框框去选择颜色了\nApply–&gt;OK\n</code></pre><p>对应颜色值：</p>\n<pre><code>VERBOSE    BBBBBB\nDEBUG    0070BB\nINFO    48BB31\nWARN    BBBB23\nERROR    FF0006\nASSERT    8F0005\n</code></pre><p>效果：</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/logger_04.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>通常调试网络接口时都会将网络请求和响应相关数据通过日志的形式打印出来。OkHttp也提供了一个网络拦截器okhttp-logging-interceptor，通过它能拦截okhttp网络请求和响应所有相关信息（请求行、请求头、请求体、响应行、响应行、响应头、响应体）。</p>\n<hr>\n\n<ul>\n<li><p>使用okhttp网络日志拦截器：</p>\n<pre><code>compile &apos;com.squareup.okhttp3:logging-interceptor:3.5.0&apos;\n</code></pre></li>\n<li><p>定义拦截器中的网络日志工具</p>\n<pre><code>public class HttpLogger implements HttpLoggingInterceptor.Logger {\n    @Override\n    public void log(String message) {\n        Log.d(&quot;HttpLogInfo&quot;, message);\n    }\n }\n</code></pre></li>\n<li><p>初始化OkHttpClient，并添加网络日志拦截器</p>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 初始化okhttpclient.</div><div class=\"line\">*</div><div class=\"line\">* <span class=\"doctag\">@return</span> okhttpClient</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> OkHttpClient <span class=\"title\">okhttpclient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mOkHttpClient == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">trueHttpLoggingInterceptor logInterceptor = <span class=\"keyword\">new</span> HttpLoggingInterceptor(<span class=\"keyword\">new</span> HttpLogger());</div><div class=\"line\">truelogInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);</div><div class=\"line\">truemOkHttpClient = <span class=\"keyword\">new</span> OkHttpClient.Builder()</div><div class=\"line\">true    .connectTimeout(<span class=\"number\">15</span>, TimeUnit.SECONDS)</div><div class=\"line\">true    .addNetworkInterceptor(logInterceptor)</div><div class=\"line\">true    .build();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> mOkHttpClient;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre></li>\n</ul>\n<ul>\n<li><p>打印出来的日志</p>\n<ul>\n<li><p>拦截的网络请求日志信息1</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/logger_01.png\" alt=\"\"></p>\n</li>\n<li><p>拦截的网络请求日志信息2</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/logger_02.png\" alt=\"\"></p>\n</li>\n<li><p>拦截的网络请求日志信息3</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/logger_03.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n\n<ul>\n<li>注意:<br>在给OkhttpClient添加网络请求拦截器的时候应该调用方法addNetworkInterceptor，而不是addInterceptor。因为有时候可能会通过cookieJar在header里面去添加一些持久化的cookie或者session信息。这样就在请求头里面就不会打印出这些信息。</li>\n</ul>\n<p>看一下OkHttpClient调用拦截器的源码：</p>\n<pre><code>Response getResponseWithInterceptorChain() throws IOException {\n    // Build a full stack of interceptors.\n    List&lt;Interceptor&gt; interceptors = new ArrayList&lt;&gt;();\n    interceptors.addAll(client.interceptors());\n    interceptors.add(retryAndFollowUpInterceptor);\n    interceptors.add(new BridgeInterceptor(client.cookieJar()));\n    interceptors.add(new CacheInterceptor(client.internalCache()));\n    interceptors.add(new ConnectInterceptor(client));\n    if (!forWebSocket) {\n      interceptors.addAll(client.networkInterceptors());\n    }\n    interceptors.add(new CallServerInterceptor(forWebSocket));\n    Interceptor.Chain chain = new RealInterceptorChain(\n    interceptors, null, null, null, 0, originalRequest);\n    return chain.proceed(originalRequest);\n  }\n</code></pre><p>在okhttp执行网络请求时，会先构造拦截链，此时是将所有的拦截器都放入一个ArrayList中，看源码就知道添加拦截器的顺序是：</p>\n<pre><code>client.interceptors()，\nBridgeInterceptor，\nCacheInterceptor，\nConnectInterceptor，\nnetworkInterceptors，\nCallServerInterceptor。\n在通过拦截链执行拦截逻辑是按先后顺序递归调用的。如果是我们调用addInterceptor方法来添加HttpLoggingInterceptor拦截器，那么网络日志拦截器就会被添加到client.networkInterceptors()里面，根据添加到ArrayList中的顺序，执行拦截时会先执行HttpLoggingInterceptor，并打印出日志。然后才会执行CookieJar包装的拦截器BridgeInterceptor。这就导致我们添加header中的cookie等信息不会打印出来。\n</code></pre><hr>\n\n<p>现在我们打印出了完整的日志，但是格式看起来很不舒服，下面我们来对打印出来的数据格式化。</p>\n<p>我采用的是开源日志库looger来打印</p>\n<p>加入依赖：</p>\n<pre><code>compile &apos;com.orhanobut:logger:1.15&apos;\n</code></pre><p>使用looger库的时候建议先封装一层，作为一个工具类。</p>\n<pre><code>public class LogUtil {\n    /**\n     * 初始化log工具，在app入口处调用\n     *\n     * @param isLogEnable 是否打印log\n     */\n    public static void init(boolean isLogEnable) {\n    Logger.init(&quot;LogHttpInfo&quot;)\n            .hideThreadInfo()\n            .logLevel(isLogEnable ? LogLevel.FULL : LogLevel.NONE)\n            .methodOffset(2);\n    }\n\n    public static void d(String message) {\n    Logger.d(message);\n    }\n\n    public static void i(String message) {\n    Logger.i(message);\n    }\n\n    public static void w(String message, Throwable e) {\n    String info = e != null ? e.toString() : &quot;null&quot;;\n    Logger.w(message + &quot;：&quot; + info);\n    }\n\n    public static void e(String message, Throwable e) {\n    Logger.e(e, message);\n    }\n\n    public static void json(String json) {\n    Logger.json(json);\n    }\n}\n</code></pre><p>我们还需要在Application调用初始化方法</p>\n<pre><code>// 初始化Looger工具\nLogUtil.init(BuildConfig.LOG_DEBUG);\n</code></pre><p>这时候我们继续写HttpLogger类</p>\n<pre><code>private class HttpLogger implements HttpLoggingInterceptor.Logger {\n    private StringBuilder mMessage = new StringBuilder();\n\n    @Override\n    public void log(String message) {\n    // 请求或者响应开始\n    if (message.startsWith(&quot;--&gt; POST&quot;)) {\n        mMessage.setLength(0);\n    }\n    // 以{}或者[]形式的说明是响应结果的json数据，需要进行格式化\n    if ((message.startsWith(&quot;{&quot;) &amp;&amp; message.endsWith(&quot;}&quot;))\n        || (message.startsWith(&quot;[&quot;) &amp;&amp; message.endsWith(&quot;]&quot;))) {\n        message = formatJson(decodeUnicode(message));\n    }\n    mMessage.append(message.concat(&quot;\\n&quot;));\n    // 响应结束，打印整条日志\n    if (message.startsWith(&quot;&lt;-- END HTTP&quot;)) {\n        LogUtil.d(mMessage.toString());\n    }\n    }\n    /**\n     * 格式化json字符串\n     *\n     * @param jsonStr 需要格式化的json串\n     * @return 格式化后的json串\n     */\n    public static String formatJson(String jsonStr) {\n        if (null == jsonStr || &quot;&quot;.equals(jsonStr)) return &quot;&quot;;\n        StringBuilder sb = new StringBuilder();\n        char last = &apos;\\0&apos;;\n        char current = &apos;\\0&apos;;\n        int indent = 0;\n        for (int i = 0; i &lt; jsonStr.length(); i++) {\n        last = current;\n        current = jsonStr.charAt(i);\n        //遇到{ [换行，且下一行缩进\n        switch (current) {\n            case &apos;{&apos;:\n            case &apos;[&apos;:\n            sb.append(current);\n            sb.append(&apos;\\n&apos;);\n            indent++;\n            addIndentBlank(sb, indent);\n            break;\n            //遇到} ]换行，当前行缩进\n            case &apos;}&apos;:\n            case &apos;]&apos;:\n            sb.append(&apos;\\n&apos;);\n            indent--;\n            addIndentBlank(sb, indent);\n            sb.append(current);\n            break;\n            //遇到,换行\n            case &apos;,&apos;:\n            sb.append(current);\n            if (last != &apos;\\\\&apos;) {\n                sb.append(&apos;\\n&apos;);\n                addIndentBlank(sb, indent);\n            }\n            break;\n            default:\n            sb.append(current);\n        }\n        }\n    return sb.toString();\n    }\n\n    /**\n     * 添加space\n     *\n     * @param sb\n     * @param indent\n     */\n    private static void addIndentBlank(StringBuilder sb, int indent) {\n        for (int i = 0; i &lt; indent; i++) {\n        sb.append(&apos;\\t&apos;);\n        }\n    }\n    /**\n     * http 请求数据返回 json 中中文字符为 unicode 编码转汉字转码\n     *\n     * @param theString\n     * @return 转化后的结果.\n     */\n    public static String decodeUnicode(String theString) {\n        char aChar;\n        int len = theString.length();\n        StringBuffer outBuffer = new StringBuffer(len);\n        for (int x = 0; x &lt; len; ) {\n        aChar = theString.charAt(x++);\n        if (aChar == &apos;\\\\&apos;) {\n            aChar = theString.charAt(x++);\n            if (aChar == &apos;u&apos;) {\n            int value = 0;\n            for (int i = 0; i &lt; 4; i++) {\n                aChar = theString.charAt(x++);\n                switch (aChar) {\n                    case &apos;0&apos;:\n                    case &apos;1&apos;:\n                    case &apos;2&apos;:\n                    case &apos;3&apos;:\n                    case &apos;4&apos;:\n                    case &apos;5&apos;:\n                    case &apos;6&apos;:\n                    case &apos;7&apos;:\n                    case &apos;8&apos;:\n                    case &apos;9&apos;:\n                        value = (value &lt;&lt; 4) + aChar - &apos;0&apos;;\n                        break;\n                    case &apos;a&apos;:\n                    case &apos;b&apos;:\n                    case &apos;c&apos;:\n                    case &apos;d&apos;:\n                    case &apos;e&apos;:\n                    case &apos;f&apos;:\n                        value = (value &lt;&lt; 4) + 10 + aChar - &apos;a&apos;;\n                        break;\n                    case &apos;A&apos;:\n                    case &apos;B&apos;:\n                    case &apos;C&apos;:\n                    case &apos;D&apos;:\n                    case &apos;E&apos;:\n                    case &apos;F&apos;:\n                        value = (value &lt;&lt; 4) + 10 + aChar - &apos;A&apos;;\n                        break;\n                    default:\n                        throw new IllegalArgumentException(\n                                &quot;Malformed   \\\\uxxxx   encoding.&quot;);\n                }\n\n            }\n            outBuffer.append((char) value);\n            } else {\n            if (aChar == &apos;t&apos;)\n                aChar = &apos;\\t&apos;;\n            else if (aChar == &apos;r&apos;)\n                aChar = &apos;\\r&apos;;\n            else if (aChar == &apos;n&apos;)\n                aChar = &apos;\\n&apos;;\n            else if (aChar == &apos;f&apos;)\n                aChar = &apos;\\f&apos;;\n            outBuffer.append(aChar);\n            }\n        } else\n            outBuffer.append(aChar);\n        }\n        return outBuffer.toString();\n    }        \n}\n</code></pre><hr>\n\n<p>最终效果</p>\n<pre><code>D/LogHttpInfo: ╔════════════════════════════════════════════════════════════════════════════════════════\nD/LogHttpInfo: ║ RealInterceptorChain.proceed  (RealInterceptorChain.java:92)\nD/LogHttpInfo: ║    HttpLoggingInterceptor.intercept  (HttpLoggingInterceptor.java:266)\nD/LogHttpInfo: ╟────────────────────────────────────────────────────────────────────────────────────────\nD/LogHttpInfo: ║ --&gt; POST http://op.juhe.cn/onebox/movie/video http/1.1\nD/LogHttpInfo: ║ Content-Type: application/x-www-form-urlencoded\nD/LogHttpInfo: ║ Content-Length: 95\nD/LogHttpInfo: ║ Host: op.juhe.cn\nD/LogHttpInfo: ║ Connection: Keep-Alive\nD/LogHttpInfo: ║ Accept-Encoding: gzip\nD/LogHttpInfo: ║ User-Agent: okhttp/3.5.0\nD/LogHttpInfo: ║ \nD/LogHttpInfo: ║ key=a3d3a43fcc149b6ed8268b8fa41d27b7&amp;dtype=json&amp;q=%E9%81%97%E8%90%BD%E7%9A%84%E4%B8%96%E7%95%8C\nD/LogHttpInfo: ║ --&gt; END POST (95-byte body)\nD/LogHttpInfo: ║ &lt;-- 200 OK http://op.juhe.cn/onebox/movie/video (760ms)\nD/LogHttpInfo: ║ Server: nginx\nD/LogHttpInfo: ║ Date: Mon, 16 Jan 2017 09:36:35 GMT\nD/LogHttpInfo: ║ Content-Type: application/json;charset=utf-8\nD/LogHttpInfo: ║ Transfer-Encoding: chunked\nD/LogHttpInfo: ║ Connection: keep-alive\nD/LogHttpInfo: ║ X-Powered-By: PHP/5.6.23\nD/LogHttpInfo: ║ \nD/LogHttpInfo: ║ {\nD/LogHttpInfo: ║     &quot;reason&quot;:&quot;查询成功&quot;,\nD/LogHttpInfo: ║     &quot;result&quot;:{\n                        ...\nD/LogHttpInfo: ║     },\nD/LogHttpInfo: ║     &quot;error_code&quot;:0\nD/LogHttpInfo: ║ }\nD/LogHttpInfo: ║ &lt;-- END HTTP (2994-byte body)\nD/LogHttpInfo: ╚══════════════════════════════════════════════════════════════════\n</code></pre><p><hr><br>以上就是所有的设置了，下面来说一下怎么更改打印的log不同等级的颜色</p>\n<p>流程：</p>\n<pre><code>1. File-&gt;Settings 或Ctrl + Alt +S\n2. 找到 Editor -&gt; Colors &amp;Fonts -&gt; Android Logcat 或在上面的搜索框中输入Logcat\n3. 点中Verbose , Info, Debug等选项，然后在后面将Use Inberited attributes 去掉勾选\n4. 再将 Foreground 前的复选框选上，就可以双击后面的框框去选择颜色了\nApply–&gt;OK\n</code></pre><p>对应颜色值：</p>\n<pre><code>VERBOSE    BBBBBB\nDEBUG    0070BB\nINFO    48BB31\nWARN    BBBB23\nERROR    FF0006\nASSERT    8F0005\n</code></pre><p>效果：</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/logger_04.png\" alt=\"\"></p>\n"},{"layout":"post","title":"流程图示例","date":"2017-07-12T16:00:00.000Z","_content":"# 欢迎使用马克飞象\n\n@(示例笔记本)[马克飞象|帮助|Markdown]\n\n**马克飞象**是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述：\n \n- **功能丰富** ：支持高亮代码块、*LaTeX* 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；\n- **得心应手** ：简洁高效的编辑器，提供[桌面客户端][1]以及[离线Chrome App][2]，支持移动端 Web；\n- **深度整合** ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。\n\n-------------------\n\n[TOC]\n\n## Markdown简介\n\n> Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— [维基百科](https://zh.wikipedia.org/wiki/Markdown)\n\n正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为**粗体**或者*斜体*，创建一个[链接](http://www.example.com)或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按`Ctrl + /`查看帮助。 \n\n### 代码块\n``` python\n@requires_authorization\ndef somefunc(param1='', param2=0):\n    '''A docstring'''\n    if param1 > param2: # interesting\n        print 'Greater'\n    return (param2 - param1 + 1) or None\nclass SomeClass:\n    pass\n>>> message = '''interpreter\n... prompt'''\n```\n### LaTeX 公式\n\n可以创建行内公式，例如 $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$。或者块级公式：\n\n$$\tx = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\n\n### 表格\n| Item      |    Value | Qty  |\n| :-------- | --------:| :--: |\n| Computer  | 1600 USD |  5   |\n| Phone     |   12 USD |  12  |\n| Pipe      |    1 USD | 234  |\n\n### 流程图\n```flow\nst=>start: Start\ne=>end\nop=>operation: My Operation\ncond=>condition: Yes or No?\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n以及时序图:\n\n```sequence\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n> **提示：**想了解更多，请查看**流程图**[语法][3]以及**时序图**[语法][4]。\n\n### 复选框\n\n使用 `- [ ]` 和 `- [x]` 语法可以创建复选框，实现 todo-list 等功能。例如：\n\n- [x] 已完成事项\n- [ ] 待办事项1\n- [ ] 待办事项2\n\n> **注意：**目前支持尚不完全，在印象笔记中勾选复选框是无效、不能同步的，所以必须在**马克飞象**中修改 Markdown 原文才可生效。下个版本将会全面支持。\n\n\n## 印象笔记相关\n\n### 笔记本和标签\n**马克飞象**增加了`@(笔记本)[标签A|标签B]`语法, 以选择笔记本和添加标签。 **绑定账号后**， 输入`(`自动会出现笔记本列表，请从中选择。\n\n### 笔记标题\n**马克飞象**会自动使用文档内出现的第一个标题作为笔记标题。例如本文，就是第一行的 `欢迎使用马克飞象`。\n\n### 快捷编辑\n保存在印象笔记中的笔记，右上角会有一个红色的编辑按钮，点击后会回到**马克飞象**中打开并编辑该笔记。\n>**注意：**目前用户在印象笔记中单方面做的任何修改，马克飞象是无法自动感知和更新的。所以请务必回到马克飞象编辑。\n\n### 数据同步\n**马克飞象**通过**将Markdown原文以隐藏内容保存在笔记中**的精妙设计，实现了对Markdown的存储和再次编辑。既解决了其他产品只是单向导出HTML的单薄，又规避了服务端存储Markdown带来的隐私安全问题。这样，服务端仅作为对印象笔记 API调用和数据转换之用。\n\n >**隐私声明：用户所有的笔记数据，均保存在印象笔记中。马克飞象不存储用户的任何笔记数据。**\n\n### 离线存储\n**马克飞象**使用浏览器离线存储将内容实时保存在本地，不必担心网络断掉或浏览器崩溃。为了节省空间和避免冲突，已同步至印象笔记并且不再修改的笔记将删除部分本地缓存，不过依然可以随时通过`文档管理`打开。\n\n> **注意：**虽然浏览器存储大部分时候都比较可靠，但印象笔记作为专业云存储，更值得信赖。以防万一，**请务必经常及时同步到印象笔记**。\n\n## 编辑器相关\n### 设置\n右侧系统菜单（快捷键`Ctrl + M`）的`设置`中，提供了界面字体、字号、自定义CSS、vim/emacs 键盘模式等高级选项。\n\n### 快捷键\n\n帮助    `Ctrl + /`\n同步文档    `Ctrl + S`\n创建文档    `Ctrl + Alt + N`\n最大化编辑器    `Ctrl + Enter`\n预览文档 `Ctrl + Alt + Enter`\n文档管理    `Ctrl + O`\n系统菜单    `Ctrl + M` \n\n加粗    `Ctrl + B`\n插入图片    `Ctrl + G`\n插入链接    `Ctrl + L`\n提升标题    `Ctrl + H`\n\n## 关于收费\n\n**马克飞象**为新用户提供 10 天的试用期，试用期过后需要[续费](maxiang.info/vip.html)才能继续使用。未购买或者未及时续费，将不能同步新的笔记。之前保存过的笔记依然可以编辑。\n\n\n## 反馈与建议\n- 微博：[@马克飞象](http://weibo.com/u/2788354117)，[@GGock](http://weibo.com/ggock \"开发者个人账号\")\n- 邮箱：<hustgock@gmail.com>\n\n---------\n感谢阅读这份帮助文档。请点击右上角，绑定印象笔记账号，开启全新的记录与分享体验吧。\n\n\n\n\n[^demo]: 这是一个示例脚注。请查阅 [MultiMarkdown 文档](https://github.com/fletcher/MultiMarkdown/wiki/MultiMarkdown-Syntax-Guide#footnotes) 关于脚注的说明。 **限制：** 印象笔记的笔记内容使用 [ENML][5] 格式，基于 HTML，但是不支持某些标签和属性，例如id，这就导致`脚注`和`TOC`无法正常点击。\n\n\n  [1]: http://maxiang.info/client_zh\n  [2]: https://chrome.google.com/webstore/detail/kidnkfckhbdkfgbicccmdggmpgogehop\n  [3]: http://adrai.github.io/flowchart.js/\n  [4]: http://bramp.github.io/js-sequence-diagrams/\n  [5]: https://dev.yinxiang.com/doc/articles/enml.php\n\n\n","source":"_posts/流程图示例.md","raw":"---\nlayout: post\ntitle:  \"流程图示例\"\ndate:   2017-07-13 \ncategories: [Android,交互]\ntags: [Android]\n---\n# 欢迎使用马克飞象\n\n@(示例笔记本)[马克飞象|帮助|Markdown]\n\n**马克飞象**是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述：\n \n- **功能丰富** ：支持高亮代码块、*LaTeX* 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；\n- **得心应手** ：简洁高效的编辑器，提供[桌面客户端][1]以及[离线Chrome App][2]，支持移动端 Web；\n- **深度整合** ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。\n\n-------------------\n\n[TOC]\n\n## Markdown简介\n\n> Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— [维基百科](https://zh.wikipedia.org/wiki/Markdown)\n\n正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为**粗体**或者*斜体*，创建一个[链接](http://www.example.com)或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按`Ctrl + /`查看帮助。 \n\n### 代码块\n``` python\n@requires_authorization\ndef somefunc(param1='', param2=0):\n    '''A docstring'''\n    if param1 > param2: # interesting\n        print 'Greater'\n    return (param2 - param1 + 1) or None\nclass SomeClass:\n    pass\n>>> message = '''interpreter\n... prompt'''\n```\n### LaTeX 公式\n\n可以创建行内公式，例如 $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$。或者块级公式：\n\n$$\tx = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\n\n### 表格\n| Item      |    Value | Qty  |\n| :-------- | --------:| :--: |\n| Computer  | 1600 USD |  5   |\n| Phone     |   12 USD |  12  |\n| Pipe      |    1 USD | 234  |\n\n### 流程图\n```flow\nst=>start: Start\ne=>end\nop=>operation: My Operation\ncond=>condition: Yes or No?\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n以及时序图:\n\n```sequence\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n> **提示：**想了解更多，请查看**流程图**[语法][3]以及**时序图**[语法][4]。\n\n### 复选框\n\n使用 `- [ ]` 和 `- [x]` 语法可以创建复选框，实现 todo-list 等功能。例如：\n\n- [x] 已完成事项\n- [ ] 待办事项1\n- [ ] 待办事项2\n\n> **注意：**目前支持尚不完全，在印象笔记中勾选复选框是无效、不能同步的，所以必须在**马克飞象**中修改 Markdown 原文才可生效。下个版本将会全面支持。\n\n\n## 印象笔记相关\n\n### 笔记本和标签\n**马克飞象**增加了`@(笔记本)[标签A|标签B]`语法, 以选择笔记本和添加标签。 **绑定账号后**， 输入`(`自动会出现笔记本列表，请从中选择。\n\n### 笔记标题\n**马克飞象**会自动使用文档内出现的第一个标题作为笔记标题。例如本文，就是第一行的 `欢迎使用马克飞象`。\n\n### 快捷编辑\n保存在印象笔记中的笔记，右上角会有一个红色的编辑按钮，点击后会回到**马克飞象**中打开并编辑该笔记。\n>**注意：**目前用户在印象笔记中单方面做的任何修改，马克飞象是无法自动感知和更新的。所以请务必回到马克飞象编辑。\n\n### 数据同步\n**马克飞象**通过**将Markdown原文以隐藏内容保存在笔记中**的精妙设计，实现了对Markdown的存储和再次编辑。既解决了其他产品只是单向导出HTML的单薄，又规避了服务端存储Markdown带来的隐私安全问题。这样，服务端仅作为对印象笔记 API调用和数据转换之用。\n\n >**隐私声明：用户所有的笔记数据，均保存在印象笔记中。马克飞象不存储用户的任何笔记数据。**\n\n### 离线存储\n**马克飞象**使用浏览器离线存储将内容实时保存在本地，不必担心网络断掉或浏览器崩溃。为了节省空间和避免冲突，已同步至印象笔记并且不再修改的笔记将删除部分本地缓存，不过依然可以随时通过`文档管理`打开。\n\n> **注意：**虽然浏览器存储大部分时候都比较可靠，但印象笔记作为专业云存储，更值得信赖。以防万一，**请务必经常及时同步到印象笔记**。\n\n## 编辑器相关\n### 设置\n右侧系统菜单（快捷键`Ctrl + M`）的`设置`中，提供了界面字体、字号、自定义CSS、vim/emacs 键盘模式等高级选项。\n\n### 快捷键\n\n帮助    `Ctrl + /`\n同步文档    `Ctrl + S`\n创建文档    `Ctrl + Alt + N`\n最大化编辑器    `Ctrl + Enter`\n预览文档 `Ctrl + Alt + Enter`\n文档管理    `Ctrl + O`\n系统菜单    `Ctrl + M` \n\n加粗    `Ctrl + B`\n插入图片    `Ctrl + G`\n插入链接    `Ctrl + L`\n提升标题    `Ctrl + H`\n\n## 关于收费\n\n**马克飞象**为新用户提供 10 天的试用期，试用期过后需要[续费](maxiang.info/vip.html)才能继续使用。未购买或者未及时续费，将不能同步新的笔记。之前保存过的笔记依然可以编辑。\n\n\n## 反馈与建议\n- 微博：[@马克飞象](http://weibo.com/u/2788354117)，[@GGock](http://weibo.com/ggock \"开发者个人账号\")\n- 邮箱：<hustgock@gmail.com>\n\n---------\n感谢阅读这份帮助文档。请点击右上角，绑定印象笔记账号，开启全新的记录与分享体验吧。\n\n\n\n\n[^demo]: 这是一个示例脚注。请查阅 [MultiMarkdown 文档](https://github.com/fletcher/MultiMarkdown/wiki/MultiMarkdown-Syntax-Guide#footnotes) 关于脚注的说明。 **限制：** 印象笔记的笔记内容使用 [ENML][5] 格式，基于 HTML，但是不支持某些标签和属性，例如id，这就导致`脚注`和`TOC`无法正常点击。\n\n\n  [1]: http://maxiang.info/client_zh\n  [2]: https://chrome.google.com/webstore/detail/kidnkfckhbdkfgbicccmdggmpgogehop\n  [3]: http://adrai.github.io/flowchart.js/\n  [4]: http://bramp.github.io/js-sequence-diagrams/\n  [5]: https://dev.yinxiang.com/doc/articles/enml.php\n\n\n","slug":"流程图示例","published":1,"updated":"2017-12-26T05:14:25.509Z","comments":1,"photos":[],"link":"","_id":"cjboyl4xs00121ctmbxd4ao7g","content":"<h1 id=\"欢迎使用马克飞象\"><a href=\"#欢迎使用马克飞象\" class=\"headerlink\" title=\"欢迎使用马克飞象\"></a>欢迎使用马克飞象</h1><p>@(示例笔记本)[马克飞象|帮助|Markdown]</p>\n<p><strong>马克飞象</strong>是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述：</p>\n<ul>\n<li><strong>功能丰富</strong> ：支持高亮代码块、<em>LaTeX</em> 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；</li>\n<li><strong>得心应手</strong> ：简洁高效的编辑器，提供<a href=\"http://maxiang.info/client_zh\" target=\"_blank\" rel=\"external\">桌面客户端</a>以及<a href=\"https://chrome.google.com/webstore/detail/kidnkfckhbdkfgbicccmdggmpgogehop\" target=\"_blank\" rel=\"external\">离线Chrome App</a>，支持移动端 Web；</li>\n<li><strong>深度整合</strong> ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。</li>\n</ul>\n<hr>\n<p>[TOC]</p>\n<h2 id=\"Markdown简介\"><a href=\"#Markdown简介\" class=\"headerlink\" title=\"Markdown简介\"></a>Markdown简介</h2><blockquote>\n<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href=\"https://zh.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"external\">维基百科</a></p>\n</blockquote>\n<p>正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href=\"http://www.example.com\" target=\"_blank\" rel=\"external\">链接</a>或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按<code>Ctrl + /</code>查看帮助。 </p>\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@requires_authorization</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">somefunc</span><span class=\"params\">(param1=<span class=\"string\">''</span>, param2=<span class=\"number\">0</span>)</span>:</span></div><div class=\"line\">    <span class=\"string\">'''A docstring'''</span></div><div class=\"line\">    <span class=\"keyword\">if</span> param1 &gt; param2: <span class=\"comment\"># interesting</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Greater'</span></div><div class=\"line\">    <span class=\"keyword\">return</span> (param2 - param1 + <span class=\"number\">1</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">None</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message = <span class=\"string\">'''interpreter</span></div><div class=\"line\"><span class=\"meta\">... </span>prompt'''</div></pre></td></tr></table></figure>\n<h3 id=\"LaTeX-公式\"><a href=\"#LaTeX-公式\" class=\"headerlink\" title=\"LaTeX 公式\"></a>LaTeX 公式</h3><p>可以创建行内公式，例如 $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$。或者块级公式：</p>\n<p>$$    x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$</p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Item</th>\n<th style=\"text-align:right\">Value</th>\n<th style=\"text-align:center\">Qty</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Computer</td>\n<td style=\"text-align:right\">1600 USD</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Phone</td>\n<td style=\"text-align:right\">12 USD</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Pipe</td>\n<td style=\"text-align:right\">1 USD</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: Start</div><div class=\"line\">e=&gt;end</div><div class=\"line\">op=&gt;operation: My Operation</div><div class=\"line\">cond=&gt;condition: Yes or No?</div><div class=\"line\"></div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n<p>以及时序图:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alice-&gt;Bob: Hello Bob, how are you?</div><div class=\"line\">Note right of Bob: Bob thinks</div><div class=\"line\">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>提示：</strong>想了解更多，请查看<strong>流程图</strong><a href=\"http://adrai.github.io/flowchart.js/\" target=\"_blank\" rel=\"external\">语法</a>以及<strong>时序图</strong><a href=\"http://bramp.github.io/js-sequence-diagrams/\" target=\"_blank\" rel=\"external\">语法</a>。</p>\n</blockquote>\n<h3 id=\"复选框\"><a href=\"#复选框\" class=\"headerlink\" title=\"复选框\"></a>复选框</h3><p>使用 <code>- [ ]</code> 和 <code>- [x]</code> 语法可以创建复选框，实现 todo-list 等功能。例如：</p>\n<ul>\n<li>[x] 已完成事项</li>\n<li>[ ] 待办事项1</li>\n<li>[ ] 待办事项2</li>\n</ul>\n<blockquote>\n<p><strong>注意：</strong>目前支持尚不完全，在印象笔记中勾选复选框是无效、不能同步的，所以必须在<strong>马克飞象</strong>中修改 Markdown 原文才可生效。下个版本将会全面支持。</p>\n</blockquote>\n<h2 id=\"印象笔记相关\"><a href=\"#印象笔记相关\" class=\"headerlink\" title=\"印象笔记相关\"></a>印象笔记相关</h2><h3 id=\"笔记本和标签\"><a href=\"#笔记本和标签\" class=\"headerlink\" title=\"笔记本和标签\"></a>笔记本和标签</h3><p><strong>马克飞象</strong>增加了<code>@(笔记本)[标签A|标签B]</code>语法, 以选择笔记本和添加标签。 <strong>绑定账号后</strong>， 输入<code>(</code>自动会出现笔记本列表，请从中选择。</p>\n<h3 id=\"笔记标题\"><a href=\"#笔记标题\" class=\"headerlink\" title=\"笔记标题\"></a>笔记标题</h3><p><strong>马克飞象</strong>会自动使用文档内出现的第一个标题作为笔记标题。例如本文，就是第一行的 <code>欢迎使用马克飞象</code>。</p>\n<h3 id=\"快捷编辑\"><a href=\"#快捷编辑\" class=\"headerlink\" title=\"快捷编辑\"></a>快捷编辑</h3><p>保存在印象笔记中的笔记，右上角会有一个红色的编辑按钮，点击后会回到<strong>马克飞象</strong>中打开并编辑该笔记。</p>\n<blockquote>\n<p><strong>注意：</strong>目前用户在印象笔记中单方面做的任何修改，马克飞象是无法自动感知和更新的。所以请务必回到马克飞象编辑。</p>\n</blockquote>\n<h3 id=\"数据同步\"><a href=\"#数据同步\" class=\"headerlink\" title=\"数据同步\"></a>数据同步</h3><p><strong>马克飞象</strong>通过<strong>将Markdown原文以隐藏内容保存在笔记中</strong>的精妙设计，实现了对Markdown的存储和再次编辑。既解决了其他产品只是单向导出HTML的单薄，又规避了服务端存储Markdown带来的隐私安全问题。这样，服务端仅作为对印象笔记 API调用和数据转换之用。</p>\n<blockquote>\n<p><strong>隐私声明：用户所有的笔记数据，均保存在印象笔记中。马克飞象不存储用户的任何笔记数据。</strong></p>\n</blockquote>\n<h3 id=\"离线存储\"><a href=\"#离线存储\" class=\"headerlink\" title=\"离线存储\"></a>离线存储</h3><p><strong>马克飞象</strong>使用浏览器离线存储将内容实时保存在本地，不必担心网络断掉或浏览器崩溃。为了节省空间和避免冲突，已同步至印象笔记并且不再修改的笔记将删除部分本地缓存，不过依然可以随时通过<code>文档管理</code>打开。</p>\n<blockquote>\n<p><strong>注意：</strong>虽然浏览器存储大部分时候都比较可靠，但印象笔记作为专业云存储，更值得信赖。以防万一，<strong>请务必经常及时同步到印象笔记</strong>。</p>\n</blockquote>\n<h2 id=\"编辑器相关\"><a href=\"#编辑器相关\" class=\"headerlink\" title=\"编辑器相关\"></a>编辑器相关</h2><h3 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h3><p>右侧系统菜单（快捷键<code>Ctrl + M</code>）的<code>设置</code>中，提供了界面字体、字号、自定义CSS、vim/emacs 键盘模式等高级选项。</p>\n<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><p>帮助    <code>Ctrl + /</code><br>同步文档    <code>Ctrl + S</code><br>创建文档    <code>Ctrl + Alt + N</code><br>最大化编辑器    <code>Ctrl + Enter</code><br>预览文档 <code>Ctrl + Alt + Enter</code><br>文档管理    <code>Ctrl + O</code><br>系统菜单    <code>Ctrl + M</code> </p>\n<p>加粗    <code>Ctrl + B</code><br>插入图片    <code>Ctrl + G</code><br>插入链接    <code>Ctrl + L</code><br>提升标题    <code>Ctrl + H</code></p>\n<h2 id=\"关于收费\"><a href=\"#关于收费\" class=\"headerlink\" title=\"关于收费\"></a>关于收费</h2><p><strong>马克飞象</strong>为新用户提供 10 天的试用期，试用期过后需要<a href=\"maxiang.info/vip.html\">续费</a>才能继续使用。未购买或者未及时续费，将不能同步新的笔记。之前保存过的笔记依然可以编辑。</p>\n<h2 id=\"反馈与建议\"><a href=\"#反馈与建议\" class=\"headerlink\" title=\"反馈与建议\"></a>反馈与建议</h2><ul>\n<li>微博：<a href=\"http://weibo.com/u/2788354117\" target=\"_blank\" rel=\"external\">@马克飞象</a>，<a href=\"http://weibo.com/ggock\" title=\"开发者个人账号\" target=\"_blank\" rel=\"external\">@GGock</a></li>\n<li>邮箱：<a href=\"&#x6d;&#97;&#105;&#x6c;&#x74;&#111;&#58;&#x68;&#117;&#x73;&#116;&#103;&#111;&#x63;&#x6b;&#64;&#103;&#109;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;\">&#x68;&#117;&#x73;&#116;&#103;&#111;&#x63;&#x6b;&#64;&#103;&#109;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a></li>\n</ul>\n<hr>\n<p>感谢阅读这份帮助文档。请点击右上角，绑定印象笔记账号，开启全新的记录与分享体验吧。</p>\n<p>[^demo]: 这是一个示例脚注。请查阅 <a href=\"https://github.com/fletcher/MultiMarkdown/wiki/MultiMarkdown-Syntax-Guide#footnotes\" target=\"_blank\" rel=\"external\">MultiMarkdown 文档</a> 关于脚注的说明。 <strong>限制：</strong> 印象笔记的笔记内容使用 <a href=\"https://dev.yinxiang.com/doc/articles/enml.php\" target=\"_blank\" rel=\"external\">ENML</a> 格式，基于 HTML，但是不支持某些标签和属性，例如id，这就导致<code>脚注</code>和<code>TOC</code>无法正常点击。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"欢迎使用马克飞象\"><a href=\"#欢迎使用马克飞象\" class=\"headerlink\" title=\"欢迎使用马克飞象\"></a>欢迎使用马克飞象</h1><p>@(示例笔记本)[马克飞象|帮助|Markdown]</p>\n<p><strong>马克飞象</strong>是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述：</p>\n<ul>\n<li><strong>功能丰富</strong> ：支持高亮代码块、<em>LaTeX</em> 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；</li>\n<li><strong>得心应手</strong> ：简洁高效的编辑器，提供<a href=\"http://maxiang.info/client_zh\" target=\"_blank\" rel=\"external\">桌面客户端</a>以及<a href=\"https://chrome.google.com/webstore/detail/kidnkfckhbdkfgbicccmdggmpgogehop\" target=\"_blank\" rel=\"external\">离线Chrome App</a>，支持移动端 Web；</li>\n<li><strong>深度整合</strong> ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。</li>\n</ul>\n<hr>\n<p>[TOC]</p>\n<h2 id=\"Markdown简介\"><a href=\"#Markdown简介\" class=\"headerlink\" title=\"Markdown简介\"></a>Markdown简介</h2><blockquote>\n<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href=\"https://zh.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"external\">维基百科</a></p>\n</blockquote>\n<p>正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href=\"http://www.example.com\" target=\"_blank\" rel=\"external\">链接</a>或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按<code>Ctrl + /</code>查看帮助。 </p>\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@requires_authorization</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">somefunc</span><span class=\"params\">(param1=<span class=\"string\">''</span>, param2=<span class=\"number\">0</span>)</span>:</span></div><div class=\"line\">    <span class=\"string\">'''A docstring'''</span></div><div class=\"line\">    <span class=\"keyword\">if</span> param1 &gt; param2: <span class=\"comment\"># interesting</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Greater'</span></div><div class=\"line\">    <span class=\"keyword\">return</span> (param2 - param1 + <span class=\"number\">1</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">None</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>message = <span class=\"string\">'''interpreter</span></div><div class=\"line\"><span class=\"meta\">... </span>prompt'''</div></pre></td></tr></table></figure>\n<h3 id=\"LaTeX-公式\"><a href=\"#LaTeX-公式\" class=\"headerlink\" title=\"LaTeX 公式\"></a>LaTeX 公式</h3><p>可以创建行内公式，例如 $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$。或者块级公式：</p>\n<p>$$    x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$</p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Item</th>\n<th style=\"text-align:right\">Value</th>\n<th style=\"text-align:center\">Qty</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Computer</td>\n<td style=\"text-align:right\">1600 USD</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Phone</td>\n<td style=\"text-align:right\">12 USD</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Pipe</td>\n<td style=\"text-align:right\">1 USD</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: Start</div><div class=\"line\">e=&gt;end</div><div class=\"line\">op=&gt;operation: My Operation</div><div class=\"line\">cond=&gt;condition: Yes or No?</div><div class=\"line\"></div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n<p>以及时序图:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alice-&gt;Bob: Hello Bob, how are you?</div><div class=\"line\">Note right of Bob: Bob thinks</div><div class=\"line\">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>提示：</strong>想了解更多，请查看<strong>流程图</strong><a href=\"http://adrai.github.io/flowchart.js/\" target=\"_blank\" rel=\"external\">语法</a>以及<strong>时序图</strong><a href=\"http://bramp.github.io/js-sequence-diagrams/\" target=\"_blank\" rel=\"external\">语法</a>。</p>\n</blockquote>\n<h3 id=\"复选框\"><a href=\"#复选框\" class=\"headerlink\" title=\"复选框\"></a>复选框</h3><p>使用 <code>- [ ]</code> 和 <code>- [x]</code> 语法可以创建复选框，实现 todo-list 等功能。例如：</p>\n<ul>\n<li>[x] 已完成事项</li>\n<li>[ ] 待办事项1</li>\n<li>[ ] 待办事项2</li>\n</ul>\n<blockquote>\n<p><strong>注意：</strong>目前支持尚不完全，在印象笔记中勾选复选框是无效、不能同步的，所以必须在<strong>马克飞象</strong>中修改 Markdown 原文才可生效。下个版本将会全面支持。</p>\n</blockquote>\n<h2 id=\"印象笔记相关\"><a href=\"#印象笔记相关\" class=\"headerlink\" title=\"印象笔记相关\"></a>印象笔记相关</h2><h3 id=\"笔记本和标签\"><a href=\"#笔记本和标签\" class=\"headerlink\" title=\"笔记本和标签\"></a>笔记本和标签</h3><p><strong>马克飞象</strong>增加了<code>@(笔记本)[标签A|标签B]</code>语法, 以选择笔记本和添加标签。 <strong>绑定账号后</strong>， 输入<code>(</code>自动会出现笔记本列表，请从中选择。</p>\n<h3 id=\"笔记标题\"><a href=\"#笔记标题\" class=\"headerlink\" title=\"笔记标题\"></a>笔记标题</h3><p><strong>马克飞象</strong>会自动使用文档内出现的第一个标题作为笔记标题。例如本文，就是第一行的 <code>欢迎使用马克飞象</code>。</p>\n<h3 id=\"快捷编辑\"><a href=\"#快捷编辑\" class=\"headerlink\" title=\"快捷编辑\"></a>快捷编辑</h3><p>保存在印象笔记中的笔记，右上角会有一个红色的编辑按钮，点击后会回到<strong>马克飞象</strong>中打开并编辑该笔记。</p>\n<blockquote>\n<p><strong>注意：</strong>目前用户在印象笔记中单方面做的任何修改，马克飞象是无法自动感知和更新的。所以请务必回到马克飞象编辑。</p>\n</blockquote>\n<h3 id=\"数据同步\"><a href=\"#数据同步\" class=\"headerlink\" title=\"数据同步\"></a>数据同步</h3><p><strong>马克飞象</strong>通过<strong>将Markdown原文以隐藏内容保存在笔记中</strong>的精妙设计，实现了对Markdown的存储和再次编辑。既解决了其他产品只是单向导出HTML的单薄，又规避了服务端存储Markdown带来的隐私安全问题。这样，服务端仅作为对印象笔记 API调用和数据转换之用。</p>\n<blockquote>\n<p><strong>隐私声明：用户所有的笔记数据，均保存在印象笔记中。马克飞象不存储用户的任何笔记数据。</strong></p>\n</blockquote>\n<h3 id=\"离线存储\"><a href=\"#离线存储\" class=\"headerlink\" title=\"离线存储\"></a>离线存储</h3><p><strong>马克飞象</strong>使用浏览器离线存储将内容实时保存在本地，不必担心网络断掉或浏览器崩溃。为了节省空间和避免冲突，已同步至印象笔记并且不再修改的笔记将删除部分本地缓存，不过依然可以随时通过<code>文档管理</code>打开。</p>\n<blockquote>\n<p><strong>注意：</strong>虽然浏览器存储大部分时候都比较可靠，但印象笔记作为专业云存储，更值得信赖。以防万一，<strong>请务必经常及时同步到印象笔记</strong>。</p>\n</blockquote>\n<h2 id=\"编辑器相关\"><a href=\"#编辑器相关\" class=\"headerlink\" title=\"编辑器相关\"></a>编辑器相关</h2><h3 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h3><p>右侧系统菜单（快捷键<code>Ctrl + M</code>）的<code>设置</code>中，提供了界面字体、字号、自定义CSS、vim/emacs 键盘模式等高级选项。</p>\n<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><p>帮助    <code>Ctrl + /</code><br>同步文档    <code>Ctrl + S</code><br>创建文档    <code>Ctrl + Alt + N</code><br>最大化编辑器    <code>Ctrl + Enter</code><br>预览文档 <code>Ctrl + Alt + Enter</code><br>文档管理    <code>Ctrl + O</code><br>系统菜单    <code>Ctrl + M</code> </p>\n<p>加粗    <code>Ctrl + B</code><br>插入图片    <code>Ctrl + G</code><br>插入链接    <code>Ctrl + L</code><br>提升标题    <code>Ctrl + H</code></p>\n<h2 id=\"关于收费\"><a href=\"#关于收费\" class=\"headerlink\" title=\"关于收费\"></a>关于收费</h2><p><strong>马克飞象</strong>为新用户提供 10 天的试用期，试用期过后需要<a href=\"maxiang.info/vip.html\">续费</a>才能继续使用。未购买或者未及时续费，将不能同步新的笔记。之前保存过的笔记依然可以编辑。</p>\n<h2 id=\"反馈与建议\"><a href=\"#反馈与建议\" class=\"headerlink\" title=\"反馈与建议\"></a>反馈与建议</h2><ul>\n<li>微博：<a href=\"http://weibo.com/u/2788354117\" target=\"_blank\" rel=\"external\">@马克飞象</a>，<a href=\"http://weibo.com/ggock\" title=\"开发者个人账号\" target=\"_blank\" rel=\"external\">@GGock</a></li>\n<li>邮箱：<a href=\"&#x6d;&#97;&#105;&#x6c;&#x74;&#111;&#58;&#x68;&#117;&#x73;&#116;&#103;&#111;&#x63;&#x6b;&#64;&#103;&#109;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;\">&#x68;&#117;&#x73;&#116;&#103;&#111;&#x63;&#x6b;&#64;&#103;&#109;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a></li>\n</ul>\n<hr>\n<p>感谢阅读这份帮助文档。请点击右上角，绑定印象笔记账号，开启全新的记录与分享体验吧。</p>\n<p>[^demo]: 这是一个示例脚注。请查阅 <a href=\"https://github.com/fletcher/MultiMarkdown/wiki/MultiMarkdown-Syntax-Guide#footnotes\" target=\"_blank\" rel=\"external\">MultiMarkdown 文档</a> 关于脚注的说明。 <strong>限制：</strong> 印象笔记的笔记内容使用 <a href=\"https://dev.yinxiang.com/doc/articles/enml.php\" target=\"_blank\" rel=\"external\">ENML</a> 格式，基于 HTML，但是不支持某些标签和属性，例如id，这就导致<code>脚注</code>和<code>TOC</code>无法正常点击。</p>\n"},{"layout":"post","title":"考研之后的话","date":"2017-12-25T16:00:00.000Z","_content":"\n\n刚刚参加完今年的研究生考试，内心毫无波澜，只是之前的空间没有续租，最近只能苦逼的做博客迁移...加油吧","source":"_posts/考研之后的话.md","raw":"---\nlayout: post\ntitle:  \"考研之后的话\"\ndate:   2017-12-26\ncategories: [生活]\ntags: [生活]\n---\n\n\n刚刚参加完今年的研究生考试，内心毫无波澜，只是之前的空间没有续租，最近只能苦逼的做博客迁移...加油吧","slug":"考研之后的话","published":1,"updated":"2017-12-27T10:57:28.587Z","comments":1,"photos":[],"link":"","_id":"cjboyl4xv00161ctmggs72qbf","content":"<p>刚刚参加完今年的研究生考试，内心毫无波澜，只是之前的空间没有续租，最近只能苦逼的做博客迁移…加油吧</p>\n","site":{"data":{}},"excerpt":"","more":"<p>刚刚参加完今年的研究生考试，内心毫无波澜，只是之前的空间没有续租，最近只能苦逼的做博客迁移…加油吧</p>\n"},{"layout":"post","title":"实现WebView中网页与App的Activity跳转","date":"2016-08-12T16:00:00.000Z","_content":"介绍三种实现方式:\n\n\t1. 通过JS来实现\n\t2. 通过scheme来实现(不支持webview的重定向)\n\t3. 通过webview的重定向（setWebViewClient（WebView view,String url）{})方法中对url判断，隐式意图打开Activity\n\n\n1.通过JS\n\n只需要三个步骤:\n\n\t* WebView开启JavaScript脚本执行。\n\t* WebView设置供JavaScript调用的交互接口。\n\t* 客户端和网页端编写调用对方的代码。\n写了两遍都没保存上，恼火...什么时候想起来什么时候补吧\n\n2.通过scheme（Deep Linking深度链接，可以自行查资料https://www.linkedme.cc/）\n\n在html中，设置链接    \n\n\t<a href=\"myscheme://host：8080/path/?action=com.example.wudi.webviewdemo.baginfo&id=123\"> Take a QR code </a>\n\t<!--bagin\n\t     下面介绍各个部分:\n\t          \"myscheme\":scheme\n\t          \"host\":host主机\n\t          \"8080\":post端口号\n\t          \"path\":path路径\n\t          \"action\"=com.example.wudi.webviewdemo.baginfo&id=123:params参数\n\t  -->             \n\t    \n然后我们在清单文件中需要给要打开的activity设置intent-filter的scheme(scheme:计划；组合；体制；诡计)，其中scheme必须和链接中scheme保持一致,host可写可不写，自行忽略\n\n\t<activity android:name=\".DemoActivity\">\n\t   <!— URI Scheme方式 -—>\n\t    <intent-filter>\n\t        <data android:scheme=\"myscheme\" />\n\t        <data android:host=\"host\"/>\n\t        <action android:name=\"android.intent.action.VIEW\" />\n\t        <category android:name=\"android.intent.category.DEFAULT\" />\n\t        <category android:name=\"android.intent.category.BROWSABLE\" />\n\t        <!--<data android:host=\"\"\n\t            android:mimeType=\"\"\n\t            android:path=\"\"\n\t            android:pathPattern=\"\"\n\t            android:pathPrefix=\"\"\n\t            android:port=\"\"\n\t            android:scheme=\"\"\n\t            android:ssp=\"\"\n\t            android:sspPattern=\"\"\n\t            android:sspPrefix=\"\"/>-->\n\t    </intent-filter>\n\t</activity>\n\n这样我们在要打开的activity中获取参数:\n\n\t\tIntent intent = getIntent();\n\t\tLog.e(\"TAG\", \"scheme:\" + intent.getScheme());\n\t\tUri uri = intent.getData();\n\t\tif (uri != null) {\n\t\t    Log.e(\"TAG\", \"id:\" + uri.getQueryParamter(\"id\"));\n\t\t    Log.e(\"TAG\", \"action:\" + uri.getQueryParamter(\"name\"));\n\t\t}\n\n\n需要注意的是：这种方式不支持webview的重定向操作，如果你对webview设置了重定向，那么就会返回:ERR_UNKNOWN_URL_SCHEME。\n\n3.通过隐式意图\n\n如果我们不想写js，又想要对webview进行重定向（大多数android开发都需要，因为要适配),那么就可以通过隐式意图\n基本上和第二种方式相同：\n   在html中:\n         \n\t<a href=\"android://?action=com.example.wudi.webviewdemo.baginfo&id=123\"> Take a QR code </a>\n     \n   与第二种方式不同的是：当中的链接是自己自定义的，如果你够聪明，就能拼写出优秀的uri，就像上边我拼的，因为项目中，需要和ios同步开发（ios用的LMBIOS），所以我定义了android来作为我的区分。\n   下边我们需要在清单文件中给activity设置action和category\n\n\t<activity android:name=\".DemoActivity\">\n\t  <!-- <!— URI Scheme方式 -—>\n\t    <intent-filter>\n\t        <action android:name=\"com.example.wudi.webviewdemo.baginfo\"/>\n\t        <category android:name=\"android.intent.category.DEFAULT\"/>\n\t    </intent-filter>\n\t</activity>\n\n   可以发现我设置的action和上边链接中action参数一致，下边就需要在webview重定向时，进行判断了\n\n\twebview.setWebViewClient(new WebViewClient() {\n\t    @Override\n\t    public boolean shouldOverrideUrlLoading(WebView view, String url) {\n\t        // TODO Auto-generated method stub\n\t        //返回值是true的时候控制去WebView打开，为false调用系统浏览器或第三方浏览器\n\t        if (url.startsWith(\"android\")) {\n\t            Uri uri = Uri.parse(url);\n\t            String host = uri.getHost();\n\t            String action = uri.getQueryParameter(\"action\");\n\t            String id = uri.getQueryParameter(\"id\");\n\t            Intent intent = new Intent();\n\t            intent.setAction(action);\n\t            intent.putExtra(\"id\",id);\n\t            startActivity(intent);\n\t        } else {\n\t            view.loadUrl(url);\n\t        }\n\t        return true;\n\t    }\n\t});\n\n   可以，看到，我的链接拼接方式可以直接把url转成uri，并获取参数，打开activity\n","source":"_posts/实现WebView中网页与App的Activity跳转.md","raw":"---\nlayout: post\ntitle:  \"实现WebView中网页与App的Activity跳转\"\ndate:   2016-08-13 \ncategories: [Android,WebView]\ntags: [Android]\n---\n介绍三种实现方式:\n\n\t1. 通过JS来实现\n\t2. 通过scheme来实现(不支持webview的重定向)\n\t3. 通过webview的重定向（setWebViewClient（WebView view,String url）{})方法中对url判断，隐式意图打开Activity\n\n\n1.通过JS\n\n只需要三个步骤:\n\n\t* WebView开启JavaScript脚本执行。\n\t* WebView设置供JavaScript调用的交互接口。\n\t* 客户端和网页端编写调用对方的代码。\n写了两遍都没保存上，恼火...什么时候想起来什么时候补吧\n\n2.通过scheme（Deep Linking深度链接，可以自行查资料https://www.linkedme.cc/）\n\n在html中，设置链接    \n\n\t<a href=\"myscheme://host：8080/path/?action=com.example.wudi.webviewdemo.baginfo&id=123\"> Take a QR code </a>\n\t<!--bagin\n\t     下面介绍各个部分:\n\t          \"myscheme\":scheme\n\t          \"host\":host主机\n\t          \"8080\":post端口号\n\t          \"path\":path路径\n\t          \"action\"=com.example.wudi.webviewdemo.baginfo&id=123:params参数\n\t  -->             \n\t    \n然后我们在清单文件中需要给要打开的activity设置intent-filter的scheme(scheme:计划；组合；体制；诡计)，其中scheme必须和链接中scheme保持一致,host可写可不写，自行忽略\n\n\t<activity android:name=\".DemoActivity\">\n\t   <!— URI Scheme方式 -—>\n\t    <intent-filter>\n\t        <data android:scheme=\"myscheme\" />\n\t        <data android:host=\"host\"/>\n\t        <action android:name=\"android.intent.action.VIEW\" />\n\t        <category android:name=\"android.intent.category.DEFAULT\" />\n\t        <category android:name=\"android.intent.category.BROWSABLE\" />\n\t        <!--<data android:host=\"\"\n\t            android:mimeType=\"\"\n\t            android:path=\"\"\n\t            android:pathPattern=\"\"\n\t            android:pathPrefix=\"\"\n\t            android:port=\"\"\n\t            android:scheme=\"\"\n\t            android:ssp=\"\"\n\t            android:sspPattern=\"\"\n\t            android:sspPrefix=\"\"/>-->\n\t    </intent-filter>\n\t</activity>\n\n这样我们在要打开的activity中获取参数:\n\n\t\tIntent intent = getIntent();\n\t\tLog.e(\"TAG\", \"scheme:\" + intent.getScheme());\n\t\tUri uri = intent.getData();\n\t\tif (uri != null) {\n\t\t    Log.e(\"TAG\", \"id:\" + uri.getQueryParamter(\"id\"));\n\t\t    Log.e(\"TAG\", \"action:\" + uri.getQueryParamter(\"name\"));\n\t\t}\n\n\n需要注意的是：这种方式不支持webview的重定向操作，如果你对webview设置了重定向，那么就会返回:ERR_UNKNOWN_URL_SCHEME。\n\n3.通过隐式意图\n\n如果我们不想写js，又想要对webview进行重定向（大多数android开发都需要，因为要适配),那么就可以通过隐式意图\n基本上和第二种方式相同：\n   在html中:\n         \n\t<a href=\"android://?action=com.example.wudi.webviewdemo.baginfo&id=123\"> Take a QR code </a>\n     \n   与第二种方式不同的是：当中的链接是自己自定义的，如果你够聪明，就能拼写出优秀的uri，就像上边我拼的，因为项目中，需要和ios同步开发（ios用的LMBIOS），所以我定义了android来作为我的区分。\n   下边我们需要在清单文件中给activity设置action和category\n\n\t<activity android:name=\".DemoActivity\">\n\t  <!-- <!— URI Scheme方式 -—>\n\t    <intent-filter>\n\t        <action android:name=\"com.example.wudi.webviewdemo.baginfo\"/>\n\t        <category android:name=\"android.intent.category.DEFAULT\"/>\n\t    </intent-filter>\n\t</activity>\n\n   可以发现我设置的action和上边链接中action参数一致，下边就需要在webview重定向时，进行判断了\n\n\twebview.setWebViewClient(new WebViewClient() {\n\t    @Override\n\t    public boolean shouldOverrideUrlLoading(WebView view, String url) {\n\t        // TODO Auto-generated method stub\n\t        //返回值是true的时候控制去WebView打开，为false调用系统浏览器或第三方浏览器\n\t        if (url.startsWith(\"android\")) {\n\t            Uri uri = Uri.parse(url);\n\t            String host = uri.getHost();\n\t            String action = uri.getQueryParameter(\"action\");\n\t            String id = uri.getQueryParameter(\"id\");\n\t            Intent intent = new Intent();\n\t            intent.setAction(action);\n\t            intent.putExtra(\"id\",id);\n\t            startActivity(intent);\n\t        } else {\n\t            view.loadUrl(url);\n\t        }\n\t        return true;\n\t    }\n\t});\n\n   可以，看到，我的链接拼接方式可以直接把url转成uri，并获取参数，打开activity\n","slug":"实现WebView中网页与App的Activity跳转","published":1,"updated":"2017-12-26T05:14:25.508Z","comments":1,"photos":[],"link":"","_id":"cjboyl4xw001a1ctmzlvohw75","content":"<p>介绍三种实现方式:</p>\n<pre><code>1. 通过JS来实现\n2. 通过scheme来实现(不支持webview的重定向)\n3. 通过webview的重定向（setWebViewClient（WebView view,String url）{})方法中对url判断，隐式意图打开Activity\n</code></pre><p>1.通过JS</p>\n<p>只需要三个步骤:</p>\n<pre><code>* WebView开启JavaScript脚本执行。\n* WebView设置供JavaScript调用的交互接口。\n* 客户端和网页端编写调用对方的代码。\n</code></pre><p>写了两遍都没保存上，恼火…什么时候想起来什么时候补吧</p>\n<p>2.通过scheme（Deep Linking深度链接，可以自行查资料<a href=\"https://www.linkedme.cc/）\" target=\"_blank\" rel=\"external\">https://www.linkedme.cc/）</a></p>\n<p>在html中，设置链接    </p>\n<pre><code>&lt;a href=&quot;myscheme://host：8080/path/?action=com.example.wudi.webviewdemo.baginfo&amp;id=123&quot;&gt; Take a QR code &lt;/a&gt;\n&lt;!--bagin\n     下面介绍各个部分:\n          &quot;myscheme&quot;:scheme\n          &quot;host&quot;:host主机\n          &quot;8080&quot;:post端口号\n          &quot;path&quot;:path路径\n          &quot;action&quot;=com.example.wudi.webviewdemo.baginfo&amp;id=123:params参数\n  --&gt;             \n</code></pre><p>然后我们在清单文件中需要给要打开的activity设置intent-filter的scheme(scheme:计划；组合；体制；诡计)，其中scheme必须和链接中scheme保持一致,host可写可不写，自行忽略</p>\n<pre><code>&lt;activity android:name=&quot;.DemoActivity&quot;&gt;\n   &lt;!— URI Scheme方式 -—&gt;\n    &lt;intent-filter&gt;\n        &lt;data android:scheme=&quot;myscheme&quot; /&gt;\n        &lt;data android:host=&quot;host&quot;/&gt;\n        &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;\n        &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;\n        &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;\n        &lt;!--&lt;data android:host=&quot;&quot;\n            android:mimeType=&quot;&quot;\n            android:path=&quot;&quot;\n            android:pathPattern=&quot;&quot;\n            android:pathPrefix=&quot;&quot;\n            android:port=&quot;&quot;\n            android:scheme=&quot;&quot;\n            android:ssp=&quot;&quot;\n            android:sspPattern=&quot;&quot;\n            android:sspPrefix=&quot;&quot;/&gt;--&gt;\n    &lt;/intent-filter&gt;\n&lt;/activity&gt;\n</code></pre><p>这样我们在要打开的activity中获取参数:</p>\n<pre><code>Intent intent = getIntent();\nLog.e(&quot;TAG&quot;, &quot;scheme:&quot; + intent.getScheme());\nUri uri = intent.getData();\nif (uri != null) {\n    Log.e(&quot;TAG&quot;, &quot;id:&quot; + uri.getQueryParamter(&quot;id&quot;));\n    Log.e(&quot;TAG&quot;, &quot;action:&quot; + uri.getQueryParamter(&quot;name&quot;));\n}\n</code></pre><p>需要注意的是：这种方式不支持webview的重定向操作，如果你对webview设置了重定向，那么就会返回:ERR_UNKNOWN_URL_SCHEME。</p>\n<p>3.通过隐式意图</p>\n<p>如果我们不想写js，又想要对webview进行重定向（大多数android开发都需要，因为要适配),那么就可以通过隐式意图<br>基本上和第二种方式相同：<br>   在html中:</p>\n<pre><code>&lt;a href=&quot;android://?action=com.example.wudi.webviewdemo.baginfo&amp;id=123&quot;&gt; Take a QR code &lt;/a&gt;\n</code></pre><p>   与第二种方式不同的是：当中的链接是自己自定义的，如果你够聪明，就能拼写出优秀的uri，就像上边我拼的，因为项目中，需要和ios同步开发（ios用的LMBIOS），所以我定义了android来作为我的区分。<br>   下边我们需要在清单文件中给activity设置action和category</p>\n<pre><code>&lt;activity android:name=&quot;.DemoActivity&quot;&gt;\n  &lt;!-- &lt;!— URI Scheme方式 -—&gt;\n    &lt;intent-filter&gt;\n        &lt;action android:name=&quot;com.example.wudi.webviewdemo.baginfo&quot;/&gt;\n        &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt;\n    &lt;/intent-filter&gt;\n&lt;/activity&gt;\n</code></pre><p>   可以发现我设置的action和上边链接中action参数一致，下边就需要在webview重定向时，进行判断了</p>\n<pre><code>webview.setWebViewClient(new WebViewClient() {\n    @Override\n    public boolean shouldOverrideUrlLoading(WebView view, String url) {\n        // TODO Auto-generated method stub\n        //返回值是true的时候控制去WebView打开，为false调用系统浏览器或第三方浏览器\n        if (url.startsWith(&quot;android&quot;)) {\n            Uri uri = Uri.parse(url);\n            String host = uri.getHost();\n            String action = uri.getQueryParameter(&quot;action&quot;);\n            String id = uri.getQueryParameter(&quot;id&quot;);\n            Intent intent = new Intent();\n            intent.setAction(action);\n            intent.putExtra(&quot;id&quot;,id);\n            startActivity(intent);\n        } else {\n            view.loadUrl(url);\n        }\n        return true;\n    }\n});\n</code></pre><p>   可以，看到，我的链接拼接方式可以直接把url转成uri，并获取参数，打开activity</p>\n","site":{"data":{}},"excerpt":"","more":"<p>介绍三种实现方式:</p>\n<pre><code>1. 通过JS来实现\n2. 通过scheme来实现(不支持webview的重定向)\n3. 通过webview的重定向（setWebViewClient（WebView view,String url）{})方法中对url判断，隐式意图打开Activity\n</code></pre><p>1.通过JS</p>\n<p>只需要三个步骤:</p>\n<pre><code>* WebView开启JavaScript脚本执行。\n* WebView设置供JavaScript调用的交互接口。\n* 客户端和网页端编写调用对方的代码。\n</code></pre><p>写了两遍都没保存上，恼火…什么时候想起来什么时候补吧</p>\n<p>2.通过scheme（Deep Linking深度链接，可以自行查资料<a href=\"https://www.linkedme.cc/）\" target=\"_blank\" rel=\"external\">https://www.linkedme.cc/）</a></p>\n<p>在html中，设置链接    </p>\n<pre><code>&lt;a href=&quot;myscheme://host：8080/path/?action=com.example.wudi.webviewdemo.baginfo&amp;id=123&quot;&gt; Take a QR code &lt;/a&gt;\n&lt;!--bagin\n     下面介绍各个部分:\n          &quot;myscheme&quot;:scheme\n          &quot;host&quot;:host主机\n          &quot;8080&quot;:post端口号\n          &quot;path&quot;:path路径\n          &quot;action&quot;=com.example.wudi.webviewdemo.baginfo&amp;id=123:params参数\n  --&gt;             \n</code></pre><p>然后我们在清单文件中需要给要打开的activity设置intent-filter的scheme(scheme:计划；组合；体制；诡计)，其中scheme必须和链接中scheme保持一致,host可写可不写，自行忽略</p>\n<pre><code>&lt;activity android:name=&quot;.DemoActivity&quot;&gt;\n   &lt;!— URI Scheme方式 -—&gt;\n    &lt;intent-filter&gt;\n        &lt;data android:scheme=&quot;myscheme&quot; /&gt;\n        &lt;data android:host=&quot;host&quot;/&gt;\n        &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;\n        &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;\n        &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;\n        &lt;!--&lt;data android:host=&quot;&quot;\n            android:mimeType=&quot;&quot;\n            android:path=&quot;&quot;\n            android:pathPattern=&quot;&quot;\n            android:pathPrefix=&quot;&quot;\n            android:port=&quot;&quot;\n            android:scheme=&quot;&quot;\n            android:ssp=&quot;&quot;\n            android:sspPattern=&quot;&quot;\n            android:sspPrefix=&quot;&quot;/&gt;--&gt;\n    &lt;/intent-filter&gt;\n&lt;/activity&gt;\n</code></pre><p>这样我们在要打开的activity中获取参数:</p>\n<pre><code>Intent intent = getIntent();\nLog.e(&quot;TAG&quot;, &quot;scheme:&quot; + intent.getScheme());\nUri uri = intent.getData();\nif (uri != null) {\n    Log.e(&quot;TAG&quot;, &quot;id:&quot; + uri.getQueryParamter(&quot;id&quot;));\n    Log.e(&quot;TAG&quot;, &quot;action:&quot; + uri.getQueryParamter(&quot;name&quot;));\n}\n</code></pre><p>需要注意的是：这种方式不支持webview的重定向操作，如果你对webview设置了重定向，那么就会返回:ERR_UNKNOWN_URL_SCHEME。</p>\n<p>3.通过隐式意图</p>\n<p>如果我们不想写js，又想要对webview进行重定向（大多数android开发都需要，因为要适配),那么就可以通过隐式意图<br>基本上和第二种方式相同：<br>   在html中:</p>\n<pre><code>&lt;a href=&quot;android://?action=com.example.wudi.webviewdemo.baginfo&amp;id=123&quot;&gt; Take a QR code &lt;/a&gt;\n</code></pre><p>   与第二种方式不同的是：当中的链接是自己自定义的，如果你够聪明，就能拼写出优秀的uri，就像上边我拼的，因为项目中，需要和ios同步开发（ios用的LMBIOS），所以我定义了android来作为我的区分。<br>   下边我们需要在清单文件中给activity设置action和category</p>\n<pre><code>&lt;activity android:name=&quot;.DemoActivity&quot;&gt;\n  &lt;!-- &lt;!— URI Scheme方式 -—&gt;\n    &lt;intent-filter&gt;\n        &lt;action android:name=&quot;com.example.wudi.webviewdemo.baginfo&quot;/&gt;\n        &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt;\n    &lt;/intent-filter&gt;\n&lt;/activity&gt;\n</code></pre><p>   可以发现我设置的action和上边链接中action参数一致，下边就需要在webview重定向时，进行判断了</p>\n<pre><code>webview.setWebViewClient(new WebViewClient() {\n    @Override\n    public boolean shouldOverrideUrlLoading(WebView view, String url) {\n        // TODO Auto-generated method stub\n        //返回值是true的时候控制去WebView打开，为false调用系统浏览器或第三方浏览器\n        if (url.startsWith(&quot;android&quot;)) {\n            Uri uri = Uri.parse(url);\n            String host = uri.getHost();\n            String action = uri.getQueryParameter(&quot;action&quot;);\n            String id = uri.getQueryParameter(&quot;id&quot;);\n            Intent intent = new Intent();\n            intent.setAction(action);\n            intent.putExtra(&quot;id&quot;,id);\n            startActivity(intent);\n        } else {\n            view.loadUrl(url);\n        }\n        return true;\n    }\n});\n</code></pre><p>   可以，看到，我的链接拼接方式可以直接把url转成uri，并获取参数，打开activity</p>\n"},{"layout":"post","title":"linux网络基础之网络模型","date":"2016-08-14T16:00:00.000Z","_content":"#### ISO/OSI七层模型\n\n\t* iso：国际标准化组织\n\t* osi：开放系统互联模型\n\n\n是TCP/IP四层模型的基础\n\n从低到高依次：物理层 数据链路层 网络层 传输层（下四层实际传输） 会话层 表示层 应用层（上三层给用户服务） \n\n- 物理层：传输单位比特，真正的数据传输\n\n- 数据链路层：传输单位帧，这里边包含MAC地址（物理地址，计算机网卡的硬件地址）\n\n- 网络层：报文，这里边包含IP地址（逻辑地址）\n\n- 传输层：数据段 TPDU（传输协议传输协议）\n\n- 会话层：SPDU(会话协议传输地址)\n\n- 表示层：PPDU（表示协议传输地址）\n\n- 应用层：APDU（应用协议传输地址）\n\n\n七层模型：\n\n![](http://ot0nm27pk.bkt.clouddn.com/net.png)\n\n![](http://ot0nm27pk.bkt.clouddn.com/net01.png)\n\n\n#### TCP/IP四层模型\n\nTCP/IP模型与OSI参考模型的对应关系：\n\n![](http://ot0nm27pk.bkt.clouddn.com/net03.png)\n\ntcp/ip模型与osi模型的比较：\n\n* 共同点：\n\n\t1. osi参考模型和tcp/ip参考模型都采用了层次结构的概念\n\t2. 都能提供面向连接和无连接两种通信服务机制\n\n\n\n* 不同点：\n\t1. 前者是七层模型，后者是四层结构\n\t2. 对可靠性要求不同（后者更高）\n\t3. osi模型是在协议开发前设计的，具有通用性，tcp/ip是先有协议然后建立模型，不适用于非tcp/ip网络\n\t4. 实际市场应用不同（osi是理论上的模型，并没有成熟的产品，而tcp/ip已经成为“实际上的国际标准”）\n\n\n\n\n\n\n","source":"_posts/网络基础之网络模型.md","raw":"---\nlayout: post\ntitle:  \"linux网络基础之网络模型\"\ndate:   2016-08-15\ncategories: [计算机网络,基础]\ntags: [Net]\n---\n#### ISO/OSI七层模型\n\n\t* iso：国际标准化组织\n\t* osi：开放系统互联模型\n\n\n是TCP/IP四层模型的基础\n\n从低到高依次：物理层 数据链路层 网络层 传输层（下四层实际传输） 会话层 表示层 应用层（上三层给用户服务） \n\n- 物理层：传输单位比特，真正的数据传输\n\n- 数据链路层：传输单位帧，这里边包含MAC地址（物理地址，计算机网卡的硬件地址）\n\n- 网络层：报文，这里边包含IP地址（逻辑地址）\n\n- 传输层：数据段 TPDU（传输协议传输协议）\n\n- 会话层：SPDU(会话协议传输地址)\n\n- 表示层：PPDU（表示协议传输地址）\n\n- 应用层：APDU（应用协议传输地址）\n\n\n七层模型：\n\n![](http://ot0nm27pk.bkt.clouddn.com/net.png)\n\n![](http://ot0nm27pk.bkt.clouddn.com/net01.png)\n\n\n#### TCP/IP四层模型\n\nTCP/IP模型与OSI参考模型的对应关系：\n\n![](http://ot0nm27pk.bkt.clouddn.com/net03.png)\n\ntcp/ip模型与osi模型的比较：\n\n* 共同点：\n\n\t1. osi参考模型和tcp/ip参考模型都采用了层次结构的概念\n\t2. 都能提供面向连接和无连接两种通信服务机制\n\n\n\n* 不同点：\n\t1. 前者是七层模型，后者是四层结构\n\t2. 对可靠性要求不同（后者更高）\n\t3. osi模型是在协议开发前设计的，具有通用性，tcp/ip是先有协议然后建立模型，不适用于非tcp/ip网络\n\t4. 实际市场应用不同（osi是理论上的模型，并没有成熟的产品，而tcp/ip已经成为“实际上的国际标准”）\n\n\n\n\n\n\n","slug":"网络基础之网络模型","published":1,"updated":"2017-12-26T05:14:25.510Z","comments":1,"photos":[],"link":"","_id":"cjboyl4xx001d1ctm6xd1e4x5","content":"<h4 id=\"ISO-OSI七层模型\"><a href=\"#ISO-OSI七层模型\" class=\"headerlink\" title=\"ISO/OSI七层模型\"></a>ISO/OSI七层模型</h4><pre><code>* iso：国际标准化组织\n* osi：开放系统互联模型\n</code></pre><p>是TCP/IP四层模型的基础</p>\n<p>从低到高依次：物理层 数据链路层 网络层 传输层（下四层实际传输） 会话层 表示层 应用层（上三层给用户服务） </p>\n<ul>\n<li><p>物理层：传输单位比特，真正的数据传输</p>\n</li>\n<li><p>数据链路层：传输单位帧，这里边包含MAC地址（物理地址，计算机网卡的硬件地址）</p>\n</li>\n<li><p>网络层：报文，这里边包含IP地址（逻辑地址）</p>\n</li>\n<li><p>传输层：数据段 TPDU（传输协议传输协议）</p>\n</li>\n<li><p>会话层：SPDU(会话协议传输地址)</p>\n</li>\n<li><p>表示层：PPDU（表示协议传输地址）</p>\n</li>\n<li><p>应用层：APDU（应用协议传输地址）</p>\n</li>\n</ul>\n<p>七层模型：</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net.png\" alt=\"\"></p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net01.png\" alt=\"\"></p>\n<h4 id=\"TCP-IP四层模型\"><a href=\"#TCP-IP四层模型\" class=\"headerlink\" title=\"TCP/IP四层模型\"></a>TCP/IP四层模型</h4><p>TCP/IP模型与OSI参考模型的对应关系：</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net03.png\" alt=\"\"></p>\n<p>tcp/ip模型与osi模型的比较：</p>\n<ul>\n<li><p>共同点：</p>\n<ol>\n<li>osi参考模型和tcp/ip参考模型都采用了层次结构的概念</li>\n<li>都能提供面向连接和无连接两种通信服务机制</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li>不同点：<ol>\n<li>前者是七层模型，后者是四层结构</li>\n<li>对可靠性要求不同（后者更高）</li>\n<li>osi模型是在协议开发前设计的，具有通用性，tcp/ip是先有协议然后建立模型，不适用于非tcp/ip网络</li>\n<li>实际市场应用不同（osi是理论上的模型，并没有成熟的产品，而tcp/ip已经成为“实际上的国际标准”）</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"ISO-OSI七层模型\"><a href=\"#ISO-OSI七层模型\" class=\"headerlink\" title=\"ISO/OSI七层模型\"></a>ISO/OSI七层模型</h4><pre><code>* iso：国际标准化组织\n* osi：开放系统互联模型\n</code></pre><p>是TCP/IP四层模型的基础</p>\n<p>从低到高依次：物理层 数据链路层 网络层 传输层（下四层实际传输） 会话层 表示层 应用层（上三层给用户服务） </p>\n<ul>\n<li><p>物理层：传输单位比特，真正的数据传输</p>\n</li>\n<li><p>数据链路层：传输单位帧，这里边包含MAC地址（物理地址，计算机网卡的硬件地址）</p>\n</li>\n<li><p>网络层：报文，这里边包含IP地址（逻辑地址）</p>\n</li>\n<li><p>传输层：数据段 TPDU（传输协议传输协议）</p>\n</li>\n<li><p>会话层：SPDU(会话协议传输地址)</p>\n</li>\n<li><p>表示层：PPDU（表示协议传输地址）</p>\n</li>\n<li><p>应用层：APDU（应用协议传输地址）</p>\n</li>\n</ul>\n<p>七层模型：</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net.png\" alt=\"\"></p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net01.png\" alt=\"\"></p>\n<h4 id=\"TCP-IP四层模型\"><a href=\"#TCP-IP四层模型\" class=\"headerlink\" title=\"TCP/IP四层模型\"></a>TCP/IP四层模型</h4><p>TCP/IP模型与OSI参考模型的对应关系：</p>\n<p><img src=\"http://ot0nm27pk.bkt.clouddn.com/net03.png\" alt=\"\"></p>\n<p>tcp/ip模型与osi模型的比较：</p>\n<ul>\n<li><p>共同点：</p>\n<ol>\n<li>osi参考模型和tcp/ip参考模型都采用了层次结构的概念</li>\n<li>都能提供面向连接和无连接两种通信服务机制</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li>不同点：<ol>\n<li>前者是七层模型，后者是四层结构</li>\n<li>对可靠性要求不同（后者更高）</li>\n<li>osi模型是在协议开发前设计的，具有通用性，tcp/ip是先有协议然后建立模型，不适用于非tcp/ip网络</li>\n<li>实际市场应用不同（osi是理论上的模型，并没有成熟的产品，而tcp/ip已经成为“实际上的国际标准”）</li>\n</ol>\n</li>\n</ul>\n"},{"layout":"post","title":"远程登录服务器","date":"2016-09-09T16:00:00.000Z","_content":"\n* SSH协议原理\n\n\n\t对称加密算法：\n\t     采用单钥密码系统的加密方法，同一个秘钥可以同时用作信息的加密和解密，这种加密方法成为对称加密，也称为单秘钥加密\n\n\t非对称加密算法：\n\t     又名“公开秘钥加密算法”，非对称加密算法需要两个秘钥：公开秘钥和私有秘钥\n\n\t\tssh 用户名@ip  远程登录指定Linux服务器\n\t\t\n\t\tscp [-r] 用户名@ip：文件路径 本地路径  下载文件\n\t\t\n\t\tscp [-r] 本地文件 用户名@ip：上传路径  上传文件\n\n\n* SecureCRT远程管理工具\n\n       windows平台管理linux服务器，收费\n\n\n* Xshell工具\n\n       windows平台管理linux服务器，免费\n","source":"_posts/远程登录服务器.md","raw":"---\nlayout: post\ntitle:  \"远程登录服务器\"\ndate:   2016-09-10\ncategories: [计算机网络,ssh]\ntags: [Net]\n---\n\n* SSH协议原理\n\n\n\t对称加密算法：\n\t     采用单钥密码系统的加密方法，同一个秘钥可以同时用作信息的加密和解密，这种加密方法成为对称加密，也称为单秘钥加密\n\n\t非对称加密算法：\n\t     又名“公开秘钥加密算法”，非对称加密算法需要两个秘钥：公开秘钥和私有秘钥\n\n\t\tssh 用户名@ip  远程登录指定Linux服务器\n\t\t\n\t\tscp [-r] 用户名@ip：文件路径 本地路径  下载文件\n\t\t\n\t\tscp [-r] 本地文件 用户名@ip：上传路径  上传文件\n\n\n* SecureCRT远程管理工具\n\n       windows平台管理linux服务器，收费\n\n\n* Xshell工具\n\n       windows平台管理linux服务器，免费\n","slug":"远程登录服务器","published":1,"updated":"2017-12-26T05:14:25.512Z","comments":1,"photos":[],"link":"","_id":"cjboyl4xz001i1ctm5y9ryzpn","content":"<ul>\n<li>SSH协议原理</li>\n</ul>\n<pre><code>对称加密算法：\n     采用单钥密码系统的加密方法，同一个秘钥可以同时用作信息的加密和解密，这种加密方法成为对称加密，也称为单秘钥加密\n\n非对称加密算法：\n     又名“公开秘钥加密算法”，非对称加密算法需要两个秘钥：公开秘钥和私有秘钥\n\n    ssh 用户名@ip  远程登录指定Linux服务器\n\n    scp [-r] 用户名@ip：文件路径 本地路径  下载文件\n\n    scp [-r] 本地文件 用户名@ip：上传路径  上传文件\n</code></pre><ul>\n<li><p>SecureCRT远程管理工具</p>\n<pre><code>windows平台管理linux服务器，收费\n</code></pre></li>\n</ul>\n<ul>\n<li><p>Xshell工具</p>\n<pre><code>windows平台管理linux服务器，免费\n</code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>SSH协议原理</li>\n</ul>\n<pre><code>对称加密算法：\n     采用单钥密码系统的加密方法，同一个秘钥可以同时用作信息的加密和解密，这种加密方法成为对称加密，也称为单秘钥加密\n\n非对称加密算法：\n     又名“公开秘钥加密算法”，非对称加密算法需要两个秘钥：公开秘钥和私有秘钥\n\n    ssh 用户名@ip  远程登录指定Linux服务器\n\n    scp [-r] 用户名@ip：文件路径 本地路径  下载文件\n\n    scp [-r] 本地文件 用户名@ip：上传路径  上传文件\n</code></pre><ul>\n<li><p>SecureCRT远程管理工具</p>\n<pre><code>windows平台管理linux服务器，收费\n</code></pre></li>\n</ul>\n<ul>\n<li><p>Xshell工具</p>\n<pre><code>windows平台管理linux服务器，免费\n</code></pre></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjboyl4ws00051ctm5rg4klbs","category_id":"cjboyl4wo00021ctmqxqcpvh3","_id":"cjboyl4xh000v1ctm1pxe6hx6"},{"post_id":"cjboyl4ws00051ctm5rg4klbs","category_id":"cjboyl4xc000j1ctmkl5jr6la","_id":"cjboyl4xq000z1ctmwao0nc1i"},{"post_id":"cjboyl4wi00001ctmbh6ftswx","category_id":"cjboyl4wo00021ctmqxqcpvh3","_id":"cjboyl4xt00131ctmuehlkfmd"},{"post_id":"cjboyl4wi00001ctmbh6ftswx","category_id":"cjboyl4xf000p1ctm6z7tyirt","_id":"cjboyl4xv00171ctmc3uoxi0z"},{"post_id":"cjboyl4wv00061ctmtqvs88zf","category_id":"cjboyl4wo00021ctmqxqcpvh3","_id":"cjboyl4xx001b1ctmi68q2bkj"},{"post_id":"cjboyl4wv00061ctmtqvs88zf","category_id":"cjboyl4xi000w1ctmu61huhu6","_id":"cjboyl4xy001f1ctmyg0ky0di"},{"post_id":"cjboyl4wz000a1ctm696xe9cg","category_id":"cjboyl4wo00021ctmqxqcpvh3","_id":"cjboyl4y0001k1ctmjkayo8a3"},{"post_id":"cjboyl4wz000a1ctm696xe9cg","category_id":"cjboyl4xu00151ctmpplaxhop","_id":"cjboyl4y2001n1ctmxuisbtxz"},{"post_id":"cjboyl4wn00011ctm02is2f4g","category_id":"cjboyl4wo00021ctmqxqcpvh3","_id":"cjboyl4y2001p1ctmhppj0h3d"},{"post_id":"cjboyl4wn00011ctm02is2f4g","category_id":"cjboyl4xf000p1ctm6z7tyirt","_id":"cjboyl4y3001s1ctm5rmmt75i"},{"post_id":"cjboyl4x5000c1ctmlvbogr9n","category_id":"cjboyl4wo00021ctmqxqcpvh3","_id":"cjboyl4y4001u1ctmuivef9gj"},{"post_id":"cjboyl4x5000c1ctmlvbogr9n","category_id":"cjboyl4xf000p1ctm6z7tyirt","_id":"cjboyl4y5001x1ctmwwtrnvu4"},{"post_id":"cjboyl4x8000g1ctmiz1pezal","category_id":"cjboyl4wo00021ctmqxqcpvh3","_id":"cjboyl4y5001y1ctmv8uw1gjs"},{"post_id":"cjboyl4x8000g1ctmiz1pezal","category_id":"cjboyl4y3001q1ctm4aen7crc","_id":"cjboyl4y500201ctmp093aiws"},{"post_id":"cjboyl4wr00041ctm6uptc3al","category_id":"cjboyl4wo00021ctmqxqcpvh3","_id":"cjboyl4y600211ctm0gri9h75"},{"post_id":"cjboyl4wr00041ctm6uptc3al","category_id":"cjboyl4xi000w1ctmu61huhu6","_id":"cjboyl4y600231ctmqx1pcmdr"},{"post_id":"cjboyl4xb000i1ctmpehawurd","category_id":"cjboyl4wo00021ctmqxqcpvh3","_id":"cjboyl4y600241ctmel2khynq"},{"post_id":"cjboyl4xb000i1ctmpehawurd","category_id":"cjboyl4xu00151ctmpplaxhop","_id":"cjboyl4y600261ctms5ocp62n"},{"post_id":"cjboyl4xh000u1ctm9ih5bdgz","category_id":"cjboyl4wo00021ctmqxqcpvh3","_id":"cjboyl4y7002a1ctme8bcv9aw"},{"post_id":"cjboyl4xh000u1ctm9ih5bdgz","category_id":"cjboyl4xu00151ctmpplaxhop","_id":"cjboyl4y8002c1ctm1juuvh4c"},{"post_id":"cjboyl4xk000y1ctm6o9qustj","category_id":"cjboyl4wo00021ctmqxqcpvh3","_id":"cjboyl4y8002d1ctmbd0c7paa"},{"post_id":"cjboyl4xk000y1ctm6o9qustj","category_id":"cjboyl4y700291ctmnsotw9t9","_id":"cjboyl4y8002f1ctmo6rv9n9e"},{"post_id":"cjboyl4xs00121ctmbxd4ao7g","category_id":"cjboyl4wo00021ctmqxqcpvh3","_id":"cjboyl4y9002g1ctmipej0q1t"},{"post_id":"cjboyl4xs00121ctmbxd4ao7g","category_id":"cjboyl4y8002b1ctm24hj0bhr","_id":"cjboyl4y9002i1ctmwjtu0js9"},{"post_id":"cjboyl4xv00161ctmggs72qbf","category_id":"cjboyl4y8002e1ctmourn8j3i","_id":"cjboyl4y9002j1ctmrjkf8wgd"},{"post_id":"cjboyl4xw001a1ctmzlvohw75","category_id":"cjboyl4wo00021ctmqxqcpvh3","_id":"cjboyl4y9002l1ctm992wrion"},{"post_id":"cjboyl4xw001a1ctmzlvohw75","category_id":"cjboyl4y9002h1ctmc93pvc30","_id":"cjboyl4ya002n1ctmo0k8hmd4"},{"post_id":"cjboyl4xd000m1ctmiie4jzbh","category_id":"cjboyl4y600221ctmsw53i8ou","_id":"cjboyl4yb002q1ctmsho5ld6o"},{"post_id":"cjboyl4xd000m1ctmiie4jzbh","category_id":"cjboyl4ya002o1ctmdyu4xt6g","_id":"cjboyl4yc002s1ctm5sotbkbx"},{"post_id":"cjboyl4xe000o1ctmmxj9zx97","category_id":"cjboyl4y600251ctmcm4eshih","_id":"cjboyl4yc002t1ctmqwakx9bv"},{"post_id":"cjboyl4xe000o1ctmmxj9zx97","category_id":"cjboyl4yb002p1ctmvgdrcwrd","_id":"cjboyl4yd002v1ctmwgffl86e"},{"post_id":"cjboyl4xg000r1ctmcbrebmv0","category_id":"cjboyl4y700271ctmek0ygawd","_id":"cjboyl4yd002w1ctm5t1syglk"},{"post_id":"cjboyl4xg000r1ctmcbrebmv0","category_id":"cjboyl4yb002r1ctmtyonec32","_id":"cjboyl4yd002y1ctmpjffweu9"},{"post_id":"cjboyl4xx001d1ctm6xd1e4x5","category_id":"cjboyl4y600251ctmcm4eshih","_id":"cjboyl4ye002z1ctm5fprakgk"},{"post_id":"cjboyl4xx001d1ctm6xd1e4x5","category_id":"cjboyl4yb002p1ctmvgdrcwrd","_id":"cjboyl4ye00301ctm2j531ztx"},{"post_id":"cjboyl4xz001i1ctm5y9ryzpn","category_id":"cjboyl4y600251ctmcm4eshih","_id":"cjboyl4ye00311ctmjzu1fvok"},{"post_id":"cjboyl4xz001i1ctm5y9ryzpn","category_id":"cjboyl4yd002x1ctmdyjivzz3","_id":"cjboyl4yf00321ctmcyf3z30n"}],"PostTag":[{"post_id":"cjboyl4ws00051ctm5rg4klbs","tag_id":"cjboyl4wq00031ctm8rd9s993","_id":"cjboyl4wy00091ctmxx88tnhc"},{"post_id":"cjboyl4wi00001ctmbh6ftswx","tag_id":"cjboyl4wq00031ctm8rd9s993","_id":"cjboyl4x4000b1ctmhmf1pmmi"},{"post_id":"cjboyl4wv00061ctmtqvs88zf","tag_id":"cjboyl4wq00031ctm8rd9s993","_id":"cjboyl4x8000f1ctm3jom7c74"},{"post_id":"cjboyl4wz000a1ctm696xe9cg","tag_id":"cjboyl4wq00031ctm8rd9s993","_id":"cjboyl4xa000h1ctmmtrhcyaj"},{"post_id":"cjboyl4wn00011ctm02is2f4g","tag_id":"cjboyl4wq00031ctm8rd9s993","_id":"cjboyl4xd000l1ctm1d083265"},{"post_id":"cjboyl4x5000c1ctmlvbogr9n","tag_id":"cjboyl4wq00031ctm8rd9s993","_id":"cjboyl4xe000n1ctmz85a5zl7"},{"post_id":"cjboyl4wr00041ctm6uptc3al","tag_id":"cjboyl4wq00031ctm8rd9s993","_id":"cjboyl4xf000q1ctmpoj7ij5f"},{"post_id":"cjboyl4xb000i1ctmpehawurd","tag_id":"cjboyl4wq00031ctm8rd9s993","_id":"cjboyl4xg000t1ctmyxrt3dfq"},{"post_id":"cjboyl4x8000g1ctmiz1pezal","tag_id":"cjboyl4wq00031ctm8rd9s993","_id":"cjboyl4xk000x1ctmaa4bv88y"},{"post_id":"cjboyl4x8000g1ctmiz1pezal","tag_id":"cjboyl4xd000k1ctmav5e5uvo","_id":"cjboyl4xr00111ctmdw7mtm2p"},{"post_id":"cjboyl4xh000u1ctm9ih5bdgz","tag_id":"cjboyl4wq00031ctm8rd9s993","_id":"cjboyl4xu00141ctmbsidsa53"},{"post_id":"cjboyl4xd000m1ctmiie4jzbh","tag_id":"cjboyl4xg000s1ctmeijd0bcc","_id":"cjboyl4xw00191ctmyoloqnje"},{"post_id":"cjboyl4xk000y1ctm6o9qustj","tag_id":"cjboyl4wq00031ctm8rd9s993","_id":"cjboyl4xx001c1ctmqd38l2r2"},{"post_id":"cjboyl4xs00121ctmbxd4ao7g","tag_id":"cjboyl4wq00031ctm8rd9s993","_id":"cjboyl4xz001h1ctmfibcqhoa"},{"post_id":"cjboyl4xe000o1ctmmxj9zx97","tag_id":"cjboyl4xr00101ctmlhbg8lvh","_id":"cjboyl4y0001j1ctmjd40pmkn"},{"post_id":"cjboyl4xw001a1ctmzlvohw75","tag_id":"cjboyl4wq00031ctm8rd9s993","_id":"cjboyl4y2001m1ctmmowa28rj"},{"post_id":"cjboyl4xg000r1ctmcbrebmv0","tag_id":"cjboyl4xw00181ctmgn9zdps8","_id":"cjboyl4y2001o1ctm777eh1rw"},{"post_id":"cjboyl4xx001d1ctm6xd1e4x5","tag_id":"cjboyl4xr00101ctmlhbg8lvh","_id":"cjboyl4y3001r1ctmta2vcqre"},{"post_id":"cjboyl4xz001i1ctm5y9ryzpn","tag_id":"cjboyl4xr00101ctmlhbg8lvh","_id":"cjboyl4y4001t1ctmbhz4iksf"},{"post_id":"cjboyl4xv00161ctmggs72qbf","tag_id":"cjboyl4xz001g1ctmd1tzg3ik","_id":"cjboyl4y5001w1ctmbigvhb6i"}],"Tag":[{"name":"Android","_id":"cjboyl4wq00031ctm8rd9s993"},{"name":"Java","_id":"cjboyl4xd000k1ctmav5e5uvo"},{"name":"JS","_id":"cjboyl4xg000s1ctmeijd0bcc"},{"name":"Net","_id":"cjboyl4xr00101ctmlhbg8lvh"},{"name":"Text","_id":"cjboyl4xw00181ctmgn9zdps8"},{"name":"生活","_id":"cjboyl4xz001g1ctmd1tzg3ik"}]}}